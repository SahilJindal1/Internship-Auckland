_I wonder how long we can keep the trend going of our Issue #s in this project matching the same Issues in the iojs.org project ... So far we're 1 for 1!_ 
I think we need to talk to whatever lawyers the Node Foundation has about the licensing/logos deal. I assume the repo will bit MIT, but the logos will probably have to live with a WG. Website/Evangelism are the obvious ones. However, I know jack sh*t about law, so we need to consult someone who knows. Is there someone from the foundation that can direct us to the right place? 
I agree that we need foundation input on this. That's one reason they are there: legal support. Do we have a liaison with the foundation? Or should each of us be a liaison? 
@therebelrobot I hate to keep bothering @rvagg with this stuff, but he seems to know what's going on with the Foundation and where to go/who to talk to about this stuff.   Rod: Do you have an idea of where we can go for this? Also, is there someone else that we can/should have as a point of contact/information about the Foundation? 
Yes, I've started discussing some of this with them but will not likely connect the dots until next week. I'm going to try and connect some of the website & evangelism teams with appropriate people in LF so they can be used as a resource, at the moment there's a bit of a barrier between the community and the formal side of the foundation that we need to work on breaking down simply by connecting people together. 
_I wonder how long we can keep the trend going of our Issue #s in this project matching the same Issues in the iojs.org project ... So far we're 2 for 2!_ 
_lol. The next issue # is a PR: https://github.com/nodejs/iojs.org/pull/3. Probably not going to happen unless we force it to :P_ 
Closing, the README seems up to date. 
+1. 
+1 
Can you name the Working Group that's responsible for those repos? Specifying a name seems important to me. I would say Website WG is the appropriate name. 
Yeah, I think specifying the group and/or the group members would be a smart idea, give readers somewhere to go if they need to contact us. 
Possible formatting:   ``` Markdown ### Website WG Members + Contact Full Name: @gh-name, [@twitter-name](), `email``@``provider.tld` ```  ### Website WG Members + Contact  Full Name: @gh-name, [@twitter-name](twitter.com/twitter-name), `email``@``provider.tld`  The markdown-formatted email provides an easy-to-copy email that hides the address from spiders in different tags.  I'd be happy to go through and fill in this information if I can get a list of people to include. 
Trent Oswald: @therebelrobot, [@therebelrobot](http://twitter.com/therebelrobot), `trentoswald``@``therebelrobot.com`  Though I'm pretty sure **all** of the spiders have my email :P   @nodejs/website, I would suggest commenting on this thread with the info you want for yourself in this file. 
I tried to sneak in 'naming' the group by using `Website Working Group` in context, shortly after it is more generically defined. Granted, I almost made the addition myself a few times earlier in the document, but I was trying to keep consistent with the older structure.  Re: these or any other changes proposed, this branch is living on our repo. I'd encourage collaborators to make any small additions or changes as they see fit directly (versus just commenting: takes almost as much time if you use the built-in editor.) 
Previously our README maintained the list of WG members/collaborators and this document just linked to that part of the README. Do we want to just move that section here instead? (I'd rather it just live in one place, regardless of which option.) 
@snostorm I think it should stay in the README.md file. There's a wall of text in this file that is on par with legalese - I think it's best to keep it where it can be found very fast, without needing to worry about the rest of the content in this file.  
Agreed, et al. 
Ok, so perhaps we can open a separate PR for us to all get our names in the README and work out how to organize WG Members/Collaborators? That way we won't dilute the evaluation of this PR. (I assume we still want to be more clear about the "Website Working Group" name, for example.) 
@nodejs/website Any objections about merging this? 
Resolved, we're live :) 
We're doing this a bit now, would love new issues for more specific points of collaboration. 
It's relatively easy to adapt a tool to pull that metadata out of the markdown and parse it, if we need that. 
https://github.com/nodejs/docs :sunglasses:  
I just happened to take a look at the Website WG's repos, and I noticed doc-tool is in there. It needs to be discussed if that should still be maintained by the Website WG, or if that should be handed over to the Documentation WG. I think it would be ideal for the Website WG to maintain it, as the Documentation WG isn't really centered around the building of the docs website so much as it is the _content_ of the docs website. 
Is doc-tool the old documentation builder or the new one? 
I have a [self-assigned task](https://github.com/nodejs/docs/issues/12) for figuring out the doc tooling for the docs WG. 
Closing, this tool isn't finished and we're moving towards merging content directly into the website. 
Yeah, that's weird. 
+1 
I'm in a habit of manually wrapping my markdown files' text after lines get long. But it looks funny when the rest of the document isn't doing that.  Thanks @bnb  
Hi, we control the domain but as I mentioned earlier we were a bit hesitant taking ownership as I don't think we know what the community wants us to do with it yet. Our IT team is here to help if someone can provide them with instructions. I'm not sure what services would/could be disrupted but we'll have to coordinate with Joyent's team perhaps as they may have the best visibility on the dependencies out there. 
I thought the person managing the nodejs.org domain at Joyent had already confirmed to the Linux Foundation that it was fine to transfer the domain ownership, as long as no entry in the domain were removed or changed. I seem to remember that Joyent already provided all that was needed for that to happen.  Am I missing something? 
the foundation has the domain name but it's still pointed at the old DNS provider because nobody wants to change that without understanding all the records we might break :) I think Rod is working on a plan for this in another issue though. 
Yes, a new DNS setup is being discussed in nodejs/build#124. 
Resolved. 
Do we want to put something in there about WG discussions? Like we used to have them in the iojs.org repo, now we're having them here? Or do we want a specific WG repo for administrative stuff? 
I think this repo is fine for that, and I'd say it's probably already covered by this:  > This repo's issues section will also become the primary home for the Website WG's coordination efforts (meeting planning, minute approval, etc.) 
Any more thoughts on this? 
LGTM, we should merge it. 
LGTM too. Merging. 
It is known. ;) 
As names are added here are you going to keep adding to a parallel PR? I expected there just just to be an "ongoing" PR-issue we could all just pull/add our names to. (I can set this up? I just wasn't able to when I suggested it.) 
@snostorm That sounds excellent. If you can't set it up, I'll be able to figure out a way to do it. 
See #14. To contribute just pull the [README-adds-wg-collaborator](https://github.com/nodejs/new.nodejs.org/tree/README-adds-wg-collaborators) branch and then push back up. 
I'd like to become a WG member as well (also for io.js) … is there an official "process"? (There were no WG meetings in the last few weeks, also https://github.com/nodejs/iojs.org/issues/203 shows no recent activity) 
We should adopt and improve the liberal contributor agreement core has so that anyone contributing becomes a member of the WG. 
@fhemberger I think you are a member if you add yourself to the README.md - you are also owner of this repo, you just need to push your commit  @mikeal +1 sounds great! 
@robertkowalski I know that I'm able to just go ahead and do it, but it would feel like giving myself a promotion. That's why I asked before. 
oh, i thought we were all wg members? are there differences? which? 
On the io.js website repo we had two different "roles" so far: contributors and WG members. The first one you get (obviously) after some contribution to the project to encourage shared code responsibility. The latter is more about long term commitment and getting actively involved in decision making regarding the project's course. But the lines between those two are blurred. (I hope I summed this up correctly). 
Maybe we could come up with a way for the WG to essentially contain "current active contributors" to make it easy to shuffle people out of the meetings who get caught up in other work and easily bring in the people who are more actively contributing. 
@mikeal Can you please add @phillipj to the contributors? 
@fhemberger added, and I made you a team maintainer. 
@mikeal Cool, thanks. 
Oooh appreciate it, thanks! :dancers:  
Everyone is merged in now AFAIK. 
I was assuming alphabetical by first name, so that's why (for now) I'm at the top of the list. Lets stick with that order as we all add our names. 
Ping @nodejs/website : if you're a WG member or collaborator, please add your name to this PR 
cc @indexzero (Since I know he still wants to be involved.) 
@snostorm Can we merge this into master? So far we have six people on board, further members can just go ahead and add themselves later. 
@nodejs/website Any objections about merging this? 
Rebased via 101aa109f54ee09d1ed7f314ce66b3f10434802e and following. 
@bnb you can directly clone and push back to branches hosted on the repos we control (such as the one setup for #14.) Alternatively, you can target a PR against a specific branch that is not master, although in this case the first option was preferred.  Regardless, thanks for getting your information pushed up. I've closed this PR because I merged the commits in this PR in to the existing one, #14. 
+1, it's a minor thing but worthwhile. The person to contact would be @mkdolan  
+1. As @jasnell it's small but worth the extra work. What content would be appropriate here? 
I've liked the idea of a foundation specific site for a while. As we begin to redesign nodejs.org it might be worth considering going down that road as a potential option. 
What would be the content of the foundation site that won't be available on the regular nodejs website? (And I don't see cross posting as an option, more as a bad practice in this case.) 
Foundation site should have: - the list of members - membership agreement  - bylaws - list of projects and committees in the foundation - IP agreement - certificate of incorporation  > On Jul 12, 2015, at 11:24PM, Frederic Hemberger notifications@github.com wrote: >  > What would be the content of the foundation site that won't be available on the regular nodejs website? > (And I don't see cross posting as an option, more as a bad practice in this case.) >  > — > Reply to this email directly or view it on GitHub https://github.com/nodejs/new.nodejs.org/issues/16#issuecomment-120826029. 
Ok, it makes sense to have those things on a separate domain (also foundation related blog posts). Also  people editing those kind of documents may be a different subset than the folks working regularly on  new.nodejs.org. 
We have a page for this now, we can just forward to it via these other domains but we should create a seperate issue for that. 
@fhemberger I have a working version. Will make a PR for it.  Just a  few things I noticed,  - shouldn't the css from `index.hbs` go to the css (.styl)  - the same with the css in `download.hbs` and add the picture to the images folder instead of hardcoding - why is the mac version hardcoded on the index, maybe a bit strange if you click download on a linux os. 
@hoxoa Yes, all styles are supposed to be in the .styl files, also the hard coding of the Mac version was just a mishap. /cc @mikeal  
Are we talking for the website or in general? 
Just the website. Specificaly "new.nodejs.org" 
Absolute minimum is what's on nodejs.org moved over to our i18n build system, afaik. I'll try to put more of my own time here after I deal with `_unrefActive()`. 
I think we should take the time and look at the content and overall structure as well, before we just pull everything over. There are some quirks on the current nodejs website and I think we could get rid of some of the content (or at least restructure it). That would make it easier for the translators as well. 
Do we want to engage the Linux Foundation to provide any design resources? 
> Do we want to engage the Linux Foundation to provide any design resources?  it was suggested by someone else, and I would prefer to ask the community for design ideas before doing anything major. 
@Fishrock123 We've already asked for that and even promoted it and didn't get anything usable yet.  I'd like to inject a little bit of urgency in to this. My impression right now is that things are stalled either because we feel blocked on something we can't identify or because there isn't a good starting point for people to pick up at go.   I'm willing to block out some time to migrate the old build system over the current design and to get a new design from the LF that incorporates the new structure (although I'm probably not the best person to implement the design), documents and messaging we want to highlight. Last time the website took off after I threw up some code (quite terrible code) that was an obvious starting point for others to improve.  
@mikeal I have some feedback/a little request about the build system, I'll write a ticket for it later. I'll also put some time into content structure and can help with the implementation of the design as well (as soon as it is available).  I think what's blocking (at least me) at the moment is that it's not yet clear, when we'll have the first "real" merged version of node/io.js and how the convergence is coming along in this part of the project. So is the core team waiting for the website to be finished or is it the other way round? Do we need a go from the foundation first or what exactly is it we are waiting for. 
> when we'll have the first "real" merged version of node/io.js and how the convergence is coming along in this part of the project  I don't think we need to block on this. If we have a website ready and we don't have converged releases we'll just put up both io.js and node.js releases. 
> My impression right now is that things are stalled either because we feel blocked on something we can't identify or because there isn't a good starting point for people to pick up at go.  I actually think it's just blocked on people's time. 
> I actually think it's just blocked on people's time.  This might be a good reason to just have the LF whip something up to move forward on. Once something is up people can still contribute to it via PRs. 
No like, I mean time to do the dirty code/build work, the design doesn't even have to change. 
ok, i'm gonna start dumping some code in here. it'll be the old build system with a bunch of new code for the proposed taxonomy and some stub content.  to reduce bike shedding i'm going to propose that i just commit this to master and that anyone else who wants to jump in does the same until it starts to solidify. everyone should continue to tweak the copy and style at will for a bit while we work stuff out, if you're wondering about a change then send it as a PR.  thoughts? 
> ok, i'm gonna start dumping some code in here. it'll be the old build system with a bunch of new code for the proposed taxonomy and some stub content.  Which old build system? I was hoping to dump the one from io.js here (since that's the best start) but It's gotten pushed back.  > to reduce bike shedding i'm going to propose that i just commit this to master and that anyone else who wants to jump in does the same until it starts to solidify. everyone should continue to tweak the copy and style at will for a bit while we work stuff out, if you're wondering about a change then send it as a PR.  I'd say have at it basically until it's live-on-commit like iojs.org. 
> Which old build system? I was hoping to dump the one from io.js here (since that's the best start) but It's gotten pushed back.  Correct, the gulp build system iojs.org uses, _not_ the makefile nodejs.org is using. 
First draft of how a unified content structure could look like: - **Home** - **About**     What **is** node.js? What does it do? How did we get there? (short summary)   - Organizational structure:       Foundation (Tasks, Members), TSC (Tasks, Members), Advisory board(?).  Documents, minutes, etc. can be found on `nodejs.foundation` site.   - Contribute:     - Code contributions     - Contribution workflow     - Becoming a collaborator     - Report security issues (also offer `secutity``@``nodejs.org`)   - Roadmap - **Resources**   - Getting started   - ES6   - FAQ   - Getting help: NodeSchool, Stack Overflow (link to community)   - Logos, Press material, desktop backgrounds - **API documentation**     Will be accessed most of the time, so better make it a primary navigation entry - **Community**     How does the node.js community work? What are the core values (CoC)? How and what can you do?   - GitHub, IRC, Twitter, etc.   - International communities and websites   - Events   - Jobs - **Downloads**     Download links in platform matrix   - Release history (Release notes, Changelog) - **Blog**     More like the current io.js posts, move release announcements to release history instead (prevent duplicate content). If the original article is on an external site (e.g. joyent.com), copy content and use canonical meta tag. 
The new taxonomy doesn't have the foundation, is that going to be a sub-site like "foundation.nodejs.org" or just a page? 
should we just fold API docs in to the "Resources" page? 
> The new taxonomy doesn't have the foundation, is that going to be a sub-site like "foundation.nodejs.org" or just a page?  Its placed under "About/Organizational structure" I'm don't know how future content is supposed to look like for the Foundation. We could either give a short explanation of the overall structure and the foundation's tasks and leave the details for a separate `www.nodejs.foundation` site, or make it a full first level navigation entry. (see #16)  > should we just fold API docs in to the "Resources" page?  I placed the API docs there at first, but I think most of the people visiting the site will either head for news/downloads or the API docs, so I put them on the main navigation instead. Not sure what's the best way to go there … opinions?  It would be nice to have some (rough) log/analytics data from the current nodejs website, to see what parts of the site people are actually reading. @robertkowalski do we have anything in place?  Also pinging @nodejs/website for feedback. 
@fhemberger yes we have, we also have download statistics for node - @tjfontaine created them using manta probably map-reducing the nginx access logs... 
@tjfontaine can you share your manta functions for download stats and other stats? 
> It would be nice to have some (rough) log/analytics data from the current nodejs website  Agreed, but I'm not sure it'll help us too much with the placement of API docs since the current website has a "docs" link which them just gives you a link to the API docs.   It might be a good idea to do a single docs page with 3 or 4 top level showcase links for API, NodeSchool, and the upcoming documentation the docs WG is building. From there we can see where people are going in terms of analytics and if it's all API we can promote it to top level.   Thoughts? 
I'll try to take a look at the whole plan soon, but I think it is important to have a "get started with node + nodeschool" pretty front and center and maybe also otherwise accessible. 
> I'll try to take a look at the whole plan soon, but I think it is important to have a "get started with node + nodeschool" pretty front and center and maybe also otherwise accessible.  Right now those live in the "Resources" page but I'm thinking we can probably find a better name for that section that does a better job of speaking to people who are looking for help. 
> Right now those live in the "Resources" page but I'm thinking we can probably find a better name for that section that does a better job of speaking to people who are looking for help.  I still think that's too obscure. :) 
> I still think that's too obscure. :)  Do you mean it's too obscure to "find a name for people who are looking for help" or are you just re-iterating my point about the word "Resources" being too obscure? 
Sorry, I'm just trying to state that I think it would be good to have a clear "newcomers" section on the main page either way. :) 
> I placed the API docs there at first, but I think most of the people visiting the site will either head for news/downloads or the API docs, so I put them on the main navigation instead. Not sure what's the best way to go there … opinions?  @fhemberger I agree, the API should be listed separate in the nav. When I go to a site for a library, the first thing I look for is the API link.  I think Docs could be used as a Getting Started guide, with API going to the in-depth docs themselves.  (also, sorry about the recent radio silence. Been moving to Pacifica for a few weeks now) 
@mikeal @Fishrock123 If you come up with a better name, just go for it. ;)  Maybe naming the entire section "Getting started" (and having the ES6 and FAQ pages as sub-menu items) would be a good idea, then place "API docs" right next to it in the main navigation. 
FYI: I've started porting the current nodejs.org website to a new, clean structure (including html/css) we can use as a basis for further development. I think I can put up a first draft next week. 
Yay miscommunication. @mikeal has really been working on that.. 
@mikeal Uhh. Which parts have you been working on so far? I've started setting up a clean HTML/CSS structure which I'm currently testing with the content. Hopefully we merge the stuff so no work has been done for nothing …  **EDIT:** FWIW, this is what I did the last hour: Switched the build process to [metalsmith](http://www.metalsmith.io) (which already does most of the build process we want to have in the future with just a couple of lines), using handlebars, stylus (with css-autoprefixer and prism syntax highlighting).  ![](https://cloud.githubusercontent.com/assets/153481/9016620/cd88ab8a-37d2-11e5-96f3-825c938b6450.png)  Basically what's missing is home & download page, the updated content structure and the side navigations for the sub-pages, some style adjustments and cross-browser/mobile testing (including media queries). 
@mikeal I've pushed everything I've been working on so far to https://github.com/nodejs/new.nodejs.org/tree/metalsmith-draft. Blog and about sections are working (still with the old content and structure), all blog posts have been converted to use a proper yaml frontmatter section.  So most of the work which still needs to be done is review/rewrite of the content. Global metadata can be placed [here](https://github.com/nodejs/new.nodejs.org/blob/metalsmith-draft/build.js#L29), localized metadata could be added as `i18n[language-key]`(e.g. `i18n.jp.blog: 'http://blog.iojs.jp/'`). 
> Switched the build process to metalsmith (which already does most of the build process we want to have in the future with just a couple of lines), using handlebars, stylus (with css-autoprefixer and prism syntax highlighting).  I'm not so comfortable with this. Far less people are likely to be familiar with metalsmith, and it puts us in an easier mess if segment.io (the sole company which maintains it) moves to anything else, or changes it vastly.  I'm also not entirely sure magically covering up what we were doing is a great choice.  There is further discussion on build system choice here: https://github.com/nodejs/iojs.org/issues/22 
> Far less people are likely to be familiar with metalsmith, and it puts us in an easier mess if segment.io (the sole company which maintains it) moves to anything else, or changes it vastly.  To be honest, it was just a test and I really don't care what we're using in the end. I used metalsmith because it gave me the the results for setting this site up very quickly (whereas the gulp tasks could need some improvements here and there).  All I really want is to focus on building the site and getting the content ready. 
This is much farther along that what I was doing so I'm going to scrap my thing and we can start from here.  > RE: metalsmith  Let's not bikeshed about tooling. If this is doing everything (including the internationalization and build/release integration) that iojs.org is doing let's move forward. If people don't like this tool then send a PR that replaces it with gulp or whatever tool you like better and we can discuss the switch that way. 
@fhemberger let's merge this to master, nothing is being automatically deployed yet so it's easier to just work out of master while we're still in this early phase. 
@mikeal I haven't figured out all i18n aspects yet, but this should give us the opportunity to get started with the english version quickly and adapt to other languages on the way. I'll merge it to master for now. 
One benefit I can see to this approach already is the use of yaml in the markdown files for variables and then a main content area makes it much simpler and more readable for localizations. When I was porting the old system the JSON files for localized variables was _very_ tedious. 
ok @fhemberger I just made some big changes which make the build system work for localizations.  one thing that I had to turn off was the development server support because we're now working with multiple instances of metalsmith so we can't use the build server from any single one. for a dev server we'll need to use a static file server like `st` along with a file watcher that re-does the builds. however, the new system allows us to test the output static files easily so I'm not really minding just re-running the build script each time I made a change and then reloading the static asset. 
@mikeal Just had a brief look at it: - At the moment, you're duplicating all static assets and CSS for each language. - We still need a way to share global metadata/placeholders between languages. - DNS prefetch: no need for `http:` here. - I don't know why everybody is so reluctant to have white space in their scripts. ;) 
@fhemberger   > At the moment, you're duplicating all static assets and CSS for each language.  Working on this. Moving static is easy but the css has to actually run through the compiler so it's a little trickier. Also, it would be nice if locales could adjust their css on a per locale basis while inheriting the base css.  > We still need a way to share global metadata/placeholders between languages.  Can you give an example?  > DNS prefetch: no need for http: here.  Doesn't work when you're loading static files. However, I have a dev server half working now so this will be changed back soon.  > I don't know why everybody is so reluctant to have white space in their scripts. ;)  Haha! I don't know why I tend to "tighten" code up like this, I'll try to refrain :) 
@fhemberger do you know of a way to get @import in stylus to resolve another path rather than just the current relative path? 
I **think** you can pass additional lookup paths to stylus, haven't tried that yet. 
Just figured it out, spent like an hour debugging this https://github.com/esundahl/metalsmith-stylus/pull/14 :) 
@fhemberger can you edit the checklist add any additional work. 
By the .md files, are they content writing? I'm able to help in any way I can if the quality of the weekly updates I churned out are satisfactory. 
@diagramatics Uhm, at least I used the checkboxes for content migration from nodejs.org/iojs.org, not necessarily for content (re)write or editing, I think this will be the next step. 
@diagramatics @fhemberger Corrent, with the exception of the Resources page which I think should be something new and Docs WG should decide/write that. 
So this whole things isn't about making a real **new** site (including a different design), it's just about merging the contents of the io- and node-site, right?  Does this mean that a re-design would be completely inappropriate? Or at least suggestions for a new layout? Because if I take a look at the current state, nothing has changed regarding styles. 
@leo A little bit of everything. ;) First of all, with the launch of the converged node/iojs v4 being scheduled for October, we want a unified website in place with well structured and up-to-date content. So this is what we're focussing on at the moment. Getting everything set-up (also for the localization teams to start), optimize the site's structure and revise the content.  During the process, we're also cleaning up the HTML and CSS. Design improvements are of cause welcome, but I guess for the moment we won't pursue a radical redesign. 
Ahh, okay!  Then I'll have a look into what needs to be done there and check back again when the re-design happens (since I'd like to help there in terms of development or appearance). 
Added Governance, Working Groups, FAQ, ES6 and a 404 page. 
I added a rough start to the downloads page (iojs skewed right now) as well as starting to port over the i18n and linking handlebar helpers which were helpful in earlier i18n work on iojs.org. There's also some proof of concept work around a "download .md from external repo folders" hiding in the project now. 
Hey @rvagg and @nodejs/build are we going to mess up all the current download links in the migration to the new site if we don't have a new download service solution worked out? 
I just pushed a few big changes to the nav and footer. - Moved "Resources" to "Docs" and put "API Docs" under "Docs"   - We have way too much stuff in the top nav.   - Having one area with docs called "Resources" next to another called "API Docs" was terribly confusing.   - We can debate names all day but people looking for docs tend to look for the word "Docs" or "Documentation" - Moved "/community" to "/contribute"   - The entire project is built by the "community." Each section should have information about how the community maintains those resources.   - The text I used for the top nav is "Get Involved" which is nice and action oriented. - Removed bottom nav.   - This nav was largely redundant and hardly anyone gets to the bottom anyway.   - We'll probably need this space for the localizations at some point. 
Should we have a top level section called "Help"?  I'm not getting notifications for the all the form submissions for joining the foundation and there is a surprising number of support requests that come through simply because it's the only resources on the site that is a form. 
Not sure exactly what the question here is re downloads but here's my current thoughts on the matter: - Move to download directory structure in use on iojs.org but keep it backward compatible like we do there, which means a /download/ directory to contain the different download types with /dist/ being a symlink to /download/release/ so it's basically like nodejs.org/dist - Make io.js releases available in /download/io.js/ where that is what we have now in [iojs.org/download](https://iojs.org/download/), also ensure that iojs.org/download/ and iojs.org/dist continue to work as they do now with no interruption. - Nothing breaks for existing releases, future releases follow roughly the same pattern in nodejs.org/dist so most existing expectations and assumptions still hold. - When we move to a CDN for distributing, we'll just have to adapt over the top of this but we should prioritise backward-compatibility and introducing a CDN into the mix right now is just going to slow us down so we should push that out further.  Clear as mud? 
@rvagg our infra has the io.js releases, obviously, but do we have all the old node.js releases as well so that we don't break all the links to nodejs.org releases the moment we go live with the new site? 
@mikeal working on new infra atm, assume this is going to go live on different infra than we are using for iojs.org right now. Will make sure that all binaries are available so that nodejs.org feels the same to users.  One side item—can we have a catalogue of links from nodejs.org that are going to break as a result of this upgrade (if any) so we can add in redirects to the server config to avoid 404s please. 
> One side item—can we have a catalogue of links from nodejs.org that are going to break as a result of this upgrade (if any) so we can add in redirects to the server config to avoid 404s please.  Very good point, we should put that on the checklist. 
Speaking of downloads. In trying to build the download/release pages (as in user friendly ones) we'll need a version of https://iojs.org/dist/index.json which works for all Node versions, past-and-future. I'm okay with it being two files -- one for the limited io.js line and one for Node -- as long as we can download them as part of the new.nodejs.org build process. 
@snostorm I can make that happen when we get new infra for this. Not going to touch the old infra though. 
@rvagg works for me :) Just wanted to mention the gap 
> One side item—can we have a catalogue of links from nodejs.org that are going to break as a result of this upgrade (if any) so we can add in redirects to the server config to avoid 404s please.  @rvagg Not complete yet, but should catch most of the cases:  ``` rewrite ^/about/advisory-board/                                                     https://$server_name/en/about/organization/ permanent; rewrite ^/about/advisory-board/members/                                             https://$server_name/en/about/organization/ permanent; rewrite ^/about/organization/tsc-meetings/                                          https://$server_name/en/foundation/tsc/minutes/ permanent; rewrite ^/about/organization/tsc-meetings/(.*?)/minutes.html                        https://$server_name/en/foundation/tsc/minutes/$1/ permanent; rewrite ^/about/security/                                                           https://$server_name/en/security/ permanent; rewrite ^/advisory-board/(.*)                                                       https://$server_name/en/about/organization/ permanent; rewrite ^/contribute/                                                               ???? permanent; rewrite ^/contribute/accepting_contributions.html                                   ???? permanent; rewrite ^/contribute/becoming_collaborator.html                                     ???? permanent; rewrite ^/contribute/code_contributions/                                            ???? permanent; rewrite ^/contribute/code_contributions/workflow.html                               ???? permanent; rewrite ^/documentation/                                                            ???? permanent; rewrite ^/documentation/localization/                                               ???? permanent; rewrite ^/documentation/tutorials/                                                  ???? permanent; rewrite ^/foundation/blog.html                                                      https://$server_name/en/blog/ permanent; rewrite ^/foundation/members.html                                                   https://$server_name/en/foundation/members/ permanent;  rewrite ^/images/foundation-visual-guidelines.pdf                                   https://$server_name/static/documents/foundation-visual-guidelines.pdf permanent; rewrite ^/images/logos/js-black(.*)                                                 https://$server_name/static/images/logos/js-black$1 permanent; rewrite ^/images/logos/nodejs-(.*)                                                  https://$server_name/static/images/logos/nodejs-$1 permanent; rewrite ^/images/node-foundation-by-laws.pdf                                        https://$server_name/static/documents/node-foundation-by-laws.pdf permanent; rewrite ^/images/.*trademark-policy.pdf                                             https://$server_name/static/documents/trademark-policy.pdf permanent; rewrite ^/video/(.*)                                                                https://$server_name/static/video/$1 permanent;  http://blog.nodejs.org/\d{4}/\d{2}/\d{2}/(?:.*)?(v(?:ersion))?\d{1,2}\.\d{1,2}\.\d{1,2})(.*)    https://$server_name/en/blog/release/$1/ permanent; http://blog.nodejs.org/(.*)                                                                   https://$server_name/en/blog/$1/ permanent; ``` 
Weekly news link is now automatically generated from `blog/weekly-updates/*.md`, please make sure to always add the variable `date: YYYY-MM-DD` to the YAML frontmatter for this to work. 
By the way: I have access to nodejs.org, so if we need a preview site, maybe I can set something up (preferably with a GitHub hook). 
http://new-nodejs.iojs.org/ is "working" now, I just need to make some small tweaks to get the build steps to actually publish what's in `./dist` whenever we push (right now it runs a placeholder script to match io.js)  Might not be worth hacking in to to the existing nodejs.org server as I believe @nodejs/build is winding up new servers to tie in to https://nodejs.org/dist/ for the 4.0 release. 
@snostorm Ah, okay. 
Are the initial tasks up to date?  According to previous comments by @mikeal it looks like a couple of sections has been renamed - Community -> Contribute  - Resources -> Docs  And contribute and downloads was closed with #37 and #35? 
@phillipj renamed in the checklist :) 
I still would like to have the download-matrix from nodejs.org for the new site as well:  ![](https://cloud.githubusercontent.com/assets/153481/9363174/2a25f36c-46a5-11e5-940d-853b5cc7966b.png)  Also, what about additional platform builds? @mikeal @rvagg Do you know more about it?  ![](https://cloud.githubusercontent.com/assets/153481/9363187/39427c30-46a5-11e5-91c4-cee29924e27c.png) 
+1 to having the download matrix on the new site. 
Question: is there a specific design that the new site is based on? I'm trying to catch up with everything, and wanted to see about making styling fixes where needed, I just don't know where to find the assets (if any). 
No, I took the basic visual design from nodejs.org, but started with fresh html/css. Assets have moved from `/images` to `/static`. If you need something from the old site, just copy it from nodejs.org for now. 
This is super great! Thanks for letting us know.   > On Aug 5, 2015, at 2:05 PM, Mikeal Rogers notifications@github.com wrote: >  > We now have the security policy on the front page of nodejs.org (once we're ready to deploy the new website). >  > If there are any changes to be made to this policy please update https://github.com/nodejs/new.nodejs.org/blob/master/locale/en/security.md >  > @rvagg  > @nodejs/security > @evilpacket >  > — > Reply to this email directly or view it on GitHub. 
Add notice, which legacy versions of Node.js receive security fixes, see: https://github.com/nodejs/nodejs.org/issues/74 
I'm also having several issues in the repo as is (playing on it now myself). Somebody's local project state might have "carried over" to some later upgrades making fresh versions not run.  (Working on a fix too) 
Sorry, hadn't merged @mikeal's PR for `metalsmith-stylus` into my fork yet (yay, time zones). Should work with a fresh `npm install`. 
@fhemberger I had to read that a few time before it clicked what was going on (I was looking for something changed in this repo, ha). Anyway, up and running now after dumping my `node_modules` and starting fresh. Thanks. 
Sorry for the confusion ;) 
Good catch, thanks! 
my system may be requesting Spanish… (es-US) 
URL is http://localhost:8080/en/ - Currently there is no redirect at root level. 
Thanks! 
Is there a tool that we could use here to make this work better on mobile and for other languages that vary quite a bit in size? 
I'll add mobile styles and media queries manually, as soon as the desktop layout is set. It doesn't make much sense at the moment as the desktop view is still changing. 
After some digging I opened a PR in Availity/metalsmith-prism#6 to avoid highlighting all together for inline code blocks where language is not specified. Seems like that would fix the issue of double escaping in these blog posts. 
Thank you! 
Cant find any escaping issues after using the newly released metalsmith-prism :dancers: Close this @fhemberger? 
Yay, great! Thanks for looking after this issue. 
Okay, I haven't tested the build on iojs v3, but I can reproduce the second issue. 
Hmm, I have installed iojs v3.0.0, removed `node_modules` and `npm install` works for me. The issue you had with `npm run build` should be fixed with the latest commit. 
Works fine now, thanks! :blush: 
Thanks for the update. Will this thread be updated as more info becomes available? 
This will happen in the roadmap repo. 
Closing this: - `-webkit-font-smoothing: antialiased` decreases legibility on OS X because of the thin font. - We don't want to decrease the base font size - Web fonts were added via Google web fonts in the mean time. 
> `-webkit-font-smoothing: antialiased` decreases legibility on OS X because of the thin font.  I think you will find a good amount people who disagree with that... is the text we are using currently too small? 
**Without** -webkit-font-smoothing: antialiased on Chrome/OS X:  ![](https://cloud.githubusercontent.com/assets/153481/9550512/1a8736e2-4dac-11e5-9b88-578e7ae8815a.png)  **With** -webkit-font-smoothing: antialiased on Chrome/OS X:  ![](https://cloud.githubusercontent.com/assets/153481/9550519/2440f6c8-4dac-11e5-85b5-98afeb342b66.png) 
what if we increase the default weight and do `-webkit-font-smoothing: antialiased`? 
> what if we increase the default weight and do `-webkit-font-smoothing: antialiased`?  Yeah I was going to suggest something like this so that we can use the below, like io.js:  ``` styl html   -webkit-font-smoothing antialiased   -moz-osx-font-smoothing grayscale   -webkit-font-variant-ligatures none           font-variant-ligatures none ```  Generally you'll end up with more balanced text after that from my understanding. 
I'm fine with trying a different weight, let's see how it turns out. With autoprefixer in the build pipeline, we should be able to drop any custom prefixes. Is there a reason to drop ligatures? 
Ok, added the variable back and set the padding in the Linux Foundation style  ![footer](https://cloud.githubusercontent.com/assets/4576933/9299803/4e519326-4485-11e5-9b4b-be051408c866.png) 
Changes merged through #35 
Thank you, merged. 
> Is this project going to use Bootstrap at all for things like a mobile menu and standardized component styling?  No, we won't.  > What about Font Awesome for download icons, content icons, etc.?  I'm not aware that we need a lot of icons right now. If so, we'll use SVG images instead of icon fonts for performance and optimized mobile display. 
Ok, was just curious as I was working on the site 
Good catch, thank you! 
This probably broke with the new downloads work that got merged. Should this get rebased or is it no longer relevant? 
Well, it reminded me to merge and fix the stying :) It looks good, but the table font looks a little strange on windows/chrome.  ![untitled](https://cloud.githubusercontent.com/assets/4576933/9485575/223b53a0-4b81-11e5-8e1d-2705e37b049d.png) 
How about merging this and deal with the overall font-tuning later? I guess there are still some other cases we need to check. 
I rebased and merged with master. It should be up to date. 
Unfortunately, the changes broke the Download matrix. Can you please take a look at it?  ![](https://cloud.githubusercontent.com/assets/153481/9487327/cff71304-4bd0-11e5-8400-3dde199c6832.png) 
Working on it. Will update soon. 
@AustinWinstanley You working on this? If not, we can close it. 
Closing this due to inactivity. 
![blog](https://cloud.githubusercontent.com/assets/4576933/9342178/f2f23396-45bf-11e5-85bd-7ee43fd8fe5c.png) 
What's the status of this? I'd like to get improved styling merged. 
The blog posts seemed long, so I put a blurb in and the Read the full post link. Would the maintainers rather have the full post, or the blurb and read more? I can finish the implementation of either. 
That last commit was just a merge with the latest master 
@mikeal Do you want to show an excerpt of the latest post (see screenshot)? I'm not entirely happy with the result at the moment, but that's a matter of the post format right now.  Should we add a short (1-2 sentences) "tl;dr" for the weekly updates, which is only shown on the blog index page? 
Is this addressed now by #154? 
@fhemberger Yes, it is. A very positive response on that issue, so I think that one will be preferred. +1 for close. 
I know someone at Travis, I can ask her. 
Doesn't nvm/Travis work with full https on io.js? 
My guess here is that an older version of nvm doesn't handle redirects from old `http://` URLs it it uses and those are in the wild and we're being cautious. Which is why I'd like to know any more scope of this possible issue. 
Definitely an older version of `nvm` had "http:" URLs, but that's now fixed (https://github.com/creationix/nvm/issues/554). `v0.17.3` is old, and `v0.26.1` is what's out now. I still have some updates to make before node v4 will even work with `nvm`, though.  What would have the least breakage would take more time than I think you'd like: - I update `nvm` to work with node `v4.0` and release it (i'm out of the country for the first 3 weeks of september, so i've only got a few days left to try to get this out) - I PR that into `travis-ci` - We wait until they build and deploy new VM images for their infrastructure (i have a direct line to them and can prevail upon them to do this asap) - turn off your https redirect with the node v4 release, thus simultaneously breaking old `nvm` two ways, and people can just upgrade. 
It'd be nice if we had a way of flagging deprecation of these URLs  We can leave them enabled if we really want to be conservative here, I'd just really like a path to moving to full strict-https and this upgrade seemed like a great opportunity to do that, users would realise the site has changed and therefore any breakage they have would logically be part of that, instead if we just change it a few months down the track then it could come out of nowhere. We could post a notice somewhere but it's unlikely to be picked up by the right people. 
done, pretty much identical to old nodejs.org for this now 
Reopening, going to track this because we need to switch, serving binaries via http is not only insecure but it makes the server config really complex and I'd love to see all of that complexity disappear. 
Do we have a clear list of blockers? 
no clear list beyond nvm and knowing that it's likely that there's still old versions out there still in active use  I think this might have to be something we trial, perhaps for a short period of a few hours and see who squeals. 
Is this a case for https://github.com/nodejs/build/pull/193? 
yes, to verify we get all the redirects right when we change the config, but it's mostly about not knowing what's out there and what we might break, how many clients don't follow redirects that are using http, I do know that a _lot_ of users use http and I'd really like to shift that 
How about announcing the planned change on our blog, so that tool authors (hopefully) react and check their code, before doing the switch? May be a smoother approach than just waiting for the squealing. ;)  I'd suggest to announce this soon and wait for 14 days before doing the actual switch. That should give everybody enough time for code changes or to get in contact with us for questions. 
nvm uses curl underneath, doesn't curl follow forwards? 
No, curl does not follow redirects without `-L` -- same as what we have to use for fetching PR patches these days.  > On Oct 2, 2015, at 7:50 AM, Mikeal Rogers notifications@github.com wrote: >  > nvm uses curl underneath, doesn't curl follow forwards? >  > — > Reply to this email directly or view it on GitHub. 
Since `travis-ci`, as well as anyone using `node` `4`, is using an `nvm` that uses https, I think it's probably OK to break those old `nvm` installations - but it'd be nice to have advance notice, and brownout periods. In other words, turn it off for a day, back on for a week, off for half a week, back on for half a week, etc - to give people time to be broken only for a short window while they upgrade. 
curl is a bit funny with redirects, I _think_ in most cases where we will be providing redirects that it should follow them even without `-L`, my guess is that the impact will be minimal but this is like a `semver-major`, you never really know what you're going to break in the ecosystem because ... [workflow](https://xkcd.com/1172/). 
Do we have a timeline? I'd like to get a blog post up if we know there is a date we're switching over to only SSL. 
@mikeal propose one and we'll make it so! we can take a few months if need be 
November 1st! 
@mikeal You want to write the blog post, or should I create an issue in Evangelism? 
Postpone this to December 1st, and get a blog post out asap @mikeal @bnb @rvagg? 
i'm a little cautious about this because we haven't even successfully renamed the repo yet. once i see that we can coordinate that with build successfully I'd be much more confident in something like this :) 
Still on my TODO list, it's not hard, just another thing to be done. +1 on postponing the timeline. 
@rvagg @nodejs/build Is this issue still relevant or has it been resolved? 
Yes, and no. There is a permanent HTTP => HTTPS redirect in place. @jbergstroem is working on simplyfying the SSL redirects in nodejs/build#389 but in order to be _strict_ HTTPS we should add the [`Strict-Transport-Security` header](https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security). 
WE HAVE A PLAN!  It may be surprising but we're actually moving closer to being able to properly do this, will update when we can move forward but I expect we'll be able to provide a date for fully removing `http` from nodejs.org. 
travis-ci images still have outdated SSL things on them, so ideally we can test this with various travis-ci images (cough cough nvm cough cough) before deploying it to prod? 
the migration plan would involve at least one test weekend when we turn it on temporarily and see what breaks. 
@ljharb we will soon have non-ssl alternatives available for libraries or clients that doesn't support STS (or SSL). We will obviously advise against it, but we understand there's a need. If you want to test it out, ping me on irc or email. 
It's almost a year later since I asked the last time. ;) @nodejs/build Is this issue still relevant or can we close it?
We still need the entire list of versions for the download page. 
It's still there as before (`project.versions`), but the current / latest version is alot easier to get a hold of. 
Ah, sorry. I overlooked the line in the diff. 
Np! I'm playing with the download matrix, this cleans up **alot** of verbosity in that markup too. 
Would have been nice with `project.currentVersion` from PR #43 in this one... :smile:  
I have merged #43, can you please update this PR? Thanks. 
Just rebased on top of the changes commited to master earlier today 
Nope, the TypeKit snippet hasn't been added yet. Unless you have Source Sans installed on your machine, you will see Arial as fallback font. 
I see, adding the Google Font for this instead, it loads a lot more liberally than typekit. 
fixed. 
Changing the `build` script to `$ node` instead of `$ iojs` would do the trick as iojs symlink's itself as node anyways? 
@jasnell It's because you're running a "prerelease" version with npm@2, which throws errors on the `-pre` bit for nonsense reasons. npm@3 turns these into warnings but It's mostly a failure of node-semver that I have been meaning to look into fixing so that out prereleases work. 
Yep, I'm aware, just wanted to get it documented because I don't have time at the moment to address it :) On Aug 25, 2015 12:39 PM, "Jeremiah Senkpiel" notifications@github.com wrote:  > @jasnell https://github.com/jasnell It's because you're running a > "prerelease" version with npm@2, which throws errors on the -pre bit for > nonsense reasons. npm@3 turns these into warnings but It's mostly a > failure of node-semver that I have been meaning to look into fixing so that > out prereleases work. >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/issues/46#issuecomment-134712541 > . 
@jasnell Can we close this now v4.0.0 is released? 
Yep! 
From [v0.12.7 release post](https://github.com/nodejs/new.nodejs.org/blob/master/locale/en/blog/release/v0.12.7.md), is the summary written by hand while creating the post or could it be fetched somewhere?  Could @nodejs/build provide shasums? 
Nevermind the shasums. I found what I needed here https://nodejs.org/dist/v0.12.7/SHASUMS.txt.asc 
First version of a script addressing this just got merged into node-4.0-release branch with fd14e76. It's long from finished, thoughts about improving `./scripts/release-post.js` are more than welcome by creating new issues / PRs. 
> I prefer adding reusable classes to elements rather than handcrafting specific styling all the time. Would appreciate your thoughts about adding more reusable .class'es going forward rather than very specific styling as most of the site has ATM.  It is better to have module specific classes (e.g. ".download-table") defining a certain behavior than coupling classes to visual appearance ("no-padding", "color-green"), etc. 
I merged the changes, I think we should address the "CSS styleguide" at a later point, as we don't have much time left until the new site needs to go online for the v4.0.0 release. 
> I think we should address the "CSS styleguide" at a later point  Totally agree! Much easier to contribute with good changes if there's some kind of guidelines. 
There's no need to support multiple projects. From version 4 on, there will be only Node.js. Older versions of node/io.js will only be shown in the overall release list, which will by then become a separate page (with a looooong list). 
Ahh, so when you said  > Both. There still needs to be some work done to integrate the builds automatically into the site.  in issue #20 you only meant the previous release list? 
Yes. The list should not only the converged release (starting with 4.0.0), but all io.js and node.js releases in a single spot. Sorry, if this caused a misunderstanding. 
Np, created a WIP to find out what needed to be done - great success in other words :tada:  Sounds alot simpler than what I had in mind. Closing this PR as it sounds trivial enough to fix quickly after build has a unified versions in `versions.json` ready. 
This came up in the TSC meeting a bit as well, we want to have a merged/complete Changelog as well and I want to try and create automated release posts from the Changelog+versions.js 
Just go ahead and send a PR. We'll review the change and give you feedback. ;) 
@fhemberger Please have a look : https://github.com/nodejs/new.nodejs.org/pull/54 
Will do, closing this. 
Expect a solution soon, gonna work on this. 
Fixed with 294af4f 
Maybe rename just to "Technical" and then we can use the page to layout all the technical governance stuff, starting with the TSC? 
Okay, did a quick fix for this (changed title to "Technical Governance" and slightly increased the width). This will probably become an issue again during i18n. 
Changed a few things: - `window.pageYOffset` instead of `e.pageY` for cross browser compatibility - Use `<button>` instead of `<a href="#">` (when there's no href, always use a button for semantics). - Update button styling - Indentation  ``` diff diff --git a/layouts/css/page-modules/_scrollToTop.styl b/layouts/css/page-modules/_scrollToTop.styl index 495f1c1..58186d1 100644 --- a/layouts/css/page-modules/_scrollToTop.styl +++ b/layouts/css/page-modules/_scrollToTop.styl @@ -7,6 +7,12 @@ html      position fixed      bottom 10%      right 5% +    cursor pointer      color $node-gray -    background-color #D9EBB3 +    background-color #eee +    border 1px solid #ddd +    border-radius 2px +    font inherit +    font-size 1rem +  diff --git a/layouts/partials/footer.hbs b/layouts/partials/footer.hbs index b7a6ba6..f5a41d9 100644 --- a/layouts/partials/footer.hbs +++ b/layouts/partials/footer.hbs @@ -14,14 +14,13 @@      </div>  </footer>  -<a href="#" id="scrollToTop">Scroll To Top</a> +<button id="scrollToTop">Scroll To Top</button>  <script type="text/javascript"> -  $scrollToTop = document.getElementById('scrollToTop'); -  window.onscroll = function(e) { -    $scrollToTop.style.display = (e.pageY > window.innerHeight) ? 'block' : 'none'; -  }; -  $scrollToTop.onclick = function(e) { -    window.scrollTo(0, 0); -    return false; -  }; +    $scrollToTop = document.getElementById('scrollToTop'); +    window.onscroll = function () { +        $scrollToTop.style.display = (window.pageYOffset > window.innerHeight) ? 'block' : 'none'; +    }; +    $scrollToTop.onclick = function () { +        window.scrollTo(0, 0); +    };  </script> ```  ![](https://cloud.githubusercontent.com/assets/153481/9540944/f6acef70-4d63-11e5-8a3e-4434841da44f.png)  However, I'm not completely happy with this solution at the moment, because on smaller/mobile screens the button will be placed over the content.  ![](https://cloud.githubusercontent.com/assets/153481/9540950/03fd6420-4d64-11e5-9e61-aca211125775.png) ![](https://cloud.githubusercontent.com/assets/153481/9540956/086f6df0-4d64-11e5-9eb9-f94067b05884.png)  So maybe someone has an idea how to improve this. (Just show an up arrow, e.g. ▲?) /cc @nodejs/website  
Oh, and `position: fixed` might still be a problem on mobile. Haven't tested that yet. 
I chose anchor tag for cases when javascript is disabled (href="#" would still lead to top). Now that I think of it, not having javascript will not show the button at all. My bad.  I think we can use a media query to change the text to the HTML entity for smaller resolutions. I am ready to take it up.  
Have you considered throttling the `onscroll` handler? As it fires _alot_ when scrolling. Or another trick to prevent touching the DOM when not necessary. 
@phillipj  should I use a [debounce function](http://davidwalsh.name/javascript-debounce-function) ?  Or is there an alternative to it ? Or we should show the button what-so-ever ?  
By the way: How about having a regular "Back to top" button at the end of the page (above the footer) and enhance it with JS to the current behavior? Would be the best solution IMHO. 
How does it look now ?  - window.innerWidth > 400px   ![screen shot 2015-08-28 at 6 47 55 pm](https://cloud.githubusercontent.com/assets/6177621/9547078/655fc41e-4db5-11e5-9a1f-485afba163e3.png) - window.innerWidth <= 400px   ![screen shot 2015-08-28 at 6 48 13 pm](https://cloud.githubusercontent.com/assets/6177621/9547079/6564d2ec-4db5-11e5-9b7e-73d83f8b450d.png)  Note: I haven't added an event listener for resize of browser window for it seems to be overkill for such a small thing. On a default view, mobile user will get the arrow and desktop user will get "Scroll To Top". Mobile user will be okay with the arrow even for landscape view and desktop user will be okay with Scroll To Top even on reducing width, at least that is what I believe.  
Way better. :+1:  For accessibility (and also for not maintaining strings in the JS part), I'd use something like this:  ``` html <a href="#" id="scrollToTop"><span>&uarr;</span> Scroll To Top</a> ```  (restore the default behavior to jump to the top w/o JavaScript) and   ``` stylus #scrollToTop     ...     overflow hidden      span         display none      @media (max-width: 400px)         text-indent -100rem          span             display inline ```  Untested, but you get the idea. 
I think the arrow with text for desktop and only arrow for mobile users (600px or less) would be neat. CSS is handling all that now. This is how I achieved it :  ``` html <a href="#" id="scrollToTop">&uarr; <span>Scroll To Top</span></a> ```  ``` css @media (max-width: 600px)         span             display none ```  Also I'm calling the onclick handler on page load so as to not display it if not required.   ``` js (window.onscroll = function() {     $scrollToTop.style.display = (window.pageYOffset > window.innerHeight) ? 'block' : 'none'; })(); ```  Screenies :   Desktop ![screen shot 2015-08-28 at 7 40 00 pm](https://cloud.githubusercontent.com/assets/6177621/9548208/cb526400-4dbc-11e5-877d-a59c17c81b52.png) Mobile ![screen shot 2015-08-28 at 7 40 10 pm](https://cloud.githubusercontent.com/assets/6177621/9548209/cb5aea3a-4dbc-11e5-8db9-19071cb50d73.png)  FYI : [scroll-behavior](https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior) is only available on FF36 & Chrome(with flag enabled) 
Why add a scroll to top button? Most people's mice wheels, trackpads, touchscreens, etc work quite well, no? 
@Fishrock123 I felt the need while browsing through /contribute/development & /blog. I feel they're long enough to make you realize the time spent scrolling through it. 
> Now that I think of it, not having javascript will not show the button at all.  You will have to add `display:none` inline or in a .styl for that to be true, as JS is the only thing toggling the display style atm. 
@nodejs/website Do we want to merge this feature for the go-live? 
+1 to this PR. There is a bug currently with it briefly showing on page load, but it's definitely not a blocking issue. 
Let's merge it, it'll be my first code contribution to the project :grinning:  
@therebelrobot Fixed the flashing of the button on load @bogas04 Thank you, merged it. 
I use 400 on the front page as well. The bolds and italics could be used by any markdown page in whatever weight we’ve set that to by default as well. I’m all for trimming it down I’m not just 100% sure all the weights and combos we’re using right now.  > On Aug 28, 2015, at 1:11AM, Frederic Hemberger notifications@github.com wrote: >  > I just noticed we include all font styles of Source Sans Pro, which has a heavy impact on page performance: >  > <link href="http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,200,200italic,300,300italic,400italic,600,600italic,700,700italic,900,900italic" rel="stylesheet" type="text/css"> >  > At the moment we use the widths 300 (default text), 500 (headlines), and 700 (for bold). Maybe we could get rid of the latter as well. >  > — > Reply to this email directly or view it on GitHub https://github.com/nodejs/new.nodejs.org/issues/55. 
Just observed this when I viewed source. Was about to report an issue on this and stumbled on this one :)  May I investigate this issue and possibly fix it? I could check what weights are being used in the page right now and report back. 
We already removed the 200, 600 and 900 widths, and font caching is addressed in #69. I didn't have enough time to test it before launch. 
Ah, ok. 
This will be fixed by #98. 
Great, thank you! 
you have less than 2 days btw 
Aaaahhhhh! _running around panicking_  Okay, well. I guess this means we'll do this after the initial release. 
@rvagg this is the biggest blocker we have right now https://github.com/nodejs/build/issues/163#issuecomment-134747962 we need all the old node.js builds to show up in versions. 
Do we want/need to adjust the layout of the main navigation? If so, anything I can help with?  I am going through and checking each page to see if any alignments are off and things like that now. 
@evanlucas Adjusting the margin/padding should be fine, ne need for a hamburger menu, et. al. 
I did some performance tests on the current https://new.nodejs.org website.  ## Webpagetest  Using Cable connection, from Dulles. Click [here](http://www.webpagetest.org/result/150830_X6_PWT/) for the results. Fully loaded under 1 second, Speed Index < 1000. Repeated view somewhere in the 400s. Excellent stats  Using Fast 3G: Click [here](http://www.webpagetest.org/result/150830_TN_PVW/) for the results. Fully loaded under 3 seconds, speed Index ~2500. This is okay. The repeated view is again excellent. Your cache works wonders.  Using Edge: Click [here](http://www.webpagetest.org/result/150830_FW_NFM/) for the results. Fully loaded in 16 seconds, Start render at 14 seconds. This is a bummer.   Looking at the waterfall diagram (especially of the Edge render), we can easily define the culprits: Blocking CSS from three files. Solutions: - We could go full critical and inline the critical CSS and asynchronously load the remaining styles. I made some tests if this would be feasible for the new page, but due to the unique design of the contents, we would need to run the critical CSS task for each and every page, which would lead to huge build times and possible memory leaks. - Webfonts are the biggest issue, as they take the longest We could drop the Google CDN for the fonts and asynchronously load webfonts on our own (Source Sans Pro is Open Source), much like SmashingMagazine does (using [localFont](http://jaicab.com/localFont/)), and store them in localStorage for the other pages. This should reduce the Start Render time for about 3-5 seconds on EDGE, giving the users already something to read (if you don't mind "Flash of unstyled text"). Also: Ansychronously load the prism styles or merge them with the existing one. I could come up with a PR for this by tomorrow. This would also help with images like those:  ![](http://www.webpagetest.org/thumbnail.php?test=150830_FW_NFM&fit=400&file=video_1/frame_0146.jpg)  ## PageSpeed Insights  Solid Results for [Desktop View](https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fnew.nodejs.org&tab=desktop). Again, they suggest for inlining Critical CSS and asynchronously load everything blocking. Mobile Scores are okay-ish.  ## Ruxit Web Check  I set up a WebCheck up until launch (They are not open, but you can see what it does [here](https://blog.ruxit.com/247-availability-monitoring/)). This one records availability from Chicago, Frankfurt, London, Seattle, San Jose, Boston, Paris, Atlanta, New York and Dallas, and gives an average duration time for each of those locations (measures the window.onload event with each visit). The scores are excellent there and mirror the Cable test from WebpageTest  ![](http://i.imgur.com/aKt6n17.png)  ## Suggestions 1. For Launch, unblock the Webfont and prism syntax highlighting. (PR follows if wanted) 2. For later, come up with a way to inline the Critical CSS, or refactor the CSS to make them inlineable as a whole (we did that with our [https://blog.ruxit.com](Blog) as the minified CSS just had about 3K) 3. Cache the hell out of CSS, JS and SVG :D 
@fhemberger I can write automated tests for various cases like screen sizes, fonts etc. and performance in case you need it in future.  
Google pagespeed test: https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fnew.nodejs.org%2F 
@ddprrt Awesome, thanks Stefan! :D 1. I think we can get rid of prism entirely, AFAIK it's only used [here](https://new.nodejs.org/en/about/) and maybe one or two deeply burrowed older blog posts. 2. With this gone, there isn't much "critical" CSS left. Removing (for testing) the base64'ed linux foundation footer SVG and another image (we're dumping anyway), we end up with 6,6k CSS total.  3. Caching will be handled by CloudFlare  So yes, a PR for unblocking Webfonts would be great.  @mzgnr That sounds interesting. I'm not sure if it makes sense to invest the time into writing those test _right now_, as so many things are still constantly changing at the moment. But once everything has settled, they could provide insights for performance budgets.  
Are we good here or is there still only 1/5 done? 
I think there are still some CSS things left for fine-tuning. It would be nice if someone finds the time to check the site on mobile again (except for webfont issues). 
Move/link API docs from iojs.org to (new.)nodejs.org 
https://new.nodejs.org/download/release/index.json https://new.nodejs.org/download/release/index.tab or https://new.nodejs.org/dist/index.json https://new.nodejs.org/dist/index.tab  Note that this server is now populated with all of the old node dist directory  I wasn't planning on merging the two but I'm getting the impression that that's being suggested. 
@rvagg Can you sort the list by date? If merging both lists is a problem at the moment, we could do this at build time as well. 
"date" is kind of hard to determine, which file do you test and what is that date indicating anyway?  Instead, I've pulled in node-semver and used it to compare for a sort, hope that helps 
I've turned on CloudFlare for new.nodejs.org and am going to bed, let me know if anything odd turns up but we're getting very close to this being ready. I did want to switch iojs.org over to this new server but it's too late and I don't want to be switching it just before I head off to sleep so I'll do it tomorrow. 
@rvagg Wrote a little script `load-versions.js` which merges the two files for our release list. 
Okay, I'm calling it a day as well. ;) 
You can do https://iojs.org/api/ -> https://new.nodejs.org/api/ now, it's active  Also, I don't know if it helps at all but I'm putting `latest-v0.10.x`, `latest-v0.12.x`, `latest-v4.x` etc. in all of the download directories (/dist/ a.k.a. /downoads/release/, /download/nightly/, /download/rc/, etc.), these'll get updated on each release. But you have the index.json data you can do that from anyway. 
@rvagg I still end up on the Node.js v0.12.7 docs instead of the iojs docs. 
well, that's appropriate for nodejs.org where 0.12 is the "latest", as soon as v4 drops it'll switch to 4.0.0 docs 
Okay, felt a bit odd at first when you're redirected to the old site. ;)  I'll go through the site and change all links later. 
Link is updated. 
I spent the entirety of my day being intimate with the new server and am not as close as I hoped. Most of the pieces are in place now, there's a little bit of testing to do but remaining items are: - [x] Re-enable proper `http` support for the resources that need it, as per #42, this is not as easy as it sounds - [x] Put in the redirects that @fhemberger listed for me somewhere in this repo - [ ] Do a final catalogue of the non-4xx hits in the existing logs on the old nodejs.org to see what resources are actually being used. There's a lot of cruft in there and I'm hesitant to just cut the cord on it all without having an idea of what's being used. If anyone wants to help look over the list to see if there are any goodies, here it is: https://gist.github.com/rvagg/b2e76ef6c8217530d313 - [x] Upgrade the server to something with a little more grunt - [ ] Get a proper log rotation archive scheme in place so the server doesn't fill but but we don't lose valuable analytics data (this can wait till after launch, but I shouldn't leave it too long!) 
@rvagg Found them! https://github.com/nodejs/new.nodejs.org/issues/20#issuecomment-130218243 
To be honest, looking at the staging (I assume that's what it is) site, the index looks kind of meager, as in, the page does not really scroll at all. Shouldn't we add a little more information than that? (Apologies if that's already being worked on) 
"latest" on the front page is v3.2.0, are we OK with that? I'd say in the interests of transition we go with 0.12.7 until v4 is out later this week. Or is this a remnant of the fact that you've only had io.js' index.json to go with till now? 
@fhemberger & @mikeal I'm going to look to you two for sign-off on the switch to the new site, I'll get my pieces done today but need you to let me know when you're comfortable with the move. 
Can we add: - [x] Google Analytics  To the checklist please? I see it in the prefetch list but not inline at all. Since we are relying on CF to serve most of the website content we're not going to be able to do anything useful with the server logs except for /dist & /download files. Make sure that any Analytics setup is shared with enough of the website team to make it useful. 
OK, redirects are mostly done, but very painful. I've put in @fhemberger's list mostly as is for nodejs.org:  ```     rewrite ^/about/advisory-board/(.*)$                          https://$server_name/en/about/organization/ permanent;     rewrite ^/advisory-board/(.*)$                                https://$server_name/en/about/organization/ permanent;     rewrite ^/about/organization/tsc-meetings/$                   https://$server_name/en/foundation/tsc/minutes/ permanent;     rewrite ^/about/organization/tsc-meetings/(.*?)/minutes.html$ https://$server_name/en/foundation/tsc/minutes/$1/ permanent;     rewrite ^/about/security/$                                    https://$server_name/en/security/ permanent;     rewrite ^/contribute/$                                        https://$server_name/en/get-involved/ permanent;     rewrite ^/contribute/accepting_contributions.html$            https://github.com/nodejs/dev-policy permanent;     rewrite ^/contribute/becoming_collaborator.html$              https://$server_name/en/get-involved/ permanent;     rewrite ^/contribute/code_contributions/$                     https://$server_name/en/get-involved/ permanent;     rewrite ^/contribute/code_contributions/workflow.html$        https://$server_name/en/get-involved/ permanent;     rewrite ^/documentation/(.*)$                                 https://$server_name/en/docs/ permanent;     rewrite ^/foundation/blog.html$                               https://$server_name/en/blog/ permanent;     rewrite ^/foundation/members.html$                            https://$server_name/en/foundation/members/ permanent;      rewrite ^/images/foundation-visual-guidelines.pdf$            https://$server_name/static/documents/foundation-visual-guidelines.pdf permanent;     rewrite ^/images/logos/js-black(.*)$                          https://$server_name/static/images/logos/js-black$1 permanent;     rewrite ^/images/logos/nodejs-(.*)$                           https://$server_name/static/images/logos/nodejs-$1 permanent;     rewrite ^/images/node-foundation-by-laws.pdf$                 https://$server_name/static/documents/node-foundation-by-laws.pdf permanent;     rewrite ^/images/.*trademark-policy.pdf$                      https://$server_name/static/documents/trademark-policy.pdf permanent;     rewrite ^/video/(.*)$                                         https://$server_name/static/video/$1 permanent; ```  and put in the blog ones to blog.nodejs.org but because you're now listing by category a bulk redirect no longer works! So I had to do some hackery with a program to work it all out, see https://gist.github.com/rvagg/c9ef9dfc9dbe23ac0f7e for my program and data files to get this mapping. I've ended up with:  ```     rewrite ^/\d+/\d+/\d+/(?:node-v(?:ersion-)?|version-)(\d+)[-\.](\d+)[-\.](\d+).*$ https://nodejs.org/en/blog/release/v$1.$2.$3/ permanent;      rewrite ^/2015/05/16/node-leaders-are-building-an-open-foundation/$ https://nodejs.org/en/blog/community/node-leaders-building-open-neutral-foundation/ permanent;     rewrite ^/2015/05/16/the-nodejs-foundation-benefits-all/$ https://nodejs.org/en/blog/community/foundation-benefits-all/ permanent;     rewrite ^/2014/01/17/nodejs-road-ahead/$ https://nodejs.org/en/blog/nodejs-road-ahead/ permanent;     rewrite ^/2013/12/03/bnoordhuis-departure/$ https://nodejs.org/en/blog/uncategorized/bnoordhuis-departure/ permanent;     rewrite ^/2013/11/26/npm-post-mortem/$ https://nodejs.org/en/blog/npm/2013-outage-postmortem/ permanent;     rewrite ^/2013/10/22/cve-2013-4450-http-server-pipeline-flood-dos/$ https://nodejs.org/en/blog/vulnerability/http-server-pipeline-flood-dos/ permanent;     rewrite ^/2015/05/08/transitions/$ https://nodejs.org/en/blog/community/transitions/ permanent;     rewrite ^/2015/05/08/next-chapter/$ https://nodejs.org/en/blog/community/next-chapter/ permanent;     rewrite ^/2013/02/08/peer-dependencies/$ https://nodejs.org/en/blog/npm/peer-dependencies/ permanent;     rewrite ^/2012/12/21/streams2/$ https://nodejs.org/en/blog/feature/streams2/ permanent;     rewrite ^/2012/09/30/bert-belder-libuv-lxjs-2012/$ https://nodejs.org/en/blog/video/bert-belder-libuv-lxjs-2012/ permanent;     rewrite ^/2012/05/08/bryan-cantrill-instrumenting-the-real-time-web/$ https://nodejs.org/en/blog/video/bryan-cantrill-instrumenting-the-real-time-web/ permanent;     rewrite ^/2012/05/07/http-server-security-vulnerability-please-upgrade-to-0-6-17/$ https://nodejs.org/en/blog/vulnerability/http-server-security-vulnerability-please-upgrade-to-0-6-17/ permanent;     rewrite ^/2012/05/02/multi-server-continuous-deployment-with-fleet/$ https://nodejs.org/en/blog/module/multi-server-continuous-deployment-with-fleet/ permanent;     rewrite ^/2012/04/25/profiling-node-js/$ https://nodejs.org/en/blog/uncategorized/profiling-node-js/ permanent;     rewrite ^/2012/03/28/service-logging-in-json-with-bunyan/$ https://nodejs.org/en/blog/module/service-logging-in-json-with-bunyan/ permanent;     rewrite ^/2012/02/27/managing-node-js-dependencies-with-shrinkwrap/$ https://nodejs.org/en/blog/npm/managing-node-js-dependencies-with-shrinkwrap/ permanent;     rewrite ^/2011/12/15/growing-up/$ https://nodejs.org/en/blog/uncategorized/growing-up/ permanent;     rewrite ^/2011/10/26/version-0-6/$ https://nodejs.org/en/blog/uncategorized/version-0-6/ permanent;     rewrite ^/2011/10/05/an-easy-way-to-build-scalable-network-programs/$ https://nodejs.org/en/blog/uncategorized/an-easy-way-to-build-scalable-network-programs/ permanent;     rewrite ^/2011/09/23/libuv-status-report/$ https://nodejs.org/en/blog/uncategorized/libuv-status-report/ permanent;     rewrite ^/2011/09/08/ldapjs-a-reprise-of-ldap/$ https://nodejs.org/en/blog/uncategorized/ldapjs-a-reprise-of-ldap/ permanent;     rewrite ^/2011/08/29/some-new-node-projects/$ https://nodejs.org/en/blog/uncategorized/some-new-node-projects/ permanent;     rewrite ^/2011/08/12/the-videos-from-node-meetup/$ https://nodejs.org/en/blog/uncategorized/the-videos-from-node-meetup/ permanent;     rewrite ^/2011/08/03/node-meetup-this-thursday/$ https://nodejs.org/en/blog/uncategorized/node-meetup-this-thursday/ permanent;     rewrite ^/2011/07/11/evolving-the-node-js-brand/$ https://nodejs.org/en/blog/uncategorized/evolving-the-node-js-brand/ permanent;     rewrite ^/2011/06/24/porting-node-to-windows-with-microsoft.+s-help/$ https://nodejs.org/en/blog/uncategorized/porting-node-to-windows-with-microsofts-help/ permanent;     rewrite ^/2011/05/01/npm-1-0-released/$ https://nodejs.org/en/blog/npm/npm-1-0-released/ permanent;     rewrite ^/2011/04/29/trademark/$ https://nodejs.org/en/blog/uncategorized/trademark/ permanent;     rewrite ^/2011/04/28/node-office-hours-cut-short/$ https://nodejs.org/en/blog/uncategorized/node-office-hours-cut-short/ permanent;     rewrite ^/2011/04/07/npm-1-0-link/$ https://nodejs.org/en/blog/npm/npm-1-0-link/ permanent;     rewrite ^/2011/04/05/development-environment/$ https://nodejs.org/en/blog/uncategorized/development-environment/ permanent;     rewrite ^/2014/12/05/listening-to-the-community/$ https://nodejs.org/en/blog/advisory-board/listening-to-the-community/ permanent;     rewrite ^/2014/12/03/advisory-board-update/$ https://nodejs.org/en/blog/advisory-board/advisory-board-update/ permanent;     rewrite ^/2011/03/25/jobs-nodejs-org/$ https://nodejs.org/en/blog/uncategorized/jobs-nodejs-org/ permanent;     rewrite ^/2011/03/24/npm-1-0-global-vs-local-installation/$ https://nodejs.org/en/blog/npm/npm-1-0-global-vs-local-installation/ permanent;     rewrite ^/2011/03/24/office-hours/$ https://nodejs.org/en/blog/uncategorized/office-hours/ permanent;     rewrite ^/2011/03/18/npm-1-0-the-new-ls/$ https://nodejs.org/en/blog/npm/npm-1-0-the-new-ls/ permanent;     rewrite ^/2011/03/18/welcome-to-the-node-blog/$ https://nodejs.org/en/blog/video/welcome-to-the-node-blog/ permanent;     rewrite ^/2014/07/31/v8-memory-corruption-stack-overflow/$ https://nodejs.org/en/blog/vulnerability/v8-memory-corruption-stack-overflow/ permanent;     rewrite ^/2014/07/29/building-nodejs-together/$ https://nodejs.org/en/blog/community/building-nodejs-together/ permanent;     rewrite ^/2014/06/16/openssl-and-breaking-utf-8-change/$ https://nodejs.org/en/blog/vulnerability/openssl-and-utf8/ permanent;     rewrite ^/2014/06/11/notes-from-the-road/$ https://nodejs.org/en/blog/uncategorized/notes-from-the-road/ permanent;      rewrite ^/(.*)$ https://nodejs.org/en/blog/ permanent; ```  with the following mapping not working yet:  ``` (200) /2014/01/15/the-next-phase-of-node-js/ -> https://nodejs.org/en/blog/ (404) /2013/02/07/node-v0-9-9-unstable/ -> https://nodejs.org/en/blog/release/v0.9.9/ (200) /2013/07/16/download-statistics/ -> https://nodejs.org/en/blog/ ```  They'll have to be manually done because you've gone and changed their names. 
(edited previous comment to remove unnecessary nginx fluff) 
Edited post and program after adding manual mappings and now I'm down to three not-working redirects and I'm moving on. If you want me to add any new redirects for the blog then let me know. 
@schisma Let's rather have less, precise content than just filling the page just to make it scroll. ;) 
> "latest" on the front page is v3.2.0, are we OK with that?   We're pulling the first element (= highest semver release) from the index.json. Fortunately @phillipj put that into a separate variable, so this can be changed easily: https://github.com/nodejs/new.nodejs.org/blob/master/build.js#L55 
What also comes to my mind for the list: Are we okay with the content? We mostly just moved everything from nodejs.org over, but does it reflect the current situation? E.g. getting involved, code contributions, etc.  At least before we start translating everything, we should try to weed out and shorten some of the texts. Otherwise they will be had to maintain and become outdated quickly in the future. 
re content, I'm not fussed if we start with existing and update over time, the important part is to migrate to the new server so we can iterate quicker.  re redirects, it turns out we're still pretty far off but I'd really like to get this into a state where we can switch over today if at all possible.  What I've done is taken a scrape through the 1 month of logs on the old server and found all of the URLs that get hit that don't 404, then sorted by number of hits. Then I've run those URLs against the current server to see what happens and weeded out all of the 200's and remove everything with "nightlies" in it (a _lot_ of them). I've fixed up a bunch of them (the whole /docs/ directory was missing from my config) but I'm left with quite a lot.  See full gist for gory details: https://gist.github.com/rvagg/f4a24312053af1195824#file-statuses_non200-txt  Or jump to the pruned list of non-200's that we should look at and resolve where possible, particularly at the higher end of the list: https://gist.githubusercontent.com/rvagg/f4a24312053af1195824/raw/54b5cc6d37c1b92ce6791bf26dbe7dc0494a386a/statuses_non200.txt 
@rvagg Working on it!  Update: After removing all the drive-by scans for vulnerabilities, the list doesn't look that bad. ;) 
Lots of docs, prior to the late v0.10.x docs restyle, are missing https://nodejs.org/images/logo-light.png when viewed on the new site, e.g. https://nodejs.org/docs/v0.10.30/api/, can we put that one into this repo or should I make a special alias just for this and store it somewhere else? 
@rvagg Just added the logo as well.  Now, moar redirects (might contain some duplicates):  ``` # Website  rewrite ^/about/$                           https://nodejs.org/en/about/ permanent; rewrite ^/about/advisory-board/$            https://nodejs.org/en/about/organization/ permanent; rewrite ^/about/advisory-board/members/$    https://nodejs.org/en/about/organization/ permanent; rewrite ^/about/organization/$              https://nodejs.org/en/about/organization/ permanent; rewrite ^/about/organization/tsc-meetings/(\d{4}-\d{2}-\d{2})/$                https://nodejs.org/en/foundation/tsc/minutes/$1/ permanent; rewrite ^/about/organization/tsc-meetings/(\d{4}-\d{2}-\d{2})/minutes.html$    https://nodejs.org/en/foundation/tsc/minutes/$1/ permanent; rewrite ^/about/releases/$                  https://nodejs.org/en/about/releases/ permanent; rewrite ^/about/resources/$                 https://nodejs.org/en/about/resources/ permanent; rewrite ^/about/security/$                  https://nodejs.org/en/security/ permanent; rewrite ^/about/trademark/$                 https://nodejs.org/en/about/trademark/ permanent; rewrite ^/blog/$                            https://nodejs.org/en/blog/ permanent; rewrite ^/community/$                       https://nodejs.org/en/get-involved/ permanent; rewrite ^/foundation/$                      https://nodejs.org/en/foundation/ permanent;  # All the release blog posts should be covered by this one rewrite ^/\d{4}/\d{2}/\d{2}/(?:node-v(?:ersion-)?|version-)(\d+)[-\.](\d+)[-\.](\d+).*$ https://nodejs.org/en/blog/release/v$1.$2.$3/ permanent;  # Other blog posts rewrite ^/\d{4}/\d{2}/\d{2}/(.*)$      https://nodejs.org/en/blog/$1 permanent; rewrite ^/\d{4}/(\d{2}/)?(\d{2}/)?$    https://nodejs.org/en/blog/ permanent;  # Not sure about this one (Staging releases v0.10.40 and v0.12.6) rewrite ^/dist/staging/(.*)$         https://nodejs.org/dist/$1 permanent;  # FIXME: Wrong redirects in existing list! rewrite ^/documentation/api/(.*)$    https://nodejs.org/api/$1 permanent;  # What should happen with links to node.js < v0.8.x? rewrite ^/docs/v\d+\.\d+\.\d+/$            https://nodejs.org/api/ permanent; rewrite ^/docs/v\d+\.\d+\.\d+/api/(.*)$    https://nodejs.org/api/$1 permanent;  # API docs redirects rewrite ^/docs/api$               https://nodejs.org/api/ permanent; rewrite ^/docs/api/(.*)$          https://nodejs.org/api/$1 permanent; rewrite ^/addons.html$            https://nodejs.org/api/addons.html permanent; rewrite ^/assert.html$            https://nodejs.org/api/assert.html permanent; rewrite ^/buffer.html$            https://nodejs.org/api/buffer.html permanent; rewrite ^/child_process.html$     https://nodejs.org/api/child_process.html permanent; rewrite ^/cluster.html$           https://nodejs.org/api/cluster.html permanent; rewrite ^/console.html$           https://nodejs.org/api/console.html permanent; rewrite ^/crypto.html$            https://nodejs.org/api/crypto.html permanent; rewrite ^/debugger.html$          https://nodejs.org/api/debugger.html permanent; rewrite ^/dgram.html$             https://nodejs.org/api/dgram.html permanent; rewrite ^/dns.html$               https://nodejs.org/api/dns.html permanent; rewrite ^/documentation.html$     https://nodejs.org/api/documentation.html permanent; rewrite ^/domain.html$            https://nodejs.org/api/domain.html permanent; rewrite ^/errors.html$            https://nodejs.org/api/errors.html permanent; rewrite ^/events.html$            https://nodejs.org/api/events.html permanent; rewrite ^/fs.html$                https://nodejs.org/api/fs.html permanent; rewrite ^/globals.html$           https://nodejs.org/api/globals.html permanent; rewrite ^/http.html$              https://nodejs.org/api/http.html permanent; rewrite ^/https.html$             https://nodejs.org/api/https.html permanent; rewrite ^/modules.html$           https://nodejs.org/api/modules.html permanent; rewrite ^/net.html$               https://nodejs.org/api/net.html permanent; rewrite ^/os.html$                https://nodejs.org/api/os.html permanent; rewrite ^/path.html$              https://nodejs.org/api/path.html permanent; rewrite ^/process.html$           https://nodejs.org/api/process.html permanent; rewrite ^/punycode.html$          https://nodejs.org/api/punycode.html permanent; rewrite ^/querystring.html$       https://nodejs.org/api/querystring.html permanent; rewrite ^/readline.html$          https://nodejs.org/api/readline.html permanent; rewrite ^/repl.html$              https://nodejs.org/api/repl.html permanent; rewrite ^/stream.html$            https://nodejs.org/api/stream.html permanent; rewrite ^/string_decoder.html$    https://nodejs.org/api/string_decoder.html permanent; rewrite ^/synopsis.html$          https://nodejs.org/api/synopsis.html permanent; rewrite ^/timers.html$            https://nodejs.org/api/timers.html permanent; rewrite ^/tls.html$               https://nodejs.org/api/tls.html permanent; rewrite ^/tty.html$               https://nodejs.org/api/tty.html permanent; rewrite ^/url.html$               https://nodejs.org/api/url.html permanent; rewrite ^/util.html$              https://nodejs.org/api/util.html permanent; rewrite ^/v8.html$                https://nodejs.org/api/v8.html permanent; rewrite ^/vm.html$                https://nodejs.org/api/vm.html permanent; rewrite ^/zlib.html$              https://nodejs.org/api/zlib.html permanent;  # Somebody seems to link npm packages (340 of them) to nodejs.org rewrite ^/nodejs/dist/?$        https://www.npmjs.com/ permanent; rewrite ^/nodejs/dist/(.*)$     https://www.npmjs.com/package/$1 permanent;  # RSS Feeds rewrite ^/(atom|feed|rss)(/|\.xml)$       https://nodejs.org/en/feed/blog.xml permanent; rewrite ^/feed/release/$                  https://nodejs.org/en/feed/releases.xml permanent; rewrite ^/feed/vulnerability/$            https://nodejs.org/en/feed/vulnerability.xml permanent;  # Asset rewrites rewrite ^/robots.txt$                 https://nodejs.org/static/robots.txt permanent; rewrite ^/.*favicon\.ico$             https://nodejs.org/static/favicon.ico permanent; rewrite ^/apple-touch-icon.*\.png$    https://nodejs.org/static/apple-touch-icon.png permanent; rewrite ^/trademark-policy.pdf$       https://nodejs.org/static/documents/trademark-policy.pdf permanent;  rewrite ^/logos/                      https://nodejs.org/static/images/logos/ permanent; rewrite ^/logos/monitor.png           https://nodejs.org/static/images/logos/monitor.png permanent; rewrite ^/logos/nodejs(.*)$           https://nodejs.org/static/images/logos/nodejs$1 permanent;  # Foundation member logos rewrite ^/images/logos/apigee_logo_md.png$     https://nodejs.org/static/images/foundation/apigee_logo_md.png permanent; rewrite ^/images/logos/codefreshLogo.png$      https://nodejs.org/static/images/foundation/codefreshLogo.png permanent; rewrite ^/images/logos/codefreshLogo2.png$     https://nodejs.org/static/images/foundation/codefreshLogo2.png permanent; rewrite ^/images/logos/digitaloceanLogo.png$   https://nodejs.org/static/images/foundation/digitaloceanLogo.png permanent; rewrite ^/images/logos/famousLogo.jpg$         https://nodejs.org/static/images/foundation/famousLogo.jpg permanent; rewrite ^/images/logos/famousLogo.png$         https://nodejs.org/static/images/foundation/famousLogo.png permanent; rewrite ^/images/logos/fidelityLogo.png$       https://nodejs.org/static/images/foundation/fidelityLogo.png permanent; rewrite ^/images/logos/godaddyLogo.png$        https://nodejs.org/static/images/foundation/godaddyLogo.png permanent; rewrite ^/images/logos/grouponLogo.png$        https://nodejs.org/static/images/foundation/grouponLogo.png permanent; rewrite ^/images/logos/ibmLogo.png$            https://nodejs.org/static/images/foundation/ibmLogo.png permanent; rewrite ^/images/logos/intelLogo.png$          https://nodejs.org/static/images/foundation/intelLogo.png permanent; rewrite ^/images/logos/joyentLogo.svg$         https://nodejs.org/static/images/foundation/joyentLogo.svg permanent; rewrite ^/images/logos/microsoftLogo.png$      https://nodejs.org/static/images/foundation/microsoftLogo.png permanent; rewrite ^/images/logos/microsoftLogo2.png$     https://nodejs.org/static/images/foundation/microsoftLogo2.png permanent; rewrite ^/images/logos/modulusLogo.png$        https://nodejs.org/static/images/foundation/modulusLogo.png permanent; rewrite ^/images/logos/nearformLogo.png$       https://nodejs.org/static/images/foundation/nearformLogo.png permanent; rewrite ^/images/logos/nearformLogo2.png$      https://nodejs.org/static/images/foundation/nearformLogo2.png permanent; rewrite ^/images/logos/nodesourceLogo.png$     https://nodejs.org/static/images/foundation/nodesourceLogo.png permanent; rewrite ^/images/logos/npmLogo.png$            https://nodejs.org/static/images/foundation/npmLogo.png permanent; rewrite ^/images/logos/paypalLogo.png$         https://nodejs.org/static/images/foundation/paypalLogo.png permanent; rewrite ^/images/logos/sapLogo.png$            https://nodejs.org/static/images/foundation/sapLogo.png permanent; rewrite ^/images/logos/saucelabsLogo.png$      https://nodejs.org/static/images/foundation/saucelabsLogo.png permanent; rewrite ^/images/logos/saucelabsLogo2.png$     https://nodejs.org/static/images/foundation/saucelabsLogo2.png permanent; rewrite ^/images/logos/strongloopLogo.png$     https://nodejs.org/static/images/foundation/strongloopLogo.png permanent; rewrite ^/images/logos/yldLogo.png$            https://nodejs.org/static/images/foundation/yldLogo.png permanent; rewrite ^/images/logos/yldLogo2.png$           https://nodejs.org/static/images/foundation/yldLogo2.png permanent;  rewrite ^/images/(.*)               https://nodejs.org/static/images/$1 permanent; ```  Those should cover most cases of the `statuses_non200.txt` list. 
1. Some people have subscribed to release and vulnerability feeds. We should continue those. 2. Is everybody okay that blog post URLs won't be prefixed with `/YYYY/MM/DD` any longer? At least we should show the date on the blog overview page. 
I'm +1 on releasing now in the current state, the only thing I'd like to see added is Google Analytics but since we don't seem to even have that on the old site then I guess we're not missing anything by making the switch as is.  @mikeal, @fhemberger, what's your call? 
I just did that, migrating https://nodejs.org/community/ and https://nodejs.org/documentation/localization/ 
@mikeal Can we close this again or do you want to edit the page even further? 
ya, looks fine for now, although eventually I'm going to cut like half of this. we should do a proper event at some point with _all_ the events. and i don't think we should even mention the mailing list :) 
Yes, I think a lot of the website content still needs to be restructured/rewritten. But for the launch, it's okay. 
thanks, I was just tinkering with the certs but I thought I was _improving_ the chain so ... 
got it, I added the wrong trust cert to the chain, fixed now 
Whee, awesome. Thanks. 
It can be changed. I ripped it from a Linux Foundation PDF because we didn't have a proper SVG version. ;) 
Fixed by https://github.com/nodejs/new.nodejs.org/pull/63 
@evanlucas Have you changed the SVG file as well? If so, please add the file to the PR as well (put it in /static/images) and use [svgo](https://github.com/svg/svgo) to optimize it before including it as base64. Thanks! 
I did not change it at all. It is the exact same as the non-mobile one 
Okay, then there's no need to include the file again, please just change the background-position in the media-query. 
ah ok 
Done 
Cool, thanks! 
Thanks! This script was only meant as a quick hack until both files are merged officially. ;) 
cc @fhemberger Thoughts? 
@Fishrock123 Sorry for the late reply, totally forgot about this one. Rebased against current master. Here are some screenshots for @nodejs/website:  ![](https://cloud.githubusercontent.com/assets/153481/9855402/4b8d000e-5b0e-11e5-9a6a-44936ba2a6e5.png)  ![](https://cloud.githubusercontent.com/assets/153481/9855403/4b91213e-5b0e-11e5-9b88-59dccaded4f0.png) 
I must say I'm not entirely happy yet with this solution. At the moment, the sub-navigation and its items don't align well, making it look a bit odd. Maybe this can be fixed with a bit of CSS tweaking. 
@nodejs/website If this is something you feel would fit well into the design, I'll put a considerable amount of effort in trying to make it work correctly. 
I actually don't think this is a great idea. From prior experience i know that the rate at which people click on the "main" page from that top nav drops to near zero if there is a nav below it. I'd like to see those landing pages get a lot of views and to be a good entry point for newcomers. We can't control how people enter some of these more advanced topics if we go this route. 
I feel similar to what @mikeal said. It also requires quite a bit of CSS fine tuning, which might become an issue as well as soon as we add localizations (different text lengths, RTL languages), so I think the work you have to put into it doesn't match the outcome. 
Has this come to a decision? 
> It also requires quite a bit of CSS fine tuning, which might become an issue as well as soon as we add localizations (different text lengths, RTL languages), so I think the work you have to put into it doesn't match the outcome.  I feel quite confident in the ability to make it work quite resizable. :)  That being said I'll agree with @mikeal. Closing. 
Guess this is kind of obsolete now with https://github.com/nodejs/nodejs.org/commit/aa4b373526fd3feb2c30bd6271e2872001e56c05. 
Thanks! Had to modify it a bit for the trailing slash. 
We can leave the script unchanged, just replace `source/versions.json` with `https://new.nodejs.org/dist/index.json`.  Or we just change https://github.com/nodejs/new.nodejs.org/blob/master/build.js#L55 to `v0.12.7` for now. 
> We can keep the script unchanged, just replace source/versions.json with https://new.nodejs.org/dist/index.json.  Ahh, so we're okey with just having node version at first? 
> Or we just change https://github.com/nodejs/new.nodejs.org/blob/master/build.js#L55 to v0.12.7 for now.  What I did initially but it felt **really** confusing displaying table of previous releases.. Having node versions at the top wasnt that disturbing. 
> Ahh, so we're okey with just having node version at first?  To be honest: I don't know. ;) /cc @mikeal  
yes please, v0.12 first please, v4 will be out later this week or at the start of next week so it won't matter for long anyway 
Alright, closing this as @fhemberger just pushed a fix to master instead 
Ah, haven't noticed that there was already one in place … 
to make the likes of https://nodejs.org/docs/v0.12.7/ happy, last outstanding item prior to switch-over I think, anyone around to lgtm this? 
added syntax highlighting JS and now v0.12.7 docs resolve all their resources cleanly and render as per old site 
merged, sorry @nodejs/website, I just want to get this done .. 
Thanks! 
Should be fixed with 89aaf391c022d9ccc5b705c9437a2610a8156fb9. 
Merged with 3cdb5229326e4e8094cffad3325251f8ac2ae54d and 045fae21bde6fb90900e1e0c04f17601c0fc9fcd. 
Generated by https://github.com/shinnn/isogram 
4 the lulz. ;) 
Thanks! 
It's not a typo. Words already ending on an `s` use `s'` instead of `s's`. ;) 
Thanks for pointing this out, changed what -> why. Now the sentence makes sense. ;) 
Yes, because v0.12.7 is the latest release of node, v3.3.0 is the latest version of iojs, but the repo is already the converged project. This will be fixed with v4.0.0, which will be out either at the end of this week or next week. 
So, shouldn't the Changelog link to https://github.com/nodejs/node-v0.x-archive/blob/master/ChangeLog until then? 
You're right about that, changed it in 2d5bf4b823fec1170d7a20757147625055def63e. I leave this issue open as a reminder to change it back again. 
Nice one, cheers. Think it really helps as Changelog is a vital link for a site built around a software product... 
Will be fixed in f0f2e4dc798dff0407ec6100107981c3383a624a, as soon as v4.0.0 goes live. 
yep, probably a combination of http -> https and www -> blank  if someone has time then could they propose a change @ https://github.com/nodejs/build/blob/master/setup/www/resources/config/nodejs.org I have to be offline for a few hours 
Suggesting this Not tested tho!! YMMV Edit  made it into a pull as I couldn't find my comment by default on that compare view :(  https://github.com/nodejs/build/pull/181   
fixed https://github.com/nodejs/build/pull/181 
done https://github.com/nodejs/build/commit/ba344d7c697bbd839bb9ba7ced02a419ce5032ba 
cc @nodejs/build  I don't think we'll have 32-bit mac ones? Not sure about smartos.  @phillipj  This page, however is greatly missing the ARM binaries, which are probably more important. :) 
Also I suggest listing the `.xz` versions of any *nix (not mac) binaries. But that may not be correct. I'll let others chime in. 
@Fishrock123 ARM indeed! Maybe I should make a separate PR ready to be merged when v4 arrives, which has ARM and `.xz`? As this was primarly meant to fix what's lacking in production at the moment for v0.12... 
See: https://iojs.org/dist/v3.3.0/  I'd target 4.0.0. It should drop next monday/tuesday. 
eeek, tbh I hadn't factored in `sunos` binaries for v4 but I should have a quick look at adding that back in, I just don't know much about producing those so no promises 
Ok @Fishrock123, I'll revise to target v4 instead.  @rvagg np, just say the word if I should remove SunOS again. 
Pushed some changes targeting node v4 and new paths: - ARM binaries - Changed paths to 32-bit windows binaries  - Mac binaries are not universal but 64-bit (as commented in #88 [comment](https://github.com/nodejs/new.nodejs.org/pull/88#issuecomment-137722521))  **Dont merge until v4 has been released!**  ### UPDATED  ![image](https://cloud.githubusercontent.com/assets/1231635/9710443/c4879e12-553a-11e5-89b4-9dc68397bf9b.png) 
Just to complicate matters we also have ARMv8 in the mix now, also reffered to as AARCH64 although "ARMv8" is probably good enough, maybe "ARMv8 64-bit".  Also, I'm not sure how Solaris folks feel about naming and whether "SunOS" makes sense these days. Honestly I have no idea but /cc @nodejs/build for help on naming here. Strictly speaking they are SmartOS. 
Would appreciate some suggestions about exposing `.xz` files aswell if we want those in there aswell. Little hesitant to almost doubling the amount of rows. What I've played with locally has ended up looking like a mess IMO, but I'm not the most creative UX person around :) 
You could always have a link down the bottom that says "All download options" that just links to the dist directory and they can figure it out, then you could avoid the more obscure platforms in the main table 
I think that's the best solution, only show the most popular platforms. 
@rvagg can't really back any claims up, but I reckon the smartos/sunos binaries can be run on Illumos, OmniOS et al as well (SmartOS is actually a derivative of Illumos). Just saying that `smartos` might not be the most correct choice hence staying with as-is is at least neutral. 
@jbergstroem right, but is "SunOS" right here? Should it be "Solaris"? 
https://nodejs.org/download/nightly/v4.0.0-nightly201509079cae65c510/ has all of the download asset types that we're going to be going live with when we do v4.0.0, including "sunos-x64", "sunos-x86" and "linux-arm64" which are missing from RC 1. See https://nodejs.org/download/nightly/ for an index.tab and index.json with the full data if you want that for testing. 
Included three ARM types and added link for all downloads at the bottom.  The SunOS / Solaris / SmartOS is the last remaining puzzle.  ### UPDATED  ![image](https://cloud.githubusercontent.com/assets/1231635/9711679/c92ad7da-5545-11e5-9286-bc5f196aedf1.png) 
Wikipedia:  > SunOS is a version of the Unix operating system developed by Sun Microsystems for their workstation and server computer systems. The SunOS name is usually only used to refer to versions 1.0 to 4.1.4 of SunOS. These versions were based on BSD, while SunOS version 5.0 and later are based on UNIX System V Release 4, and are marketed under the brand name Solaris.  Just go with SunOS I guess, wait till someone complains, which I'm sure they will if that's wrong 
@rvagg I wonder if it even works on solaris.. reckon less change is better for now. 
I merged this already into a separate [node-4.0-release](https://github.com/nodejs/new.nodejs.org/tree/node-4.0-release) branch, so all required changes can go live at the same time. 
Sounds like a good plan @fhemberger :+1: I'm closing this PR then. 
Haven't tested it yet, but this looks pretty awesome! 
I can see some problems here but not time just yet to comment, the node v4 release is going to have a structure more similar to io.js than 0.12, including the files that will be dropped, also we have a pretty mature changelog format from io.js that we'll be using 
Thanks for your initial thoughts @rvagg! It handles io.js changelog format already. I'll change the files list too resemble iojs' instead.  Any other thoughts?  Just generated for v3.3.0 after changing versions `index.json` and shasum URLs -> iojs.org:  ``` markdown --- date: 2015-09-04T11:43:52.691Z version: 3.3.0 category: release title: Node v3.3.0 (Stable) slug: node-v3-3-0-stable layout: blog-post.hbs ---  ## 2015-09-02, Version 3.3.0, @rvagg  ### Notable changes  * **build**: Add a `--link-module` option to `configure` that can be used to bundle additional JavaScript modules into a built binary (Bradley Meck) [#2497](https://github.com/nodejs/node/pull/2497) * **docs**: Merge outstanding doc updates from joyent/node (James M Snell) [#2378](https://github.com/nodejs/node/pull/2378) * **http_parser**: Significant performance improvement by having `http.Server` consume all initial data from its `net.Socket` and parsing directly without having to enter JavaScript. Any `'data'` listeners on the `net.Socket` will result in the data being "unconsumed" into JavaScript, thereby undoing any performance gains. (Fedor Indutny) [#2355](https://github.com/nodejs/node/pull/2355) * **libuv**: Upgrade to 1.7.3 (from 1.6.1), see [ChangeLog](https://github.com/libuv/libuv/blob/v1.x/ChangeLog) for details (Saúl Ibarra Corretgé) [#2310](https://github.com/nodejs/node/pull/2310) * **V8**: Upgrade to 4.4.63.30 (from 4.4.63.26) (Michaël Zasso) [#2482](https://github.com/nodejs/node/pull/2482)  ### Known issues  See https://github.com/nodejs/io.js/labels/confirmed-bug for complete and current list of known issues.  * Some uses of computed object shorthand properties are not handled correctly by the current version of V8. e.g. `[{ [prop]: val }]` evaluates to `[{}]`. [#2507](https://github.com/nodejs/node/issues/2507) * Some problems with unreferenced timers running during `beforeExit` are still to be resolved. See [#1264](https://github.com/nodejs/io.js/issues/1264). * Surrogate pair in REPL can freeze terminal. [#690](https://github.com/nodejs/io.js/issues/690) * `process.send()` is not synchronous as the docs suggest, a regression introduced in 1.0.2, see [#760](https://github.com/nodejs/io.js/issues/760). * Calling `dns.setServers()` while a DNS query is in progress can cause the process to crash on a failed assertion. [#894](https://github.com/nodejs/io.js/issues/894) * `url.resolve` may transfer the auth portion of the url when resolving between two full hosts, see [#1435](https://github.com/nodejs/io.js/issues/1435).  ### Commits  * [[`1a531b4e44`](https://github.com/nodejs/node/commit/1a531b4e44)] - **(SEMVER-MINOR)** Introduce --link-module to ./configure (Bradley Meck) [#2497](https://github.com/nodejs/node/pull/2497) * [[`d2f314c190`](https://github.com/nodejs/node/commit/d2f314c190)] - **build**: fix borked chmod call for release uploads (Rod Vagg) [#2645](https://github.com/nodejs/node/pull/2645) * [[`3172e9c541`](https://github.com/nodejs/node/commit/3172e9c541)] - **build**: set file permissions before uploading (Rod Vagg) [#2623](https://github.com/nodejs/node/pull/2623)  + alot more commits omitted for brevity's sake in this example   Source Code: http://nodejs.org/dist/v3.3.0/node-v3.3.0.tar.gz  Macintosh Installer (Universal): http://nodejs.org/dist/v3.3.0/node-v3.3.0.pkg  Windows Installer: http://nodejs.org/dist/v3.3.0/node-v3.3.0-x86.msi  Windows x64 Installer: http://nodejs.org/dist/v3.3.0/x64/node-v3.3.0-x64.msi  Windows x64 Files: http://nodejs.org/dist/v3.3.0/x64/  Linux 32-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-linux-x86.tar.gz  Linux 64-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-linux-x64.tar.gz  Solaris 32-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-sunos-x86.tar.gz  Solaris 64-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-sunos-x64.tar.gz  Other release files: http://nodejs.org/dist/v3.3.0/  Website: http://nodejs.org/docs/v3.3.0/  Documentation: http://nodejs.org/docs/v3.3.0/api/  Shasums: -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  3ec6fb8d7a9ad30f673a8e114a98b2dcd6b802a375b87e5b3039dac51a967423  iojs-v3.3.0-darwin-x64.tar.gz c52bc752d2b0af38c4e8ffc83a6132df7e4ff84775db2ecaaa71893a873d4cdf  iojs-v3.3.0-darwin-x64.tar.xz 36136360c082a6cb0753b338f76ac110d2b183846a9df2e8934bb5257675d35b  iojs-v3.3.0-headers.tar.gz 3067437c9338c0415fe721fa5a67995f9435e6f313b4fab00a65f28e824ecafa  iojs-v3.3.0-headers.tar.xz 571b12fa6fcf658873ee556fc61edab07c12daae092cfe6bdeb173df3449214c  iojs-v3.3.0-linux-armv6l.tar.gz 6c210d78728c51a69ab6fdbf096c69d3632897bcc4eed4c60958e34b642ed53f  iojs-v3.3.0-linux-armv6l.tar.xz af44c0644128a552896247866e283d3991934025eee4bdc8c288439bb8d5516f  iojs-v3.3.0-linux-armv7l.tar.gz 688b4506efaf2fb330c6b3d6dbe80f47af60df2cdaf24f47f0ed966d01815819  iojs-v3.3.0-linux-armv7l.tar.xz c9b1c51b7cc780c19df504e29e26b27ee89f7bf6f8d601da597f52e7e39767fd  iojs-v3.3.0-linux-x64.tar.gz add2cd394886d7d3a92bc84e9af6e4a0d509060f0b63bf4b11de6471046043e8  iojs-v3.3.0-linux-x64.tar.xz 197716f55592c85e04f644f9e2ef0d276cf90fecba3cf0e01bad6d3d628446dd  iojs-v3.3.0-linux-x86.tar.gz a4ef6de573441b50bffe8a82f66ebf941a238f175d9decc3d021a615110722d4  iojs-v3.3.0-linux-x86.tar.xz db18a6029c8b9fdc0b95287b1a51e4ea753b515f3f7799e4a5f85ff67ef7a036  iojs-v3.3.0.pkg e84a649858e6f5c1458c0d5d7bf1952f78e93a26ea6bc519222e92e43e2fadde  iojs-v3.3.0.tar.gz 8b317162af3e0e81b3f5efcda664e5f3525e6e1ab4c21b446db83cf9c4028a32  iojs-v3.3.0.tar.xz 68289641c2780e8c34fc9d4c1c92290d5adb7612b4979722523d6212c79bb0d0  iojs-v3.3.0-x64.msi 1d692b5427d6c27dcdff6fe500e209a3d44de4c069d63e5213457986ffae727d  iojs-v3.3.0-x86.msi 0ecb7cd753e55e611ab2235f97ce59205486af4f157b2396ba74c8405e89d622  win-x64/iojs.exe 9b4e1cbe8e731d14f39d006613482ddd143c6c7f7e77d41f37fc8dc231a0ab24  win-x64/iojs.lib 27e8129adc45c7e4cbfbbf59db419c3f7ba0a8a03bee7532e3d2030c1c178680  win-x86/iojs.exe 6c7c3508599353f2718c37f50db74950a64021df625a3ad407b8848099f7f1e1  win-x86/iojs.lib -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  iQEcBAEBAgAGBQJV5uz/AAoJEMJzeS99g1Rdsx0H/0XR2EIUlaT8g6hyYhwlB3Wo dhwoDm5z1/NcjTiCS5eGZm9WvPV+2kfMAbY02+01hcdl1oNSZ3BgIqyHZQtLDEd9 y/S+QnH33VaLWbWjs0r2oeF9E8ifGLPYiR/4DPE4VhcbZZSgBP06mC8KbR5Cjz0e eodXVHE24/R/x/0KRrzQ9zAVs1EULrhrobBkCp1Ftn/dyrJQyOFOeYuTKqT2ZxpL CqfWVlrFLe6qNWtxWb6oXunWfuGvt0hlloPjzo74/TEOhjUNFxG52ucHOT0MUn5e iXzBUSLbuW/8DlzCLY9ACdHsebcTpMRa0srSFthckRFinj0wQ1gFQbQcqWUtw18= =J64o -----END PGP SIGNATURE-----  ``` 
top of my head: - for io.js and Node v4+ we'll have "Windows x64 Files: http://nodejs.org/dist/v3.3.0/win-x64/" (note "win-") and also "Windows x32 Files: http://nodejs.org/dist/v3.3.0/win-x32/", but for 0.10 and 0.12 releases we'll still use the same directories as before (i.e. / for 32-bit and /x64/ for 64-bit). Also, may as well change to "32-bit" and "64-bit" while you're there instead of "x64". - There are both 32-bit and 64-bit Windows Installers, .msi files - "Universal" is not correct for io.js or Node v4+ but will remain so for 0.10 and 0.12 releases—this goes also for the downloads pages for those so the templates need to change there as well. We're only shipping 64-bit binaries/installer for osx/darwin from io.js onward, "Universal" has both 32 and 64 munged together. - What about links to the ARM builds? Also be aware that armv8 downloads should also be available soon, if not in v4.0.0, soon after - We're still going to release io.js and it'd be good to be able to announce in the same way but it'll all be iojs.org and obviously s/node/iojs. 
Awesome feedback :+1:  Tbh I would like to extract the logic around files into something reusable, as the download matrix on the downloads page is pretty much exactly the same thing. 
This is awesome :) 
Decided to target node v4 in the first version of this script.  Just pushed necessary URL adjustments to the list of files, re-arranged the items and used the same terms and order as we do on the download matrix on out downloads page.  Are we going to have a unique URL per release on nodejs.org? Seems the old website did seeing the website URL in the release post, e.g. http://nodejs.org/docs/v0.12.7/  Just generated for v3.3.0:  ``` markdown Windows 32-bit Installer: http://nodejs.org/dist/v3.3.0/node-v3.3.0-x86.msi  Windows 64-bit Installer: http://nodejs.org/dist/v3.3.0/node-v3.3.0-x64.msi  Windows 32-bit Binary: http://nodejs.org/dist/v3.3.0/win-x86/node.exe  Windows 64-bit Binary: http://nodejs.org/dist/v3.3.0/win-x64/node.exe  Mac OS X 64-bit Installer: http://nodejs.org/dist/v3.3.0/node-v3.3.0.pkg  Mac OS X 64-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-darwin-x64.tar.gz  Linux 32-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-linux-x86.tar.gz  Linux 64-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-linux-x64.tar.gz  SunOS 32-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-sunos-x86.tar.gz  SunOS 64-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-sunos-x64.tar.gz  ARMv6 32-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-linux-armv6l.tar.gz  ARMv7 32-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-linux-armv7l.tar.gz  ARMv8 64-bit Binary: http://nodejs.org/dist/v3.3.0/node-v3.3.0-linux-arm64.tar.gz  Source Code: http://nodejs.org/dist/v3.3.0/node-v3.3.0.tar.gz  Other release files: http://nodejs.org/dist/v3.3.0/  Website: http://nodejs.org/docs/v3.3.0/  Documentation: http://nodejs.org/docs/v3.3.0/api/ ``` 
This is ready to go for its first debut. Into master or node-4.0-release @fhemberger? 
node-4.0-release, please. So we have everything we need in one place. 
Landed into node-4.0-release with fd14e76 
Whoops, sorry. Haven't noticed this one … thanks! 
@mikeal Next time, please look at the image sizes as well, this thing was _huge_. I optimized the PNG in Photoshop and squeezed out the last bits with ImageOptim (going down from whopping 1.2 MB to 94 KB). (Also please mind the .editorconfig _g_) 
> (Also please mind the .editorconfig g)  Did I modify the editorconfig?  Sorry about the image, I was on incredibly slow internet and it was all loading quite fast so I didn't worry. Of course, now I'm realizing that because I was loading it from the remote site it was already in my browser cache :/ 
> Did I modify the editorconfig?  No, your editor just seems to ignore the indentation settings. ;) 
> No, your editor just seems to ignore the indentation settings. ;)  :( I'll figure out what is going on with Atom then. 
@jasnell FYI 
Thanks, added the section again. 
I think we should all mot get in_love_d. ;) Thanks! 
-1 on that. Don't show a dummy scroll bar when none is needed. 
@fhemberger For a large enough screen, scrollbars are not needed on some pages, but are still needed on some of them (the most part, in fact). If you want to observe the problematic behaviour that adding a scrollbar (when using a desktop browser) to all pages fixes, do this: 1. Open some browser that has no-zero-width scrollbars (not Safari). 2. Navigate to https://nodejs.org/en/ (first item in the menu). 3. Zoom it out a bit (if you need to), so that the scrollbar gets hidden. 4. Press «About» (second item in the menu), _the page, including the menu under your cursor, gets shifted left_. 5. Press «Downloads» (third item in the menu)¸  _the page, including the menu under your cursor, gets shifted right_. 6. Press «Docs» in the menu (fourth item in the menu)¸  _the page, including the menu under your cursor, gets shifted left_.  That's just annoying. 
The behavior you describe exists since the dawn of web browsers on all websites that have some pages longer than the current viewport. So personally, I don't really consider this an issue, but I'm happy to hear @nodejs/website's thoughts on that. 
I think I got around something like this on my site (https://searchbeam.jit.su/about), at least in webkit, by screwing with the scrollbar css. 
@Fishrock123  No, it doesn't work, at least for me. 
@fhemberger Yes. And this was always the standard way of fixing it. 
Ah yeah, I turned it back on. Here's the CSS for removing them completely in webkit (eeehhh probably don't do this.) https://github.com/Fishrock123/Searchbeam/blob/master/src/less/override.less#L14-L26  Ideally the scrollbar would be styleable and float ontop of content.  Maybe we can make a fake one if the page height  < screen height though. Idk. 
First rule of web development: don't mess with the scrolling.  No, seriously: This is more of an browser bug than anything. The only acceptable solution I see it some JS that obtains the width of the scrollbar and if non-zero, offset the page to the right by width/2. If that's even possible cross-browser. Of course, this would need to happen on `resize` events on `window` too. 
Of cause, you're right. Replaced the image with an optimized JPG, size is now 94 KB. 
LGTM +1 
Merged 804013bec64343cfd9a490b48c84584220be76ab. Thanks! 
+1 
Thanks! 
Merge conflict is because of 5511f3c, rebased with master, don't know why git still sees conflicts here. I'd really like to merge this change into master, because of the notable performance improvement.  cc @nodejs/website  
+1 although I wish there was an easy way to test to make sure analytics is still working the same. 
I thoroughly read that piece of analytics code a few times before I decided to merge it, looked okay for me. The generated code is also used by the H5BP, gulp and hapi projects. 
Sounds good then. +1 :) 
Cherry picked changes into master. 
Damn, that's stupid from me. Wrong project, this should have gone to `npm/newww`. Don't know how this happened.  Sorry. 
cc @nodejs/website  
looks good 
- [ ] Run `scripts/load-versions.js` after release once to get the full versions list (needed to determine current version and full release history). - [x] Remove the comment here: https://github.com/nodejs/new.nodejs.org/blob/master/layouts/download-releases.hbs#L13 (and remove the class from h2, we're not using this style any longer).  I'd love to get #98 and #100 merged before the release as well. 
- [x] Repoint Changelog on front page from https://github.com/nodejs/node-v0.x-archive/blob/master/ChangeLog to https://github.com/nodejs/node/blob/master/CHANGELOG.md, reversing fix in #84 
I've created a separate [node-4.0-release](https://github.com/nodejs/new.nodejs.org/tree/node-4.0-release) branch (I checked off the tasks which have already been done). Please commit required changes there, so we just need to merge it once the release is finished. 
The `release-post.js` script found in #88 could be worth testing, atleast for filling in the changelog, files and shasums. It'll create `locale/en/blog/release/v4.0.0.md` locally and can be edited by hand from there..  It fetches data from three different sources, which all have to be updated / merged into node's repo master before running the script: - https://nodejs.org/dist/index.json - https://raw.githubusercontent.com/nodejs/node/master/CHANGELOG.md - https://nodejs.org/dist/v4.0.0/SHASUMS256.txt.asc 
@phillipj :+1: Let's do this. 
So I can edit the resulting file and add some custom text about the release after it's been created? And `release-post.js` is run by hand to do the generating, not on the server at deploy time? 
> So I can edit the resulting file and add some custom text about the release after it's been created?  Yes, followed by you commiting it to the repo.  It's all manual by hand atm. We could ofc discuss something fancier / automatic later. 
- [x] Update the ES6 documentation @ https://nodejs.org/en/docs/es6/, note the talk of arrow functions is no longer correct for v4. We need a volunteer to update this. 
all done I think 
@rvagg https://github.com/nodejs/node/blob/master/CHANGELOG.md still shows v3.3.0 as latest version. 
fixed now with a merge of https://github.com/nodejs/node/pull/2742, I probably could have got away with not waiting for review but pehaps we ought to use tagged links to CHANGELOG.md in future, e.g. https://github.com/nodejs/node/blob/v4.0.0/CHANGELOG.md 
Yes, we have already switched the link on the home page to the tagged one. 
Well, not sure about the "largest" part … ;) 
I think we're up to date now, closing. 
I think we should keep those around: - https://github.com/nodejs/iojs.org/issues/235 (Browser language based redirection for i18n) - https://github.com/nodejs/iojs.org/issues/80 ('latest' symlink for downloads) - https://github.com/nodejs/nodejs.org/issues/144 ('how to verify downloads' guide) - https://github.com/nodejs/nodejs.org/issues/74 (document supported versions + lts) - https://github.com/nodejs/nodejs.org/issues/49 (aka fix old documentation) 
At the moment, you can access the former website through old versions of the node api docs up to v0.12 
/cc @ofrobots @domenic  
Related: This PR adds typed arrays to the list: https://github.com/nodejs/new.nodejs.org/pull/106 
Personally, I'd love to get rid of the entire paragraph about how stuff works in 0.12, or at least most of it. I'll open a PR for that too....  UPDATE: Here ya go: #107  
One little remark, otherwise LGTM. 
Thanks, looks much better now! 
It's the web-fonts kicking in. For performance reasons, they are loaded dynamically to avoid FOIT (Flash Of Invisible Text) on mobile/slow connections. 
Works very good on Safari / iOS :+1:   Any ideas on improving it slightly for Chrome OS X and iOS? It would be really nice if this repaint only occured on the initial page atleast, not every subsequent page.  Found [Font Loading Revisited](https://www.filamentgroup.com/lab/font-events.html) from filamentgroup, but it seems we would have to have some serverside logic for it to work perfectly. 
There's a PR in line which will probably fix that: https://github.com/nodejs/new.nodejs.org/pull/69  There are some merge conflicts to be resolved and I was short on time, so I went for a slightly different solution. Maybe we can merge both ideas. 
Yea, I've noticed it as well... 
Fingers crossed that #69 / #139 does the job! 
Great, thank you. Looks way more informative (as I guess not everybody wants to start diving into V8's code right away). 
LGTM :+1:  
Added some text to a release post, please review @mikeal and others, @nodejs/tsc perhaps? See the big locale/en/blog/release/v4.0.0.md  file in this PR. 
Will review shortly. 10-15 minutes or so On Sep 8, 2015 2:12 PM, "Rod Vagg" notifications@github.com wrote:  > Added some text to a release post, please review @mikeal > https://github.com/mikeal and others, @nodejs/tsc > https://github.com/orgs/nodejs/teams/tsc perhaps? See the big > locale/en/blog/release/v4.0.0.md file in this PR. >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/pull/110#issuecomment-138555669 > . 
you have time, I'm rerunning tests and making builds and whatnot since the late addition of the handle zapping change 
Added a new section on build/platforms/arm:  > Over the past year thanks to donations from companies such as Rackspace, DigitalOcean, Scaleway, miniNodes, Voxer, ARM Holdings, and individuals from the community, we've built an amazing test cluster that includes an impressive line-up of Linux variants, OS X, Windows, FreeBSD and SmartOS. New to Node.js, we also have first-class support for ARM processors. Our test suite must be continually passing on ARMv6, ARMv7 and the new 64-bit ARMv8 processors. So Node.js is officially ready for use by hobbyists and ARM server users alike. 
Text looks good as well. 
Looks good on initial read through. Nothing major sticks out.  
+1 to what @jasnell said. 
Comments inline. Other than that, +1 
It's all there, we're just not showing it yet … 
sgtm 
Thanks! 
No, https://nodejs.org/docs/v4.0.0/api/ is the correct link. And we won't create full copies any longer. 
Hm, that would result in two links (website and documentation) having the same URL which seems kinda strange.  ![image](https://cloud.githubusercontent.com/assets/1231635/9755539/18a4cc6a-56d3-11e5-8013-3db4fd27ca67.png)  What about (1) using `Website: https://nodejs.org` or (2) remove the website link entirely? 
+1 for  removing the website link entirely.  @rvagg What are the future plans for the API docs? IIRC the docs team should remove the website "frame" from the API docs of previous releases, so we can drop the old website snapshots and just keep the API docs, right? 
That's a question for the @nodejs/documentation team as to what they intend to ship but I'd go with removing the website link, that's legacy and we're only shipping API docs for now. 
This works because tags. yay! LGTM.  @fhemberger ptal 
Good catch, thanks! I like it. 
Thanks! 
This looks great!  > On Sep 9, 2015, at 5:46AM, Frederic Hemberger notifications@github.com wrote: >  > Thanks! >  > — > Reply to this email directly or view it on GitHub https://github.com/nodejs/new.nodejs.org/pull/116#issuecomment-138778216. 
LGTM on both, maybe a caching issue on your side? 
likely the forced 4h cache timeout we're pushing with cloudflare on html assets, something we need to tune, perhaps by sending better headers from the server 
^ to clarify, the 4h is to both edge caches and the server but whenever there's a new website deploy the edge caches get purged so it'd be the browser side that's caching and a force reload should take care of it 
Ah that makes sense. I see it fine now. Thanks! 
Thanks, fixed in 06bbe072cd73d5fda1bf6bcf342a3f8b3c3d69a0 
Cool, thanks. 
Wow, this looks weird, what Browser/OS are you using? 
@fhemberger I'm using Chrome v45.0.2454.85 under Windows 7. 
Although it doesnt look quite as unnoticeable for me, I agree we could make inline code blocks stand out a bit more. Some cut-n-paste from github's styling:  ### BEFORE  ![image](https://cloud.githubusercontent.com/assets/1231635/9814265/ecf43c02-588c-11e5-8ca3-e2ced936af04.png)  ### AFTER  ![image](https://cloud.githubusercontent.com/assets/1231635/9814245/ba78480e-588c-11e5-8de7-69d45f914dfd.png) 
@phillipj The screenshot was part of the docs, not the main website. ;) 
> @phillipj The screenshot was part of the docs, not the main website. ;)  Wooopsie, my bad! But that doesnt mean we cant improve it on the main site though 😃 
I knew you were going to say that. ;) Sure thing, go ahead! 
@fhemberger I could fix this in the docs, but I dont know where the source of those are located? 
Should be in https://github.com/nodejs/docs I guess. I lost a bit track of what's "the old stuff" vs. "the new stuff". :smile:  
That repo is more or less empty.. Maybe someone in @nodejs/documentation has some advice about the location of https://nodejs.org/api/ source files? 
No luck on that team either :disappointed: Falling back to @rvagg then, which project is deployed to https://nodejs.org/api/? 
PR fixing this just landed https://github.com/nodejs/node/pull/3573, thanks for raising this issue :+1:  
@phillipj thank you! 
added @ https://github.com/nodejs/build/commit/6c52e9fdc804549a12bed59bcc2e964e1a6b6016 
We're working on that, once everything has settled a bit.  There is also a Korean community around iojs: https://github.com/nodejs/iojs-ko, which has been taken care of by the @nodejs/iojs-ko team. I think it's a good idea to coordinate the translation efforts with them. 
@fhemberger Thanks! 
You can translate any markdown file in the english locale to the same file on the other locale and send a pull request for it. We haven't written the docs yet though, we should open an issue for that :) 
This also breaks hits/links from Google searches, which still use HTTP in most cases. 
Related: - https://github.com/nodejs/nodejs.org/issues/173 - https://github.com/nodejs/nodejs.org/issues/175 - https://github.com/nodejs/nodejs.org/issues/69 (A bit older, but still valid) 
same bug with nvm.  I solved it changing in nvm.sh  from http://nodejs.org/dist to https://nodejs.org/dist  then I updated the env  export NVM_NODEJS_ORG_MIRROR="https://nodejs.org/dist" 
please return to previous CDN configuration all of my builds are failing because of this. please help 
+1, my builds are failing 
cc @rvagg / @orangemocha  
Some of our dependencies is using node-gyp which downloads node.js. All builds are failing with such an error:  ``` node-gyp rebuild  gyp http GET http://nodejs.org/dist/v0.10.21/node-v0.10.21.tar.gz gyp http 200 http://nodejs.org/dist/v0.10.21/node-v0.10.21.tar.gz gyp WARN install got an error, rolling back install gyp ERR! configure error gyp ERR! stack Error: incorrect header check gyp ERR! stack     at Zlib._binding.onerror (zlib.js:295:17) gyp ERR! System Linux 3.13.0-55-generic gyp ERR! command "node" "/tmp/node-npm-BWnW/node_modules/node-gyp/bin/node-gyp.js" "rebuild" ``` 
+1 We can't deploy to production (Amazon Elastic Beanstalk)! How do we fix this...? 
+1 actually the response code is wrong. its a 301 to homepage. 
Yes, we know and we're already working on a fix. 
should be fixed now, cached redirects may still get in the way however 
Hi.  `http` links are broken, but `https` works fine though. I managed to get around the issue, using the `npm_config_disturl` environment variable (lowercase)  `export npm_config_disturl=https://nodejs.org/dis` fixed building with node-gyp  Apparently you can also set this value in ~/.npmrc but I haven't tested it. Hope it helps. 
This is fixed for me now. The redirect is gone. My browser cached the redirect, as you said, but it works now from the command line when we do npm install. Thanks so much for the quick fix :-) 
DIST files are fixed. confirmed but:  http links to repo now are broken: http://registry.npmjs.org/node-uuid/-/node-uuid-1.4.1.tgz vs https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.1.tgz 
@tereska this is an npm thing if there's a problem, but I can't see one, they both work for me 
ok now they are working for me also. thanks 
@godric7 Unfortunately, there doesn't seem to be a corresponding config value in npm@2 (tried `npm config edit`) 
thanks for the fix! 
I think there is still some issue with this.  When i try to download this url: http://nodejs.org/dist/v0.12.7/node-v0.12.7-linux-x86.tar.gz it redirects me to blog  and when i try to download http://nodejs.org/dist/v0.12.7/node-v0.12.7-linux-x64.tar.gz, it is super slow any alternative mirrors i can use 
Can't reproduce the redirect. Maybe it's still cached on your side? /cc @nodejs/build  
you may have a cached version of the redirect still? re slowness, we're using CloudFlare now so it _should_ be a lot faster than it ever was, what country are you in? Also, try `https` instead of `http` for the download, not that it should make a huge difference, however. 
Duplicate of #124, use https://nodejs.org/docs/ instead. 
+1 and this is urgent, we have failing builds because http://nodejs.org/dist/v0.10.21/node-v0.10.21.tar.gz cannot be downloaded 
node-gyp is downloading node.js during the build. Using https://nodejs.org/docs/  does not really help us. The node.js folks should maintain backward-compatibility when building the new website. 
@ellenaua @drobiazko Wrong issue: #124 
my fault should be fixed now, your browser may be caching the bad redirect though 
Maybe highlight the color a bit?  Also are we using any sort of glyphs? We could add a bug glyph from like, fontawesome or something maybe.  LGTM if it works. Perhaps we should add a "report node.js issue" above or below it? 
a) The link color is the same as for the others in the footer. b) No, we don't use any sort of glyph font (better use SVG for that).  Good idea about the node.js issue. 
Updated desktop view: ![](https://cloud.githubusercontent.com/assets/153481/9786143/f6a21fba-57b7-11e5-9c21-de510085123f.png)  Updated mobile view: ![](https://cloud.githubusercontent.com/assets/153481/9786152/01ad7472-57b8-11e5-8376-ac4dd3e0ac4b.png) 
LGTM (did not look deeply at the css or anything) 
Not really much CSS to look at. ;) 
+1 
sgtm 
A few URLs could point directly to the new locations, otherwise LGTM. 
Fixed up the links, PTAL. 
+1 
Great, thank you! 
LGTM 
We all know that I'm :100:  
+1  Fixes #131  
Please also remove public/index.html, it's also a relic from the iojs site. 
Thanks! 
Good catch, thanks! 
+1 
It would be nice if the logo keeps adjusting to the site's width (as it is supposed to do now via CSS) 
Then if it does, we can apply a padding-bottom hack in CSS.  Since it doesn't resize right now maybe this changeset is okay? 
Thanks, merged. 
Cool, thanks! 
@fhemberger this was rebased I think to resolve the merge conflicts. you had reviewed the prior patch, does this one look ok? 
I only had a quick glance at the original patch (looked okay to me so far). Still, I'd like to have a closer look and reserve some time for testing. 
This whole XHR + localStorage stuff seems a bit excessive to me. Can't we just rely on native browser caching? 
Opened https://github.com/nodejs/new.nodejs.org/pull/178 for my attempt at this. 
Guess this one is kind of obsolete now with https://github.com/nodejs/nodejs.org/commit/aa4b373526fd3feb2c30bd6271e2872001e56c05. 
Can we generalize the language because there will be multiple Code + Learns around the world. Then we should just make mention specifically of the London branch. 
+1 
Can you please have a look at the merge conflicts? I think it's because of #140. 
Yep np 
@iancrowther Can you please look into this? I'd like to merge it as soon as the conflicts are resolved. 
Conflicts resolved and merged through #243. 
(Fixes #52) 
Great idea, still needs some fine tuning (see the link on the bottom right):  https://nodejs.org/en/about/working-groups/#website ![bildschirmfoto 2015-09-14 um 18 40 23](https://cloud.githubusercontent.com/assets/153481/9855679/3071c384-5b10-11e5-890d-72f574bddf98.png)  Also a little bit of padding would be nice, so the hash doesn't touch the headline. Maybe also a more subtile hover style for those links without the green background? 
Yes, good idea. The font might be too bold too. 
Nice, looking forward to this landing 👍  On Monday, September 14, 2015, Fábio Santos notifications@github.com wrote:  > Yes, good idea. The font might be too bold too. >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/pull/143#issuecomment-140140974 > . 
I've forked @fabiosantoscode's branch [here](https://github.com/mrkiffie/new.nodejs.org/tree/feature/anchor-links), resolved conflicts and extended the renderer function to support markdown headings that contain links. Here is the [comparison with master](https://github.com/nodejs/new.nodejs.org/compare/master...mrkiffie:feature/anchor-links). Any thoughts? 
Nice refactoring w/tests @mrkiffie :+1: Maybe you could address the styling issues @fhemberger pointed out aswell while you're at it?  > Also a little bit of padding would be nice, so the hash doesn't touch the headline. Maybe also a more subtile hover style for those links without the green background? 
Ok, I'll have a look at those style tweaks 
@phillipj, I've updated the styles to be similar to those of the attachment in #52. I also simplified the markup that was being generated as it doesn't appear to serve a purpose. 
Very nice @mrkiffie! I would say your branch looks mergeable after squashing your commits into one and opening a PR from your fork. 
Fixed with 294af4f, thanks to both of you :+1:  
Potentially fixed by #143  
This should be resolved by #196  
You're right, closing this for now. Feel free to re-open it if you've got some URLs which still doesnt work @wmomk 
How about `nodejs.org-archive`, like the old node-code? 
+1 good idea  Am Samstag, 12. September 2015 schrieb Frederic Hemberger :  > How about nodejs.org-archive, like the old node-code? >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/issues/147#issuecomment-139820692 > . 
One concern: if you rename the new repository to what the old repository was called, you'd cause linkrot - anything pointing at the `nodejs.org` repository would suddenly be pointing at the wrong repo, ie. causing dead links.  Perhaps a better approach would be to rename it to `nodejs.org-v2` or something along those lines? Then it'd still be clear what the newest repository is, without breaking the redirects that (I believe) GitHub sets when renaming a repository. 
The same thing happened with the io.js to node move.  I'd prefer to go with what makes the most sense for the current repo, which would be to rename this to nodejs.org. :/  Ideally we would have renamed the old site before moving it over here. 
I'd say it's pretty important not to break existing links, personally. There should be plenty of ways to name the new repository without causing confusion. 
I'm with @Fishrock123 on this one. With the website repo, we're most concerned about people finding the current code, rather than keeping links working with a legacy version. If node itself is doing this with the io.js merge, I say keep the same mode of operation here. We can put a notice in the readme pointing to legacy versions if it's a big issue.  As for naming the old one, maybe `legacy.nodejs.org` or `nodejs.org-legacy`? `archive` makes me think of old versions of `node` rather than the website. 
Notices wouldn't help for that, though. For example, if one cross-references an issue on the website repository from another repository (or site!), that link will just end up in a 404 (or, worse, in an unrelated ticket). Those most affected by it would never get to see the notice.  Issues and commits are technical documentation, and breaking references to that really isn't a good idea. I don't really see the issue with a different name, either - it'd be fairly trivial and time-cheap to find a different name (`nodejs.org-site`, ...), and avoid the collision altogether, whereas the cost of creating a collision is rather high. 
Is there a mechanism for users to report dead links?  I just raised a similar concern to @joepie91  https://github.com/nodejs/new.nodejs.org/issues/153 
There's a link on the footer to report issues for the website as well as node.js itself.  @therebelrobot: We have **nodejs/node-v0.x-archive** and **nodejs/node-convergence-archive** for old code, so IMHO it would make sense to rename the old website repo **nodejs/nodejs.org-archive** as well.  At least according to Google, there don't seem to be pages linking to the old repository: https://www.google.com/?q=link:github.com%2Fjoyent%2Fnodejs.org https://www.google.com/?q=link:github.com%2Fnodejs%2Fnodejs.org 
Looking at github's own stats for referring sites against the nodejs.org repo the last 14 days, shows Google sends alot of users though.  ![image](https://cloud.githubusercontent.com/assets/1231635/9977597/1ab38698-5f0e-11e5-9793-278b74786cfa.png)  IMO we should go ahead and rename the repos asap to stop confusing end-users and new contributors about which repo/project are currently deployed to nodejs.org. 
The traffic against the current nodejs.org repo is quickly declining. Updated stats, still the last 14 days:  ![screen shot 2015-10-05 at 20 28 29](https://cloud.githubusercontent.com/assets/1231635/10289665/c8db8bb0-6b9f-11e5-8a45-19ca645fdbab.png)  :+1: for @fhemberger suggestions - nodejs.org -> nodejs/nodejs.org-archive - new.nodejs.org -> nodejs/nodejs.org  Are we ready to do this @nodejs/website? 
I do want to reiterate again that **this change will permanently and irrevocably break documentation references, and this is bad.** Google does not necessarily show the entirety of these references, and it should not be assumed that there are none.  It is very easy to avoid this, by renaming to a repository name that isn't identical but still obviously the right one. 
> this change will permanently and irrevocably break documentation references, and this is bad.  The longer this repo remains, the worse it will be. Also, I'd like to know what documentation references link to the repo of the nodejs.org website? 
> The longer this repo remains, the worse it will be.  That is a reason to accelerate discussion of a new name, not to accelerate the renaming to a reused name.  > Also, I'd like to know what documentation references link to the repo of the nodejs.org website?  This is not a question that can be conclusively answered, which is why it should not be assumed to be 'none'. There can exist references anywhere, publicly, in internal documentation, and so forth. 
I think @joepie91 is raising a valid point here. I recall the SailsJS docs going through a similar situation that resulted in all the links from Google being broken. 
what documentation is in this repo and why is it in this repo? 
@mikeal The repository - with its issues, commits, and so on - _is_ documentation, it doesn't just contain it. All of these things are technical documentation in that they document the history (and often the reason) behind certain decisions, changes, and so on. 
Ok we should rename the old repo to an archive ASAP though. I am unable to do that today I think. 
That history is only a few months old, I wouldn't worry too much about it for this repo (I would be more concerned if it was another repo). I don't think there's a huge number of links to content here that isn't somewhat ephemeral (we had a lot of people pointing to issues to help us get ready for launch which is now completed). 
@mikeal Even for a small amount of possible links, it doesn't seem worth the potential issues. Giving it a slightly different name is a practically free solution that just makes the problem go away 100% (as GitHub automatically maintains redirects as long as you don't reuse names, if I'm not mistaken). 
Didn't we already do this once by moving from joyent/nodejs.org to nodejs/nodejs.org? If so, there's only a few months of links, which is by no means as important as joyent/nodejs.org was with years and years of links.   It would be preferable to make a clean break now and solve the problem before any more links are created, both to the confusing nodejs/new.nodejs.org and nodejs/nodejs.org.  @joepie91 If you feel this still needs to be changed, it can be the first choice of the Website WG admin group. //cc https://github.com/nodejs/new.nodejs.org/issues/228 
@bnb the issue is that there's an active forward from joyent/node.js to nodejs/node.js and we'll break all of those old links if we rename over it. 
joyent/node.js? Aren't we talking about joyent/nodejs.org and nodejs/nodejs.org? 
@bnb ya, sorry, misspelled :) 
@mikeal Ah, okay.  The problem with this is that the code in this repository will, from now until any future that we can predict, be posted to nodejs.org. It's flat out misleading to have a repository that's named that, which doesn't actually represent it. Further, changing this repository's name to something slightly different than nodejs.org will only compound the problem, as people will have to actively look for the right one after finding the wrong one.   It's highly preferable to start building new links to both, with correct naming, than continuing to build unclear links that will likely end up being changed. 
Also worth noting that every contributor and owner of this repository that has commented has +1ed this idea. 
> Ok we should rename the old repo to an archive ASAP though.  Could we please go through with that part asap? There's no dispute on that one as far as I see it. 
Will renaming this break anything with the deployment system? 
old repo renamed to `nodejs.org-archive` 
+1 
Good catch, thank you! 
@mikeal @fhemberger what are your thoughts on giving one or more people on @nodejs/evangelism commit rights to this repo so they can post updates without having to wait for a website team member? They have a great process in place for review and collection already and it'd be great to have these be more timely. 
Yes, please! :100: (@bnb and @snostorm and already have, adding @yosuke-furukawa – anyone else?) 
This week we should round up all the contributions and onboard a ton of new committers, including people that have been contributing blog posts. 
@fhemberger Thank you. currently, it is OK. If I would like to add any other member, I will ask you.  
thanks @konstardiy, this is actually an issue for nodejs/node rather than this repo, but I'll pull in some folk on this here anyway / @nodejs/platform-windows: would you mind having a look at this please? It's a bit of a concern although I seem to recall it installing in the right location when I was trying it out. 
@rvagg Thanks for fast reply. I was a bit shocked with that. Initially tried to install a hapi package abd seen that it expects _strange_ version of node (4.0.0) and after short googling I was hm... smashed into fundamental changes nodejs is going through and i was totally unaware of. Tryed to run installer (msiexec) as administrator and it did not helped.  
@konstardiy Did you try to upgrade from a 32-bit version of node? I've noticed the behavior you're seeing in the past - but only when the user already had a 32-bit version installed. This happens because windows installer carries over the settings used for the previous installation, including the installation directory. 
What @piscisaureus said. @joaocgreis fixed this, but the fix only applies to fresh installs. @konstardiy can you try to uninstall first and then run the 4.0 installer? 
As a user of Windows 10 64-bit I can confirm that it defaults to Program Files for me. 
Thanks for hint about uninstalling the old version of Node, it helped. This hint can be a part of FAQ.. 
Thanks, should be fixed now (requires force-reload due to caching). 
it's nginx, and it's intentionally exposed as such, it can be used to manually navigate to the different builds available for download with /download/release being to what /dist actually points but there is also /download/rc, /download/nightly, etc. 
Ah I see. Then maybe it should be removed from Google via robots.txt? I don't know if this is intentional or not, but right now Google searches for "download node" go there.   <img width="839" alt="screenshot 2015-09-15 09 58 11" src="https://cloud.githubusercontent.com/assets/475621/9878405/7c3cbfdc-5b90-11e5-9569-5211583246ab.png"> 
You can see the complete current list @ https://raw.githubusercontent.com/nodejs/build/master/setup/www/resources/config/nodejs.org, a lot of it was based on analysing the logs and narrowing down _most_ of the active URLs being hit and deciding what to do with them with @fhemberger. There's no doubt that we ignored a bunch of much less used URLs but we assumed that we'd got most of them.  My plan was to review after a time to see what redirects were actually being used and try and trim the list over time. I guess we should also do a review of 404's to see what's coming up. I could do some log grepping and get back to you on that if you like, I still have the old site's contents that we could cross-reference with and figure out what's real and what's not. 
The video wasn't part of the repository, some files/directories were placed directly on the old server, so for some rare parts, we simply don't know what was linked where. Maybe we still can find the video and put it online again.  As @rvagg already said, we went through all the urls of the old website, mapping them to the new content were possible (except those bits of content which were removed, which now rightfully return a 404), then going through a list of over 4000 URLs returning non-200 responses collected over a month on the old server. After weeding out automatic scanning attempts for things like Wordpress configs or admin interfaces, we tried to find a way to map those to the current website as well.  We will continue to check the logs and add further redirects. 
https://gist.github.com/rvagg/50a283b0a35657cdc0f7  top 404s for the site since the server move sorted by frequency, I've removed some of the obvious bogus ones and left off all the 1's and 2's which are pretty much all guaranteed to be bogus. If you take out `ivy.xml` and `.jar$` then you reduce the list by ~3k down to ~5k.  Some creative grepping leaves with this list of first-round candidates: - 6813 /static/images/icons-interior.png - 6810 /static/images/platform-icons.png same as above - 5802 /static/images/twitter-bird.png - 3395 /static/images/footer-logo-alt.png  These are all mostly external referrers but also http://nodejs.org/dist/v0.10.32/docs/api/assets/style.css and other 0.10.x docs. I'm not inclined to "fix" them tbh but perhaps have other opinions? - 1866 /static/images/logo.png - 759 /static/images/footer-logo.png - 734 /static/images/ryan-speaker.jpg - 718 /static/images/forkme.png - 696 /static/images/home-icons.png - 695 /static/images/microsoft-logo.png - 693 /static/images/ebay-logo.png - 691 /static/images/yahoo-logo.png - 686 /static/images/linkedin-logo.png  These mostly come from the full website mirrors shipped as docs, e.g. http://nodejs.org/dist/v0.10.1/docs/ which I'm kind of annoyed about having to support. They are candidates for "legacy" but I'm not fussed, these mirrors are pointless. - 4738 /dist/staging - Doesn't exist any more, we do it differently now and I'm happy for a 404 here - 1114 /logo.png - I can't find any internal referrers so I don't see a reason to keep this, their fault for leaning on the site, www.nodeclipse.org is a primary offender here - 760 /browserconfig.xml - is this a thing? I don't see it on the old site - 454 /download/release/v4.0.0/doc/api/ - this is an odd one, we used `/doc/` for io.js but switched to `/docs/` in the last release and for v4.0.0 so I don't know what's going on with this, I don't see _any_ referrers for the latest log file so ...? - 395 /static/images/roadshow-promo.png - 337 /api/assets/logo.svg - 297 /download/favicon.ico - 267 /tracking.js - 229 /main.js - 229 /api/fs.html> - 198 /industry/ - no internal referrers - 177 /api/all.json - this must be just for `http` and not `https`, not sure why it's not getting redirected or loaded, it _should_ be so I probably need to fix - 168 /static/images/download-logo.png - 141 /dist/v0.12.4/node.pom - 139 /static/video/ - 138 /xmlrpc.php - 131 /dist/.index/nexus-maven-repository-index.properties - 119 /static/images/joyent-footer.svg - 117 /static/images/not-invented-here.png - 117 /api/index.json - ditto for all.json 
@fhemberger would plugging these be a good candidate for next months Code and Learn?  Should we add a code-and-learn label to appropriate issues? I want to ensure attendees have: - Enough to do.. - Enough information to execute  I want to add a milestone too so that issues does not go stale but I need to block book a venue in order to have concrete dates. 
+1 
@iancrowther Sorry for the late reply, this issue just slipped through.  I don't think its fitting for the next Code and Learn. I'll just add those files from the old repo:  6813 /static/images/icons-interior.png 6810 /static/images/platform-icons.png same as above 5802 /static/images/twitter-bird.png 3395 /static/images/footer-logo-alt.png 1866 /static/images/logo.png 759 /static/images/footer-logo.png 734 /static/images/ryan-speaker.jpg 718 /static/images/forkme.png 696 /static/images/home-icons.png 695 /static/images/microsoft-logo.png 693 /static/images/ebay-logo.png 691 /static/images/yahoo-logo.png 686 /static/images/linkedin-logo.png  and add redirects for it and we're done. What's really bugging me is that we need to support those old docs, as @rvagg said. I'd like to have some kind of converter, which strips the surrounding page layout and only leaves the text content in place, so we can convert it into something similar to the current docs. But I think that task is way to big for a Code and Learn. 
Redirects are in place, closing this now. 
would you mind posting a screenshot of what's changed? 
Sure - no problem - I've attached to this message.  On 15 September 2015 at 07:53, Rod Vagg notifications@github.com wrote:  > would you mind posting a screenshot of what's changed? >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/pull/154#issuecomment-140297813 > . 
didn't come through, if you go to github you can do it in the comment box and they'll appear inline 
Hi - I've attached the screnshot below  ![screen shot 2015-09-15 at 07 59 16](https://cloud.githubusercontent.com/assets/10332946/9870459/ee079e28-5b83-11e5-8d28-06dea620f2e0.png) 
That's much nicer than the current simple list, good work!  A couple of suggestions from me (I'm not on the website team so will defer to them, perhaps they don't agree): - let's remove the `<ul>` completely, the dots seem pointless now - Include the date in the link or switch them so the date comes second, there's something that feels odd about the dates leading 
+1 to remove bullets, the heading styling is enough to imply a new article.  {{title}} - {{date}} makes sense to me as the title is the primary information. 
Looks really sweet!  For semantics, we should stick to `<ul>` (because it's a list of items), but we can remove the bullet.  We should also find a way to break the blog index list down into one page per year. Otherwise the list will be way too long. I don't have much time right now, so if anybody has a good idea how to handle this … 
Love it. 
Does this always guarantee to split on whitespace for where it ends the summary?  Also could we add an ellipsis character to the end of the summary, before the link? (`…`) 
@elinnet I'd love to merge your PR. Can you please have a quick look at the merge conflicts? 
I'm inclined to resolving the merge conflict manually, as this looks so much better than what we've got on nodejs.org atm :smile: 
@phillipj Knock yourself out. :smile:  
These changes, with some additions, just landed in cbeb2a099c51f4f0a2778aa3f0482626215fc2fa, thanks @elinnet and @xicombd! 
:+1:  
Merging to get this fixed, although open for suggestions about contacting the communities affected. 
cc @nodejs/release 
For v4.0.0 I did the reverse and generated the post before the release, perhaps it's a special case because I did a writeup in there as well and maybe it'll be useful to generate this after the release is cut.  We edit the changelog on the stable branch we're releasing for and then cherry-pick that back to master, I'd like to see this be a normal part of the release procedure so we should be able to assume that master has an updated changelog but for safety I think fetching it from the tag of the release would be better, e.g.: https://github.com/nodejs/node/blob/v4.0.0/CHANGELOG.md - that way you don't need to know what branch we're on (`v4.x` in this case), you just use the existing information you have about the version number. 
Thanks! Will change it to fetch changelog from the tag instead.  Is it safe to assume that `https://nodejs.org/dist/index.json` will contain the latest version or should it be provided as a command line argument instead? 
that file is updated _as soon_ as the person releasing has run the release commands 
> that file is updated as soon as the person releasing has run the release commands  Alright... Added the ability to specify version with an argument aswell, just in case you or someone else wants to create the post _before_ the version has been released again.  Created a PR to fix what has come up so far, although I'm all ears about more improvements. 
@phillipj ok so... I want to add a little blog bit to the changelog this week too, if possible. Do I just run this before the release? Do the binaries have to be in /dist/ first? ....? 
@Fishrock123 yes, adding content by hand is absolutely possible. The last step (c) in the flow results in a file being created `./locale/en/blog/release/v<VERSION>.md` which you can modify as you wish before commiting / pushing. It's not added or pushed automatically, so no worries.  > Do the binaries have to be in /dist/ first?  No, the binaries themselfs are not verified. Although the list of shasums is fetched from `https://nodejs.org/dist/v<VERSION>/SHASUMS256.txt.asc`, if it doesnt exist the entire script will fail.  I could easily avoid that crash and leave a placeholder for you to insert shasums manually instead? 
Just pushed a fix with a placeholder instead of crashing due to invalid shasums, making it easier to create these posts **before** releasing a new version.  Did the script provide any value to you while releasing v4.1.0 @Fishrock123? 
It was too late by the time the builds were done so @rvagg did the blog part.  > On Sep 17, 2015, at 8:35 AM, Phillip Johnsen notifications@github.com wrote: >  > Just pushed a fix with a placeholder instead of crashing due to invalid shasums, making it easier to create these posts before releasing a new version. >  > Did the script provide any value to you while releasing v4.1.0 @Fishrock123? >  > — > Reply to this email directly or view it on GitHub. 
Alright. I'll merge the changes I've done so far in #164 to be ready for future releases. 
here's an improvement I'd like @phillipj, I'd code this up myself if I had time, perhaps I will if nobody else gets to it by the time I get frustrated enough to do it: check to see if all of the binaries are available before putting links to them. This could either be done by doing a HEAD request to their respective URLs or even just parsing the SHASUMS256.txt contents. Where they don't exist on the server replace their links with "_Coming soon_". This should normally only apply to ARMv6 builds but has been common enough when doing io.js builds that it's been standard practice to not wait for them before promoting the release. 
Sure thing @rvagg!  So to avoid confusion; all the files will be listed in SHASUMS256.txt, but they might not be available on /dist/ yet?  And how should this affect the list of files when you are running the script **before** the release, meaning SHASUMS256.txt wont exist either? 
SHASUMS256.txt will reflect what's in /dist/, it's taken directly from that directory so it'll always be accurate.  re doing this before a release, I'm not really sure how best to handle that because it's such a different workflow. How about for now we optimise for the run-after-release case and adapt later if it gets in the way. 
I have fixed binary verification locally now. Waiting for #157 / #172 getting merged before opening a PR to avoid a merge conflict mess. 
Where does the author field come from? I thought the release notes were automated? 
It will be automated soon, I'm working on it.  On Thursday, 8 October 2015, Mikeal Rogers notifications@github.com wrote:  > Where does the author field come from? I thought the release notes were > automated? >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/issues/156#issuecomment-146348727 > . 
Closing this issue for now as all tasks has been completed and merged. Open separate issues for further improvements. 
I must say, I prefer either 4 spaces (or _gosh!_ tabs), because they make nested code easier to read (we're all getting older!). And I have objections against dropping semicolons. Otherwise, our `.eslintrc` should cover the same rules as "standard".  But if everybody else prefers adapting that particular coding style, I will need to get used to it. ;) 
> because they make nested code easier to read (we're all getting older!).   Real talk: I find more than 2 spaces difficult to read, so both ways. :P  > And I have objections against dropping semicolons  Meh. I gave up on this ages ago.  I don't care so much for "standard" per say, but here's a style guide I wrote for express that is quite similar: https://github.com/jshttp/style-guide/blob/master/javascript.md 
@fhemberger we can consider Sindre Sorhus's XO style. https://github.com/sindresorhus/xo - 2 spaces for indentation, but can be tweaked - USES semicolon 
I'm a 2 space, no semicolons kinda guy, though whatever works for everyone is fine with me. 
The important things for me are having rules in place and linting as part of Travis runs / `$ npm run test`.  Which set of rules doesnt really matter to me, as long as they're enforced automatically. Cleaning up others linting errors is truly a tedious task.  That said, standard is okey with me :+1:  
The nice thing about standard style is that we don't have to have this debate 😊  On Tuesday, September 15, 2015, Phillip Johnsen notifications@github.com wrote:  > The important things for me are having rules in place and linting as part > of Travis runs / $ npm run test. >  > Which set of rules doesnt really matter to me, as long as they're enforced > automatically. Cleaning up others linting is truly a tedious task. >  > That said, standard is okey with me [image: :+1:] >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/issues/157#issuecomment-140455289 > . 
We should also make sure to have a styleguide, which encompasses JS, handlebars templates and stylus as well. 
For those looking for the documentation (on Ubuntu, at least), it's here: https://github.com/nodesource/distributions#installation-instructions 
Hmm, these instructions were not part of the old nodejs.org website, but it's a good idea to add them.  EDIT: Ha, found them: https://github.com/nodejs/node-v0.x-archive/wiki/Installing-Node.js-via-package-manager, also https://github.com/nodesource/distributions/blob/master/README.md 
@fhemberger Glad it's back. Two issues, however: - the 'Other Downloads' link on the main node page (under the green download button) does not take you to the same page as the 'Downloads' link at the top of the page, which makes finding these instructions difficult. - these instructions reference `v0.12`, not `v4.0.0`. 
Thanks, things are pointing now to `v4.0.0`. 
@nodejs/website shipable or a bad idea? 
Well, at the moment, we don't have any code to test on Travis CI, and linting may soon be replaced by JS "standard". 
So we dont want to run standard linting with Travis? 
I think [pre-commit](https://npmjs.org/package/pre-commit) is a better way to handle this. 
Hmmm, got to admit I'm no hooks-fan as it will always leave room for someone to not have them in place, even with that pre-commit dependency in place since we cant enforce `$ npm install` on people.  I would be more than happy to have non-critical things run as a hook, such as **only** code style checking. standard does more than that though, checking for undefined variables etc which could cause serious issues. 
Well, if you want to build and test your changes, you have to `npm install` at one point. Even if someone doesn't do this and their PR gets accepted, the following commit (hopefully) will trigger `standard`. I have created a PR for that: #172.   At the moment, the site is deployed on commit. So even if you have a "failing" travis badge, this would not stop the site from being deployed, unless we use the deploy hook on Travis CI (@rvagg is it possible to use that for the site without much of a hassle?)  So ideally, we could also combine our two PRs. 
Good point about any commit triggering a deploy anyway. Possibly using Travis webhooks would be great :+1:  
uh, I've never tried, I have [github-webhook](https://github.com/rvagg/github-webhook) that we're using for nodejs.org and iojs.org but don't have anything similar for travis 
We could use the `after_success` step (http://docs.travis-ci.com/user/customizing-the-build/) to trigger `github-webhook` in this case. Necessary secrets can be stored encrypted in `.travis.yml`: http://docs.travis-ci.com/user/encryption-keys/ 
FYI keeping this open as I'm writing some tests for `./scripts/release-post.js` ATM which could benefit from this. 
Cool. If you're done with the tests, can you take a look at the merge conflict, so we can get this merged? 
Absolutely! Will fix it as soon as #193 lands :) 
> Absolutely! Will fix it as soon as #193 lands :)  On second thought, I pushed a fix now as we dont need to alter `package.json` anymore, which avoids further conflicts. 
As #193 gives us tests to run for the first time (yay!), I'm merging this as well. Thanks! 
🎉  @mikeal does the nodejs org have Travis CI credentials to hook this up? 
@phillipj it would be the @nodejs/build WG that would have those credentials. 
Awesome! Could anyone in @nodejs/build with permission to this repo, please enable the Travis CI service? 
doesn't need @nodejs/build afaik, everyone here with "Owner" should be able to do this if you just log in to Travis. I've done it now, see if it works. 
@maxogden Correct me if I'm wrong, but isn't this better covered by https://nodejs.org/dist/index.json? 
Perhaps we should link to that json on this page? 
@Fishrock123 the data you linked is that data that is used to render the table, so it's the same thing 
@maxogden see also https://github.com/nodejs/build/issues/151 which is related to your gist 
lgtm, I quite like the idea of this number becoming part of user-base consciousness as it's pretty important 
Can someone please add a little note on the table, what "NODE_MODULE_VERSION" is supposed to mean? Have you checked the table layout on small screens as well? 
we could just call it "modules version", that'd be consistent enough:  ``` $ node -p process.versions { http_parser: '2.5.0',   node: '4.1.0',   v8: '4.5.103.33',   uv: '1.7.4',   zlib: '1.2.8',   ares: '1.10.1-DEV',   modules: '46',                         <————   openssl: '1.0.2d' } ``` 
Or just "Modules", it seems confusing but with a footnote it might make sense:  > ‡ "Modules" refers to the ABI (application binary interface) version number of Node.js, used to determine which versions of Node.js compiled C++ add-on binaries can be loaded in to without needing to be re-compiled. 
@rvagg :+1:  
Rod's comment seems good. 
Updated:  <img width="1093" alt="screen shot 2015-09-19 at 9 47 26 am" src="https://cloud.githubusercontent.com/assets/39759/9977193/77d427de-5eb3-11e5-90bf-702ce111be77.png"> 
alright, updated. should be good to go 
Yaaay! Thank you! ^____^ 
great work! I love that this is first-class, thanks @maxogden  
Updated with @Fishrock123's suggestion:  ![selection_034](https://cloud.githubusercontent.com/assets/126482/9892286/39ea9726-5bc2-11e5-970a-94323f768d30.png) 
`+    return semver.satisfies(version, '>=1.0.0 <4.0.0') ?` not quite, 3.3.0+ does `docs` .. I'll manually add a symlink for 3.3.1 but a better solution might be to make a redirect for everything on iojs.org so this isn't necessary.  beside that, lgtm 
LGTM with Rod's nits. 
Updated to use `docs` for all io.js releases as per @rvagg's new rewrite rules on the io.js website. Should be good to go 
Cool, thanks! 
LGTM  Linking with #152 
We were planning to add localization to the nodejs.org website as we had on iojs.org - how about adding your translation under `content/cn`, so releases, template and css fixes always stay up to date for the Chinese version as well? nodejs.cn could redirect to nodejs.org/cn/ as well. 
Pinging @nodejs/iojs-cn as well. 
@fhemberger +1 
Yep, follow the iojs.org way. 
Good point. 
working on it, the new site thinks 4.0.0 is the latest but it's atually 4.1.0, it'll be fixed in a minute 
fixed 
Fixed in #170 
I like the improved readability :+1: Would be nice to get rid of the 3 merge commits though 
Is there any clean way to do that ? I'm creating a new PR https://github.com/nodejs/new.nodejs.org/pull/170 for now though.  
> Is there any clean way to do that ?  git rebase is the key :)  Your new PR seems to have a better history, closing this one then. 
@phillipj I guess I can't mess it up anymore 🙈 let's merge it 
Thanks! 
512 is the GPG signing hash, not the file hash 
@rvagg As this is not the first time this question comes up, is there a way to express this better in the release post?  e.g: Shasums (GPG signing hash: SHA512, file hash: SHA256): (block of shasums) 
Hijacking this issue: @phillipj, I'd like to make a little change to the release posts and script:  **Before**  ![](https://cloud.githubusercontent.com/assets/153481/9952374/2acfdb10-5dd5-11e5-8a09-ca87d44e5d37.png)  **After**  ![bildschirmfoto 2015-09-18 um 07 00 27](https://cloud.githubusercontent.com/assets/153481/9952377/337aa7f4-5dd5-11e5-9224-3ea3c1d3dd30.png) 
@fhemberger :+1: 
LGTM 
`.eslintrc` could be deleted aswell 
Removed `.eslintrc`. 
@nodejs/website Should we merge this? 
+1 
:clap:  
LGTM  Cant find `300` anywhere else in the .styl's which should make that weight removable. 
Alright, removed the `300` weight. 
Linking this with #200 
Is this problem solved @fhemberger ? 
answering myself: looks like this issue is stale. 
@stevemao As we now have Stable/LTS everywhere on the site, we're good. 
@phillipj Just fixed that. Can you please have a look if it works now? 
Works like a charm, good one! :+1:  
@nodejs/iojs-ko review please. :3 
I'm done. 
@nodejs/iojs-ko Can I please get a +1 from you? 
+1  
@marocchino are you planning to add https://github.com/nodejs/new.nodejs.org/pull/176#discussion_r40045665 as well, or are we good to merge? 
oh, It's not a review. GTM. :3 
I'll give +1 to this. :) 
Okay, merged.  
Good catch, but better make it `[@nodebotanist](https://twitter.com/nodebotanist)` 
Agree, updated. 
Cool, thank you! 
Font flash can take quite long on mobile (even over wifi), that's the reason I used the webfont loader. It has an impact on performance. 
Hmm, the woff2 font files are just 11Kb for each weight, while that script alone is almost that size before gzip. Maybe another option would be to use a font stack with just locally available fonts to avoid webfonts altogether. 
I'm using the same font on my own website, this is my fallback font stack: Source Sans Pro,Open Sans,Roboto,Helvetica,Arial,sans-serif; 
Some nice fonts, but Open Sans and Roboto can probably be removed there, as it's highly unlikely the user has them installed locally.  What were you trying to achieve with `webfont.js`? The rendering of the fallback font before the webfont download had finished? (Only webkit browsers hide webfont-text before they are downloaded afaik) 
Roboto is a default font on Android devices.  webfont.js removes the FOIT (Flash of Invisible Text) on both Android and iOS 
Dare I ask whether or not we need a webfont at all? Getting this perfect in regards to FOIT and FOUC seems doable with several nifty tricks, but is it really worth it? KISS by having a font which doesnt suffer from these FO**, glitches and no performance impact sounds tempting.. 
Agree with @phillipj, Some Helvetica/Arial font stack ought to be good enough and it avoids all the mentioned issues. 
Been taking a look at font stacks using only local fonts and came to the conclusion that you are pretty much left to only Arial and Helvetica, so not sure it's really an option if we want to retain a hip font.  @fhemberger Care to re-evaluate the perf on this change? It's a huge improvement in how solid the site feels on desktop, and perf can't be _that_ bad on mobile I assume. I wonder if our mobile traffic volume really urges us to favor mobile over desktop. 
We good to merge this? 
I'd like to keep the webfont loader instead of going directly for the CSS. You get almost entirely rid of the Flash of Invisible Text, which can be a huge blocker on mobile (up to several seconds on slow connections). This way you can read the entire website even if the webfont loader is still working in the background. And once all fonts have finished loading, the updated style gets applied, which is really fast.  Helvetica itself is not optimized for screen, but it's a default font on OSX. The new San Francisco should be added to the font stack as well. And I'm pretty happy that the times of websites being only available in Arial, Verdana or sans-serif are over. 
Well, then you should investiage why font caching is broken and the webfont is requested on every page load. https://github.com/nodejs/new.nodejs.org/pull/139 and https://github.com/nodejs/new.nodejs.org/pull/69 don't seem like the right approach to me. I have no experience with webfont.js, but I'm pretty sure it's not used correctly.  
I can't find anything online about caching in webfont.js. This script is used in the same way by Google, TypeKit, etc. and the webfonts there don't use browser caching as well. 
The only issue I see with the current usage is that you're using a a local instead of a global variable for `WebFontConfig`, but changing that apparently does nothing for the issue.  Also, caching does work from the looks of it. The issue seems to be caused by script evaluation delay and another delay when the script decides to fetch the font, which while cached still takes a moment.  I still think we should remove that script. These fonts are just 11kB transfers per weight, while the script adds around 7kB gzipped. 
> This script is used in the same way by Google, TypeKit, etc ..  You know which websites they are using it on by any chance? The Google sites I've seen with fancy fonts are usually ones that initially render a blank page / progress bar, than suddenly pops in after a while - not at all what we're doing in other words.  Didnt dig too deep into [typekit.com](https://typekit.com), but there's no doubt it suffers from bad FOIT.  @silverwind has some good points here, script evaluation and in practice side stepping the browser's cache isnt good. This reminds me why I'm not a fan of traditional single page apps, but that's a whole other story.. 
@phillipj Loading the webfont CSS in the header blocks the rendering of the entire page until the CSS is loaded/parsed. To avoid this, you have to use workarounds like [loadCSS](https://github.com/filamentgroup/loadCSS).  Some recent articles on the topic: https://viget.com/extend/the-font-face-dilemma https://www.filamentgroup.com/lab/font-events.html https://helloanselm.com/2015/using-webfonts-in-2015/ 
@fhemberger yepp, sure know about the impacts &lt;script&gt; and &lt;link&gt; has on page rendering.  Since you mentioned google and typekit, I was trying to find _any_ website from any of those two, which uses webfonts and has all the quirks to make this work, while not being a single page app with a loading screen. 
I'd still like to land this, by the way. The flash of the default font on every page load is just too annoying. Compared to the current Webfont approach, we'd load 14kB more font data in a blocking manner, but its a one-time cost and chances are good that the user has the font already in cache. 
+1 to fixing the jumping....drives me insane 
> The flash of the default font on every page load is just too annoying.   Agreed.  TBH I'm not sure a custom font provides a site like nodejs.org much value. Its main purpose are providing Node.js to the people and relevant documentation/resources. I'm convinced our visitors would have been just as happy with a regular font. But that's subject to another PR I guess. 
Landed in https://github.com/nodejs/nodejs.org/commit/aa4b373526fd3feb2c30bd6271e2872001e56c05. I hope I'm not stepping on any toes here, but the general consensus seemed to be in favor of this change. 
I would say: Let's link the official Docker image in Downloads, put the how-to articles you mentioned under Docs. 
yeah, nice, perhaps just link to https://hub.docker.com/_/node/, although I have the following concerns: 1. that doc needs updating, it's very 0.10-focused, only mentions 4.0.0, not 4.1.0 and still links to the old docker-node repo location. 2. docker images aren't updated automatically on release, it takes a PR, merge (and push to hub?) which afaik takes at least a day, so I'm not sure links from the download page would be accurate when we have new releases. Perhaps we can find a way to reduce the time gap? 
Good points @rvagg!  I'll make sure the Docker image docs gets updated asap. Regarding the push to Docker Hub we can automate pretty much everything from our end when a new release is cut, but it ultimately has to go through a PR to the official registry - which has to be approved manually. 
RE: The PR to the official registry  Maybe it's time to talk to Docker about seeing if we can automate that process? 
What the state of this? 
Sorry for the delay on this one, I have been working on getting some of the issues mentioned here solved. - [x] Updated Docker Image examples to use Node.js v4 (docker-library/docs#374) - [x] Updated Docker Image repo links to new repo (docker-library/docs#374) - [x] Updated README for nodejs/docker-node repo (nodejs/docker-node#53)  Should I propose a PR this repo to try to get this onto the downloads page? 
Thanks! 
Looking at `git shortlog -s -n` with contributions > 1:  ```    175  Frederic Hemberger     43  Mikeal Rogers     20  Phillip Johnsen     19  Rod Vagg     13  Sean Ouimet      8  Jeremiah Senkpiel      7  Divjot Singh      5  Austin Winstanley      5  Ben Noordhuis      5  Evan Lucas      4  &! (bitandbang)      4  Thomas Jensen      4  MassimilianoMura      3  Rich Trott      3  Yosuke Furukawa      3  Max Ogden      2  paulgrock      2  andygout      2  Chayoung You      2  Francisco Baio Dias      2  Elin      2  Trent Oswald      2  Steven Sinatra      2  Steve Mao      2  rnsloan ``` 
In core we consider people with only a single commit as well. If it's more than a trivial change we onboard them as a committer. 
Also, this might be a little more useful since it's got people's GitHub usernames https://github.com/nodejs/new.nodejs.org/graphs/contributors 
Ok, I'm not sure if we need any "onboarding" here, the website is pretty easy to contribute to and the guidelines are written up.  Any objection to adding: - @bogas04  - @AustinWinstanley  - @evanlucas  - @JungMinu - @Trott - @tjconcept - @thefourtheye - @yosuke-furukawa - @MassimilianoMura - @maxogden - @yous - @xicombd - @andygout - @mrkiffie - @rnsloan - @diagramatics - @stevemao - @PatrickHeneise - @paulgrock - @srl295 - @lpinca - @bentinata - @hoxoa - @Delapouite - @s3ththompson - @narqo - @csabapalfi - @marocchino - @targos - @silverwind - @simonmcmanus - @brycebaril  - @elinnet - @wonderdogone - @fabiosantoscode 
Happy to join :+1:  
I'm quite happy if I can help :+1:  
Would be my pleasure to contribute again. 
I would love that :) 
Happy to join :smile: Thanks 
:+1:  
+1 
:+1:  
:+1:  
:+1:  
Thanks 
[image: :+1:]  On 8 October 2015 at 09:28, Patrick Heneise notifications@github.com wrote:  > Thanks >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/issues/181#issuecomment-146455671 > . 
I'm happy to help. 
:+1:  
I'd love to help. 
Thanks! I'm open to joining :] 
@fhemberger waiting to get a nod from you before I add everyone :) 
Thanks for readding me! +1 
@mikeal I still feel a bit uncertain giving so many people commit rights to master (not because of any of the contributors, I simply don't have any experience with this kind of setup). Is it possible to set up some kind of GitHub workflow? (e.g. changes need to be introduced as PR and need another person to merge them.)  With the next step of adding all translators to the website repo as well, we would have more than 50 people. What do you think? 
@fhemberger ah, I had assumed that we brought over the contribution policy from core but it looks like we are missing it :)  The policy for core is that nobody can merge their own commit, everything is a PR :) I'll send a PR to our README for that. 
@fhemberger Ah, I agree. Too many cooks spoil the broth :D I contribute (though I check most of the PRs) only time to time. So, I would like to opt-out. 
@mikeal Great, thanks.  
Awesome news! Glad to be part of the project. Thanks a lot.  ##   Divjot Singh http://bogas04.github.io/ Computer Engineering Undergraduate Netaji Subhas Institute of Technology, University of New Delhi  > On 08-Oct-2015, at 5:03 AM, Mikeal Rogers notifications@github.com wrote: >  > Ok, I'm not sure if we need any "onboarding" here, the website is pretty easy to contribute to and the guidelines are written up. >  > Any objection to adding: >  > @bogas04 https://github.com/bogas04 > @AustinWinstanley https://github.com/AustinWinstanley > @evanlucas https://github.com/evanlucas > @JungMinu https://github.com/JungMinu > @Trott https://github.com/Trott > @tjconcept https://github.com/tjconcept > @thefourtheye https://github.com/thefourtheye > @yosuke-furukawa https://github.com/yosuke-furukawa > @MassimilianoMura https://github.com/MassimilianoMura > @maxogden https://github.com/maxogden > @yous https://github.com/yous > @xicombd https://github.com/xicombd > @andygout https://github.com/andygout > @mrkiffie https://github.com/mrkiffie > @rnsloan https://github.com/rnsloan > @diagramatics https://github.com/diagramatics > @stevemao https://github.com/stevemao > @PatrickHeneise https://github.com/PatrickHeneise > @paulgrock https://github.com/paulgrock > @srl295 https://github.com/srl295 > @lpinca https://github.com/lpinca > @bentinata https://github.com/bentinata > @hoxoa https://github.com/hoxoa > @Delapouite https://github.com/Delapouite > @s3ththompson https://github.com/s3ththompson > @narqo https://github.com/narqo > @csabapalfi https://github.com/csabapalfi > @marocchino https://github.com/marocchino > @targos https://github.com/targos > @silverwind https://github.com/silverwind > @simonmcmanus https://github.com/simonmcmanus > @brycebaril https://github.com/brycebaril > @elinnet https://github.com/elinnet > @wonderdogone https://github.com/wonderdogone > @fabiosantoscode https://github.com/fabiosantoscode > — > Reply to this email directly or view it on GitHub https://github.com/nodejs/new.nodejs.org/issues/181#issuecomment-146366943. 
Ok, https://github.com/nodejs/new.nodejs.org/pull/224 this is based on the governance proposal I put up yesterday. Rather than a "TC" model we have an "admin group" which is elected by the full WG. The obvious candidates at this time would be the top 4 or 5 contributors, but we'll need to do that election shortly after we add all these members :) 
Thanks! I'm definitely open to helping more. 
Great @mikeal! Very happy to get more people on board :) 
:+1:  
Great, thank you! 
Well, I have to thank my friends from [SO Python Chat room](http://chat.stackoverflow.com/rooms/6/python), especially @DSM054 @ztane @kms70847 @Ffisegydd @morganthrapp @joferkington who helped me put this one together :-) 
I'm no Tor expert, how can I reproduce this issue? Trying TorBrowser now and havent seen a CAPTCHA anywhere on nodejs.org yet.. 
@phillipj it does not happen 100% of the time for me. My hunch is some Tor exit nodes seem to trigger CAPTCHA's (perhaps due to IP reputations or such) others do not. Here is what I see through one of my Tor circuits  ![nodejs-tor-captcha](https://cloud.githubusercontent.com/assets/48677/10096376/47e3362e-6371-11e5-860b-090b58bff892.png)  I believe CloudFlare has a sliding scale that determines when to show CAPTCHAs. I've found the only way to not make this show up for Tor is to have it at the lowest! It would be much appreciated by Tor users :-) 
@rvagg could you have a look at the CloudFare firewall settings?  https://support.cloudflare.com/hc/en-us/articles/200170096-How-do-I-turn-the-CloudFlare-captcha-challenge-page-off-  Some background on the captcha protection: https://support.cloudflare.com/hc/en-us/articles/203306930-Does-CloudFlare-block-Tor- 
fair 'nuff, we're not doing ecommerce or anything, turned off(ish) 
Awesome. Thanks @rvagg @phillipj :+1: :smile:  
Any thoughts on dropping `--format` for now @fhemberger? 
Sad to see it go, but you're right … we should remove it for now until the bug is fixed. 
Merged and I used this for v4.1.1. I had to fix the ARMv7 link to make it `armv7l` (missing `l`) but it worked aside from that.  I did a couple of extra things for this release that are not covered by the script: - removed the `##` header of the release, I don't think we need it given that all of that information is contained in the metadata of the post - added `author: Rod Vagg`, it would be nice to automate this, we could either use the GitHub API or just web scrape to look up the release tag (`v4.1.1`) and find the commit for that tag and look at the author behind the tag (you can get the `git.name` which is probably the best one to use here). Another alternative is to scrape the README @ https://github.com/nodejs/node/blob/v4.1.1/README.md#current-project-team-members and look at the username / name mapping and match that against the username included in the CHANGELOG.md `##` heading. Or .. just hardwire a mapping in the script here might be easiest! - added a bit of summary text at the top, but this doesn't need to be automated and often won't be there  great work on this though! 
Thanks! I'll add two tasks for the improvements you mentioned. 
Could we rename the repo (#147) first @nodejs/website? 
Yes, we'll merge this as soon as #147 is resolved. 
@marocchino as this is ready to be merged, any chance you could resolve the conflicts? Looks like the change in `locale/en/security.md` has already landed. 
@phillipj did it.  
Thanks! :+1:  
you caught a tiny window where we just released v4.1.1 and v4.1.0 was still "latest", try again at nodejs.org and you'll get an accurate link  @nodejs/website I'm thinking that instead of using "latest" we should use the version number, this isn't the first issue reported with this problem, there's a few minutes delay (at least) between the switch of "latest" and a website rebuild. 
I see it. Great job. 
@rvagg I just fixed the link on the home page. 
nice 
Ok, fixes pushed. 
Haven't worked with tape before (usually using hapi's [lab](https://github.com/hapijs/lab), which includes code coverage as well), but I'm fine with whatever works. And as you are the first one who wrote tests at all, I'm grateful for having them. ;) 
Thanks for the update! 
Thanks! 
Thanks, this looks great!  <img width="488" alt="skjermbilde 2015-09-26 kl 18 40 29" src="https://cloud.githubusercontent.com/assets/1231635/10118846/ec9c3400-6483-11e5-89c8-6e7ea7941946.png"> 
Cool. 
/cc @nodejs/documentation  
This documentation is actually stored in https://github.com/nodejs/node/blob/master/doc/api/buffer.markdown. Would you be interested in opening a pull request to fix that? I went ahead and opened an issue at https://github.com/nodejs/node/issues/3223 
Thanks! 
Absolutely, I would like to give it a shot :+1: 
Landed with dd24e0a0c63e62910c7c48ad81708417b64842fa 
Will there be changes to https://nodejs.org/dist/index.json? 
cc @nodejs/evangelism   @mikeal can we bring anyone from foundation-level marketing in to discuss this? 
@phillipj perhaps a `lts` column/field in index.json and index.tab would be good, it could include the codename for lts releases 
@rvagg sounds like a good plan. I'll could do some tests with that in mind for scenario 1, probably in the weekend / early next week.  For scenario 2, as long as file structures on /dist/ stays the same and we find it in index.json, no changes would be needed for us. Although adding some hard coded LTS strings around could be helpful to emphasize it, e.g. `Current version: v4.x.x LTS` on the frontpage 
From an Evangelism perspective, there shouldn't be much of a problem. Weekly or twice-weekly tweets, as well as listing of updates in blog posts, are easy. However, will we be attempting to pull people in to either using or contributing to LTS? Will it have independent contributors, outside of core? 
Alright, to get the ball rolling I'll post some screenshots with some minimal changes necessary to host _two_ release lines at the same time. All kind of feedback is much appreciated!  I'm thinking we should keep it as simple as possible to download the version of node most devs will use, which I've been told is `stable`, soon to be v5.  On the frontpage an LTS-link could been added beneath the big green download button, sending users directly to e.g. https://nodejs.org/dist/v4.2.1/.   ![screen shot 2015-10-15 at 21 19 42](https://cloud.githubusercontent.com/assets/1231635/10525570/c2808778-7385-11e5-9981-045c40c5e992.png)  As for the download page, a couple of links could be added to do some JS toggling of the URLs in the download matrix. An explanation of what LTS is and its pros/cons should also be added, either as a new section on the download page, or a completely new page which explains the release lines in great detail with content provided by @nodejs/lts as mentioned in https://github.com/nodejs/LTS/issues/44.  ![screen shot 2015-10-15 at 21 39 14](https://cloud.githubusercontent.com/assets/1231635/10525576/c78239d8-7385-11e5-80ec-05511653c5a1.png)  Any thoughts? 
I would much rather see the two releases side by side with clearly marked download buttons for each rather than having LTS behind some easily overlooked small link text. On Oct 15, 2015 12:58 PM, "Phillip Johnsen" notifications@github.com wrote:  > Alright, to get the ball rolling I'll post some screenshots with some > minimal changes necessary to host _two_ release lines at the same time. > All kind of feedback is much appreciated! >  > I'm thinking we should keep it as simple as possible to download the > version of node most devs will use, which I've been told is stable, soon > to be v5. >  > On the frontpage an LTS-link could been added beneath the big green > download button, sending users directly to e.g. > https://nodejs.org/dist/v4.2.1/. >  > [image: screen shot 2015-10-15 at 21 19 42] > https://cloud.githubusercontent.com/assets/1231635/10525570/c2808778-7385-11e5-9981-045c40c5e992.png >  > As for the download page, a couple of links could be added to do some JS > toggling of the URLs in the download matrix. An explanation of what LTS is > and its pros/cons should also be added, either as a new section on the > download page, or a completely new page which explains the release lines in > great detail with content provided by @nodejs/lts > https://github.com/orgs/nodejs/teams/lts as mentioned in nodejs/LTS#44 > https://github.com/nodejs/LTS/issues/44. >  > [image: screen shot 2015-10-15 at 21 39 14] > https://cloud.githubusercontent.com/assets/1231635/10525576/c78239d8-7385-11e5-80ec-05511653c5a1.png >  > Any thoughts? >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/issues/200#issuecomment-148504034 > . 
Yes, my first preference is that if you don't choose carefully you end up with the LTS release.  ie unless you know what you are doing and know that you want the latest/greatest you end up with an LTS release. 
> I would much rather see the two releases side by side with clearly marked > download buttons for each rather than having LTS behind some easily > overlooked small link text.  Understandable. I appreciate when website are focused on the most important part(s) which should be relevant for the majority of users. On the other side, we cant really predict what our users really want before seeing the download figures, although we'll ofc influence those numbers by just having one button from the get go. 
Could there be something user focused like: "looking for updated solid and stable? → LTS • want to try out the latest features? → latest"  So try to switch based on the users self identification. 
Thanks for your input so far! A couple of new screenshots:  #### 1) Two green buttons side by side  <img width="456" alt="skjermbilde 2015-10-18 kl 22 09 47" src="https://github-cloud.s3.amazonaws.com/assets/1231635/10566394/6f22ed10-75e6-11e5-8ab7-ce65632165e8.png">  #### 2) User oriented texts w/links  <img width="495" alt="skjermbilde 2015-10-18 kl 22 15 10" src="https://github-cloud.s3.amazonaws.com/assets/1231635/10566395/74165b72-75e6-11e5-8ba9-ddd44c258372.png">  If I misunderstood your thoughts @jasnell @srl295, just say the word and I'll happily do some changes.  Anyone got a favorite amongst those two alternatives? 
I prefer the first one. People tend to skip reading the "small print", so IMHO it's better to have some big shiny buttons in this case. 
+1 to the first one. I like it a lot.  
+1 to big buttons 
+1 Buttons, can we maybe get some hover text? 
Also, maybe we should have some slightly different coloring associated with them. 
How about moving some of the text from 2 into the buttons ?  Maybe the "Solid and Stable"  for LTS and " Latest features" for Stable  
![screen shot 2015-10-19 at 19 02 23](https://cloud.githubusercontent.com/assets/1231635/10584737/fb5f73fe-7693-11e5-855a-76bec0dbb5fe.png)  Would that cover your needs for some hover text @Fishrock123? 
Maybe. But we need to change it from having a `stable` in each.  Perhaps we should have the lts description be how many months it's supported? 
(the stable branch is **stable**) 
Possibly "Solid and Supported" for  LTS ?  
Again, the stable branch is most definitely supported. :)  I think we need wording about the longevity of the LTS's support, not about it's supposed stability compared to the stable. 
> I think we need wording about the longevity of the LTS's support, not about it's supposed stability compared to the stable.  Sounds like something @nodejs/lts could help us with. 
How about:  LTS: "Mature and Dependable" Stable: "Active Development", or "Latest Features" is fine too. 
Sometimes these things have a small but colorful "button'/link below that sais something like "trying to decide which version you need?"  that takes them to a place where they can understand the difference between the two and choose wisely. I don't like the idea of them navigating to another page for this but maybe simply a little drop down model(or whatever those are called) that explains in a few lines. 
Went with "Mature and Dependable" and "Latest Features" for LTS and Stable respectively in #260.  These taglines and other methods of explaining LTS/Stable differences should be discussed and iterated on going forward. As the v5 release is getting dangerously close (I assume), I think its time to merge the proposed changes ASAP, to ensure users of node.js **can** download these different versions as soon as they're available. 
@phillipj  / all - should there a link to some text such as https://github.com/nodejs/LTS/  if users need more help? I'm seeing lots of confusion on twitter :(   Maybe "Unsure of which version?"   Examples: - Tomcat: [Which version?](https://tomcat.apache.org/whichversion.html) - Python: [Wondering which version to use? Here’s more about the difference between Python 2 and 3.](https://wiki.python.org/moin/Python2orPython3) 
> should there a link to some text such as https://github.com/nodejs/LTS/ if users need more help?  Yes, it would be great if we could do a better job helping people choose version! Might be worth trying to resurrect the stale discussion in https://github.com/nodejs/LTS/issues/44. 
..yepp, Travis works now :dancers:  
+1 
Other than my comment this LGTM 
Awesome, thanks! :+1: 
/cc @nodejs/documentation  
I would suggest treating it as code, going for a more code-like approach:  ``` css     font-size: 0.8em;     color: #E54305;     background-color: #f2f5f0;     padding: 4px; ```  ### My suggestion:  ![asdf](https://cldup.com/MVFljwmewM-2000x2000.png) 
+1 
I don't really like the italic thing. If anything, that disassociates it with being code, in my mind. I like the second suggestion. Keeping a basic, monospace look, but with some highlighting would be good. A subtle background-color box might work too. 
+1 to @inooid. Would green be a better choice, given the branding? 
Is there still the issue with readability? The design has improved a lot since September 2015. 
Now it's pretty good, imho. Thanks. 
I think it's fine to push those straight to master in the future without creating a PR first. Not much to review here anyway (and they have already been published). 
In the future these will likely be posted as "drafts" and edited by the evangelism WG. These can get posted right away because they already went through that in the old repo but I've sent a PR to change that process so that they get posted directly here. 
:+1:   On the other hand, we have some issues her and also in the old nodejs/iojs repos about docs, but I seem unable to find the current repository to turn them into PRs. It would be super helpful to talk to someone from @nodejs/documentation to sort this out. /cc @phillipj  
Yupp, getting some insights into where docs are generated would be awesome! Tried pinging folks in #121 without much luck. 
+1. Anybody else have feedback on this? If you have the time, leave a comment, no matter your opinion, so we can know the proposal is reaching you! 
Oh ya, I did this :) evangelism and documentation have write access :) 
@yosuke-furukawa I've also added your name :) 
@JungMinu Thank you!!!  
Node isn't following the odd/even thing anymore, just pure semver. 4.1.1 is the latest and greatest and you should be using it in preference to 4.0.0. The 1 in the middle means that there were some feature additions and sometimes these will be fairly minor. Have a look at the changelog for items marked SEMVER-MINOR.  See https://medium.com/@nodesource/node-js-is-semver-8b3938ae8d24 for details.  
Thank you rvagg.  I was led down this path because nvm showed 4.1.1 as unstable.  After updating nvm it is no longer unstable but showing stable.  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.28.0/install.sh | bash source ~/.bash_profile  nvm list        v0.10.38 ->       v4.0.0          v4.1.1 default -> 4.0 (-> v4.0.0) node -> stable (-> v4.1.1) (default) stable -> 4.1 (-> v4.1.1) (default) iojs -> N/A (default) 
@rvagg I enabled the message banner for the critical security update on the homepage: ![](https://cloud.githubusercontent.com/assets/153481/10294460/b786ff32-6bba-11e5-8c22-abe5ea678eee.png)  This can be toggled in [build.js:184](https://github.com/nodejs/new.nodejs.org/blob/master/build.js#L184) 
hey hey, nice, @nodejs/release be aware that we have to turn this off for the next release 
Thanks for spotting this! 
You're right, thanks for adding this. 
@fhemberger I wonder, why [Travis build is failing](https://travis-ci.org/nodejs/new.nodejs.org/builds/83863996)? 
@bentinata Don't worry, it's not related to your PR. Restarting the build fixed it. "Go home, Travis, you're drunk!" 
+1 here on the Copyright transfer. We'll work to get that sorted with legal folks so it can transfer from Nodejitsu to the foundation.   What are thoughts on putting this in a separate repo and including it as a module? 
@indexzero this repo is already setup for auto-deploy and has a localization system attached, and will soon have localizers and doc writers as write access members. It's going to get pretty complicated to do an additional repo with all of that. Not to mention this repo has contributors already making style improvements and whatnot. This is the path of least resistance for sure. 
Great stuff! This'll really help to seed the Docs WG content. I'd be happy to help out with that todo list. :smile:  
@Qard go ahead and send pull requests to the knowledge-base branch to help out :) 
@mikeal 10-4. We'll follow-up offline about the next steps w.r.t. copyright transfer. I assume this will be a topic at the November 2nd board meeting? 
Please also check how this content relates to #217, #218. It's a bit confusing at the moment. 
@mikeal @indexzero Is there any progress on this? Would love to hand this over to @nodejs/documentation. 
@fhemberger agreed. Nodejitsu would love to hand this over to @nodejs/documentation as well! I believe the next step here was for this to be discussed during the last foundation legal WG call. I do not sit on the legal committee, but I know @mikeal is aware of the minutes. Hopefully he can give status.  Due an unavoidable work conflict at GoDaddy next Monday I will have to miss most of the Node.js Foundation board call.   _@mikeal if this will be part of the public or private session I will make myself available at the pleasure of the board while it is discussed._ 
hey @indexzero I think it would help if you could add an MIT/BSD compatible license to the original work on https://github.com/nodejitsu/docs/ 
@mikeal done. It is now MIT. https://github.com/nodejitsu/docs/commit/a4800be5a70b1c8a356772a7907cdabf851ec42e 
werd, ok, we can merge this now. we'll work out the details of the copyright transfer later, now that it's permissively licensed we can put it in the tree. 
Resisting the urge to push the "Merge" button so hard at the moment. All sentimental. Holding off for the final ok from @fhemberger: are we good to go here?  
@indexzero @mikeal Should we merge it without the Handlebars templates, so @nodejs/documentation can integrate the docs into their content structure first?  I want to avoid adding redirects later. 
@fhemberger Nodejitsu plans to redirect all traffic from http://docs.nodejitsu.com to the final pages on the nodejs.org site so we will have to do the redirect dance a little no matter what.   Obviously once is better than twice, we could move this into a "draft" area if one exists where it would not get rendered or served yet. Given how old these tutorials are that's probably the best way to approach this: stage them somewhere and publish them one at a time as they are reviewed for correctness. 
Our staging area at the moment is called "push it without linking it on the site" ;) 
@fhemberger great. So this can be safely merged then? 
@indexzero I had to fix a few things: - the missing 'docs-menu' partial in `layouts/docs.hbs` and `layouts/knowledge-base-index.hbs` was breaking the the build. - I excluded the knowledge base index file from the listing and fixed markdown headlines in two documents - I removed "Downloads" (linking to Node.js 0.4.1 ;)) and 'Hosting, Conferences and More!' (we have a event listing already and some links were broken). I hope that's ok for you. 
Merged via d02b8a2. 
\o/ 
You can use collections for that:  ``` js .use(collections({       knowledge: {         pattern: 'knowledge/**/*.md',         refer: false       },     … ```  In a template you can then iterate over the collection:  ``` {{#each collections.knowledge}} <li><a href="/{{../../site.locale}}/{{ path }}/">{{ title }}</a></li> {{/each}} ```  We already do the same for blog posts, TSC minutes, etc. 
Oh, cool. Good to know. Sorry, I'm a bit of a noob to metalsmith.  What about the tag grouping idea? Is there collection nesting? It'd be nice to have a more automated way to group and sort the knowledge base docs.  I'll take another pass at it in the morning. :smile_cat:  
We created different sub-collections for the blog as well:  https://github.com/nodejs/new.nodejs.org/blob/master/build.js#L68  I haven't checked all the new docs yet, so I can't tell you what grouping makes sense. Will try to have a first look later. 
The knowledge base md files have both folder structure arrangements and tags. Both of which will probably change a bunch over time, so manually defining each collection like what has been done with the blog is somewhat un-ideal. I'll do some digging to see if there's a better way. 
+1 this is the existing structure from the nodejitsu docs. Even if we want to alter the structure it would be less work to shift a few things around and maintain the folder structure. 
The "knowledge base" thing overlaps with the docs wg plan of having "guides" type docs. My thought was that those would probably get merged eventually. 
Ya, should probably merge the guides in at some point. Not sure if there are any format differences. 
The docs wg has less stuff currently, so it might make the most sense to make it conform to the knowledge base format. I've opened some PRs to port the docs commits over here. The tracking issue for that is here: https://github.com/nodejs/docs/issues/44 
I tried the layout approach. Not too sure about the sidebar code duplication though. 
Related to #211 (waiting for ok for copyright transfer), thus flagged as 'do not merge' for now. 
actually, we _can_ merge this because it's against the knowledge-base branch and not master. 
Yep, if you are satisfied with it, feel free to merge. Otherwise, let me know if you want any further changes. :) 
Merged into `knowledge-base` branch 
Linking with #199 
+1 
This should be logged against npm, not against the Node.js website :) 
@nodejs/documentation @nodejs/website Can I get a LGTM, just for good measure? :) 
Should it be linked to from the docs section right away? 
Now we have PRs for adding pages as docs, meta docs, guides, topics and knowledge base. This is confusing for the users (at least it is for me now). I think having less categories (and/or a clearer structure) would be a better approach.  Otherwise LGTM. 
The intent is for there to be separate sections for different types of docs: reference, guides, topics and meta (which is about developing node itself). This was what the Docs WG had decided on back at NodeConf. Do you feel differently? We're always open to feedback. :smiley_cat: 
Sorry, didn't get the Docs WG memo. Is there a doc/issue on this topic you can point me to? It's hard to trace back decisions that were made at a conference. :wink:  How is this related to the Knowledge Base discussed in #211? I know this is content originally coming from Nodejitsu, but as a new user coming to the website I would probably have a hard time to decide what the difference between "Knowledge Base", "Guides" and "Topics" is. 
The original idea is mapped out in the trello board linked in https://github.com/nodejs/docs/issues/1. 
As for the Knowledge Base stuff, that hasn't really been discussed yet, but I agree that it overlaps a lot. I suspect the articles from it might get divided up into our topics and guides sections eventually. 
@Qard Thanks for the link! 
@Qard I'd like to merge this. Can someone please add a link to the website? @bnb offered to take care of this (https://github.com/nodejs/new.nodejs.org/pull/254#issuecomment-149642697). 
@fhemberger I'll do it. Just add the link in the other issue? 
It should be fine to just merge this and leave linking to it to another PR. 
@nodejs/documentation @nodejs/website Can I get a LGTM, just for good measure? :) 
+1 
The only thing I would add here is that the links to API docs are all linking to iojs.org, which was because at the time, nodejs.org did not have modern API docs. This should probably be changed, and now's a good time. 
Ah, yep. I'll fix that. This was just a quick port of the commits. I didn't really look too closely at the content, since it had already gone through review on https://github.com/nodejs/docs. 
Nice! Any plans for listing these guides? A completely new section or under docs maybe? 
@phillipj yes, I think a 'Guides' section would be great for these kind of things. I had basically the same idea over at https://github.com/nodejs/docs/issues/42. 
The original plan for the docs wg, discussed back at nodeconf, was to sort docs into topics, guides and reference. We kind of dropped the ball on coordinating with website to figure out how this stuff would all appear though, which is what I'm working on fixing now. :smile_cat:  
Looking forward to having these resources on the website :+1:  @Qard so lets merge this content now, and figure out the best way to group/present them later in a separate issue? 
Ok, it should be ready now. I just had to fix some links.  I'm good with merging and starting another PR to sort out linking to this content. 
Now we have PRs for adding pages as docs, meta docs, guides, topics and knowledge base. This is confusing for the users (at least it is for me now). I think having less categories (and/or a clearer structure) would be a better approach.  Otherwise LGTM. 
Merged, although it's not linked on the site yet. 
Sounds good, but are there people willing to commit to it? I haven't looked back at this repo since today, but last time I was around @therebelrobot was looking to hand leadership of the group over. I stood up, but wasn't able to commit - and there weren't many (any?) others that stood up. 
In practice myself and @fhemberger are merging most commits but there are at least 3 other people that are actively involved enough to fill out the admin group. 
+1 to this idea. I haven't seen to much disputed discussion since maybe the design discussions back in io.js days.  As for me personally, if regular meetings aren't needed, then I've definitely got more leeway for async admin work. Now that I've settled in to SF, I'll have more time to commit back into this project, just need to know where to jump in. If not though, I'm cool just working on the Website WG proper. 
@therebelrobot if you're in SF now we should meet up for a drink :)  This project has done very well without meetings and the meetings requirements in some other WGs have been a bit of a barrier for some contributors. The goal here is to a create a policy that doesn't require meetings and, if successful, can be a model for other projects to use. 
+1 to drinks :) Shoot me an email and we can get together.  I like the idea of this being the pilot program for contributing. It seems pretty reasonable for async work. 
Contribution process added. 
Thanks! 
That was the plan, yes. We wanted to wait until the English version was complete, which is the case now. 
+1. We need to start rolling out information about localization and how to handle it. @mikeal You were the key player in setting up the io.js localization - do you have any input on how we should start from here? 
We need documentation on where to start localizing, how to build, etc. We can pull inspiration from the io.js site. 
Oh, and those docs should land in the README. 
Opened a PR for adding localization instructions/config: #242  
#242 is merged. Can we close this now or do you want to keep this issue for further discussion/planning? 
Ideally, every translation WG should open an issue now, right? How about we ping them? 
@sup A collaborator can ping all their teams in the org. @fhemberger You have my +1. Do we need more +1s for this? If not, feel free to do it - I can do it if you'd like, too. 
I wrote a little script to add all localization team members from "nodejs/iojs-*" to the new team "nodejs/localization". It's way easier to mention everybody now. 
@mikeal I also wrote a little script to rename the iojs-\* teams to nodejs-*. I can't run it myself, as I'm not organization administrator: https://gist.github.com/fhemberger/bea66aedbdba7a441ea4 Maybe this helps. 
@fhemberger Its issue is too old so I think it should be closed.
Obviously Medium provides an audience that's looking for content, but are there any drawbacks to it? For example, SEO, getting flagged as duplicate content by services, and so on? 
As long as we can provide a canonical URL for Medium, this should be fine. 
We have pretty good metrics on both Medium and our own blog. Both get good traction, even when something is effectively on both. IMO we should post to Medium but only promote the link to _our_ blog on twitter and other social channels (which should also be automated). 
Okay, I get it. +1 for this.  
Hey. Is this considered fixed then? I would like to tackle this one. 
@raphaelokon This issue is still open, it would be great if you could look into it.  [FYI] Node.js on Medium: https://medium.com/@nodejs/latest 
@fhemberger Thanks. I just see that the posts on `https://nodejs.org/en/blog/`are not par with those on Medium. What is the proposed process for cross-channel publishing? Does the content strategy also include publishing security related news on Medium?  @mikeal I agree with that … social channels should only get the link to the blog post – `https://nodejs.org/en/blog/name-of-post`. The promotion of links could be automated though (I guess that is one of the things we are aiming for?) … so whenever someone publishes a Node.js blog post it gets mirrored to Medium and a link is posted to the defined social channels is dispatched. 
Worth reading … https://help.medium.com/hc/en-us/articles/217991468-Duplicate-Content-and-SEO 
@mikeal @bnb Is this issue still valid or has this been sorted? 
I'm closing this issue. On Medium, posts are written by the Node.js Foundation with a different focus than announcing releases (like on the blog here). So I don't think it makes sense to sync posts as they address different target groups.
SGTM. 
I wrote this a while back https://github.com/mikeal/webtouch it parses through a page, finds all links and validates those links and their links and all resources they reference, including resources in the CSS. 
Could you define smoketesting? Never heard that term before. Also, are you talking about using this with the overall collection of Node projects, or just those here in evangelism? 
A smoketest might start a process and verifies that it started and exited cleanly or still running after a short periode of time. I really like to smoketesting my webapps before deploy by starting it and doing a GET request against the frontpage or some health check URL. These trivial tests has saved me from deploying totally broken apps more than once.  One concrete example from this project, was one PR that had a syntax error in one of the .styl files, which made the static file generation fail horribly. ATM that is something we have to check manually before merging any PR.  The simplest smoketest I can think of is running the file generating and checking the exit code. Though using something like @mikeal's [webtouch](https://github.com/mikeal/webtouch) is alot more thorough and gives more confidence to collabs before merging anything to master. They could even be combined?  > Also, are you talking about using this with the overall collection of Node projects, or just those here in evangelism?  This website project only. 
Okay, that sounds good. Would implementing this be a good first contribution, or is it a higher level of skill? 
Absoutely a good first contribution!  On Saturday, 10 October 2015, &! (bitandbang) notifications@github.com wrote:  > Okay, that sounds good. Would implementing this be a good first > contribution, or is it a higher level of skill? >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/issues/225#issuecomment-147009911 > . 
Hi, I'm interested in helping out with this. I read up on webtouch and it seems simple and useful enough, bu when @phillipj said  > The simplest smoketest I can think of is running the file generating and checking the exit code.  For this repo/site, what would that be? Alternatively, perhaps an example of someone' repo with a smoke test could help out too. I'll keep looking into it as well. Thanks! 
We have an ongoing effort... http://github.com/nodejs/citgm 
@jasnell citgm is for core Node.js, right? I think this thread is about the website; to check if the PRs which this receives don't break the site in any way. 
Ooohhhh lol... Missed that small fact lol. Thanks! On Nov 14, 2015 8:45 PM, "thefourtheye" notifications@github.com wrote:  > @jasnell https://github.com/jasnell citgm is for core Node.js, right? I > think this thread is about the website; to check if the PRs which this > receives don't break the site in any way. >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/new.nodejs.org/issues/225#issuecomment-156779901 > . 
> For this repo/site, what would that be?  @sotojuan lets imagine someone opens a PR with a JavaScript syntax error, or using a stylus variable which doesn't exist. Those two scenarios will make the process exit with status code `1` if one tries to run the build script `$ node build.js`.  ``` bash # remove require('Metalsmith') from build.js → node build.js [metalsmith] build/static finished: 53ms /nodejs/new.nodejs.org/build.js:59   const metalsmith = Metalsmith(__dirname)                      ^ ReferenceError: Metalsmith is not defined ... → echo $? 1 ```  A good smoketest would be having a small script that actually runs `build.js` as above, and verifies the exit code equals `0`. Having that kind of test run automatically on Travis would be **very** valuable for us! 
The releases section may already be outdated. 4.2.0 may still drop this week. See: https://github.com/nodejs/node/pull/3258 
Also I'm wondering if the releases sections are good ideas here? We already do release blog posts. 
@Fishrock123 Thanks for your comment :smile:   > Also I'm wondering if the releases sections are good ideas here? We already do release blog posts.  @nodejs/evangelism What are your ideas? :smile:  
Some people see the weekly updates that don't see the release posts so we should at least mention that a release happened, and maybe just link to that release post, in each weekly update, but we probably don't need to go in to the detail that we were previously. 
@Fishrock123 It seems that 4.2.0 is aiming for Monday release. May I mention it in this weekly post? 
I agree that there should be less detail about the release. Just mention the release, make sure there's a link for people to get more information, and maybe mention the most important one or two things about it. Otherwise, "fixes several bugs" is a pretty good filler text for patch releases. 
The news about Red Hat should have a link to the press release or something with more information. Here's one you can use: https://www.redhat.com/en/about/press-releases/red-hat-joins-nodejs-foundation 
@Trott I've updated based on your comments. 
I wonder why CI isn't happy 
@JungMinu Travis is drunk. Don't worry. 
@fhemberger Thanks :) 
LGTM, can we merge it? 
I'd love to :+1:  
Bam! :boom: :smile:  
+1. Looks fine to me. I read the other issue, looks like covers what can we can do at the moment. 
Should we start using large file storage for this stuff? 
I just added around 15 small files and optimized the images' compression before checking them in. That's all. 
I'd be more than happy to join! :) I'll definitely be watching and contributing going forward, although I cant promise to be just as responsive, as I've had more spare time than usual the last two months. 
Is there a lot of docs stuff that's going to move to this repo? Might it make sense to consider a docs representative? @chrisdickinson or someone else in that WG? 
+1 to all those. Also, I think @therebelrobot has demonstrated that he is capable of aiding in the type of decisions that the Admin group would be making. 
Ah yes, @therebelrobot is a contributor who contributed heavily to prior repositories and didn't show up in the top list for _this_ repo. Any objections to @therebelrobot being added to the Admin WG? 
We should set a time frame for this, so we can roll it out. Close and add proposed admins (with support) on Friday? Or sooner? 
fwiw I only want to be able to have the ability to merge my stuff for releases, other than that I'd go through the standard process and prefer more active WG members to merge my PRs 
Is there still need for an admin group, if so are we waiting for more supporting votes or is it good to go? 
Closing, we got this in. if you want to nominate anyone else please create a new PR. 
Thanks! :+1:  
Looks like there's a failure in the slug test. 
> Looks like there's a failure in the slug test.  Great! Didnt touch that code at all, and it passed after a couple of Travis restarts. Dont see any apparent reason for it to be unstable, we'll have keep an eye on that slug test. 
weird, should probably log another issue for that test being flaky. 
@nodejs/release I just pushed an update to this PR, supporting version policy and codename aswell, as a response to #239.  Also removed version policy from the blog post slug, as I dont see the big value of it, other adding more complexity into this script. Agreed @nodejs/website? 
Merging this now so author will be part of the next release post. 
Btw the page of blog posts with these changes gets **crazy** long. Adding some kind of pagination later would be great! 
@phillipj Here is a pagination plugin for metalsmith: https://github.com/RobinThrift/metalsmith-paginate.  IMHO it would be nice to split blog posts into two groups: - Posts of the current year, using the long format proposed by this PR - Older posts, using the simple listing we had so far  both paginated. What do you think? 
Nice, I'll have a look at that plugin @fhemberger :+1:  
I noticed that the summaries also contain the anchor links form the titles in the blog posts which I'm not sure is desirable. In addition, some of the posts have a significant document structure which doesn't really translate so well to a summary.   Here is a screenshot for reference: <img width="1125" alt="blog post summary screenshot" src="https://cloud.githubusercontent.com/assets/2323810/10481620/0fc7f382-7272-11e5-8813-b7b8f946142b.png">  I'm not sure if stripping the tags would suffice as a complete solution, but it could potentially clean up the presentation.   Perhaps an alternate implementation would be to use cheerio to specifically extract paragraphs? 
Sorry for not getting any progress on pagination! I've tried different approaches with `metalsmith-paginate`, but can't get it working properly. Since I'm no metalsmith expert, time flies by while trying to wrap my head around what's happening and debug :( 
Soooo... Basic pagination works now. It also exludes some specific tags to clean up the summary presentation as suggested by @mrkiffie.  ![skjermbilde 2015-11-18 kl 11 17 42](https://cloud.githubusercontent.com/assets/1231635/11238501/7306a648-8de6-11e5-937a-7301c0369c44.png) 
> IMHO it would be nice to split blog posts into two groups  @fhemberger sounds like a very good idea! Would you consider it critical for the first release of this redesign or could post grouping be added later? 
I think it might be easier to start with a pagination by post year. Afterwards, try to get a different format for the current year. I have to look into this first, haven't had much time lately to look at the website issues here. 
I assume you mean easier for the end-user? As technically I'm guessing we would have to create a custom metalsmith paginator plugin for that, which doesn't sound simpler.  On Wednesday, 18 November 2015, Frederic Hemberger notifications@github.com wrote:  > I think it might be easier to start with a pagination by post year. > Afterwards, try to get a different format for the current year. I have to > look into this first, haven't had much time lately to look at the website > issues here. >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/nodejs.org/pull/232#issuecomment-157675823. 
Alright, I've been playing with this again. Started working on a metalsmith plugin which paginates by year. After seeing how many blog posts we have per year, it quickly became apparent we cannot show  summary for all.  Some quick stats:  ``` 2011 had 48 blog posts 2012 had 59 blog posts 2013 had 55 blog posts 2014 had 25 blog posts 2015 had 76 blog posts ```  Currently working on display summary for the latest 10 blog posts per year, but only titles for the following posts. Hopefully be up-n-running by the end of this week. 
All finished and ready to go. Ended up creating https://github.com/phillipj/metalsmith-yearly-pagination to do most of the grunt work.  PTAL 
ping @fhemberger / anyone, got any thoughts on this? Just updated the PR description with up-to-date info and three screenshots.  I'd like to either merge or close this as it has been hanging around for quite some time now. 
@phillipj can you remove the standard list style formatting? i think it looks too 'vanilla html' 
@sup sure, just pushed the changes and updated the screenshots 
yup, absolutely looks good to me! this has been mocking me for a longer time now, didn't know there was a PR for it. but from my side, we can merge 
@phillipj Looking at the screenshots and briefly scanning the code, it seems to be a neat solution. Sorry, I don't have much time for a deeper review ATM. So if no one objects, go for it. 
Thanks for reviewing! 
`anchorMarkdownHeadings/makes pretty slugs` when opening PR with unrelated changes #231. Fixed after two Travis restarts. 
Do we have any more details of the `anchorMarkdownHeadings/makes pretty slugs` test failure or steps to replicate? 
The short answer is no. Wasnt able to re-produce it locally, nor see anything unusual in the Travis logs. 
Can we increase the timeout for those tests (`t.timeoutAfter(ms)`) and see if the situation improves? Default seems to be 500ms, maybe Travis takes sometimes just a tad longer? 
TBH I would like to see timeouts occur, before trying to increase the test timeouts. The regex code related to making these slugs should _really_ not use more than 500ms.  Very sorry I didnt copy the Travis output when it was failing :disappointed:  @fhemberger I've seen you commenting some PRs with "ignore the errors, Travis is drunk". Do you remember which tests were failing in those cases? 
I have some experience with unknown travis fails with some bigger project (https://github.com/ajoslin/conventional-changelog/commit/40ab546af99b230d1ec0a43e86605ee7786e9dcf and https://github.com/ajoslin/conventional-changelog/commit/104b3aae5d65e2fc73b7cbee48ff5f56050a50e8). I believe it might be travis own problem. Timeout might not be the issue (I've increased twice). The worse part is the error message doesn't tell much and it's hard to replicate :( 
Closing this for now, lets open it again if unstable tests starts showing again. 
Ah, because they just got updated to node-v4.2.0-linux-x64.tar.gz  mmmm, how do I deal with that in an automated setting? 
@bw-theo-omtzigt if this is from an automated process, don't use `latest`, query http://nodejs.org/download/release/index.json or http://nodejs.org/download/release/index.tab first and then jump directly to the file you want. 
We can probably remove this whole banner now. 
@jasnell just changed the banner text to include LTS and link to the release blog post instead with f0c4fcd787d5412e28b24801ff65 
LGTM 
Picky picky picky...:-) LGTM 
LGTM. Merging now that 2 owners and 2 collaborators saw it. :) 
Is there a good document that describes LTS and the difference between v4 and v5? 
@mikeal I believe nodejs/LTS#44 is the right place from where such document should appear.  BTW, if anyone interested, for me personally, [this article by @rvagg](https://nodesource.com/blog/essential-steps-long-term-support-for-nodejs) is an example of what this document should describe. 
aside: https://www.npmjs.com/package/periodic-table 
LGTM 
:+1:  
I'll do a fix in the release post script for future releases. 
Can you provide some description of what the issue is rather than throwing a random link? 
I believe they are reporting that the URL pulls up an index of the directory, which is often reported by security scanners and the like as a security issue. In this case, though, I don't think it is. I think it's a feature, not a bug. 
I'm thinking we might need to put a a simple index.html in there because (a) we keep on getting these reports from folks who think it's a problem and (b) it's still a primary result when you google "node download" or "download node.js" or similar, regardless of the robots.txt (if anyone has a suggestion for fixing this other than an index.html for that page then please let us know!). 
I too like the browsability of the downloads folder, it's a simple way to access old versions. There's things like the empty `test` folder that should probably be cleaned up.  Of course, it'd be nicer if google would point to https://nodejs.org/en/download/ when seaching for `nodejs download`, but we probably need to do some SEO for that. 
I have pinged my SEO friend about the problem. Will report back his thoughts. 
Here's my angle on this: when I was a younger developer, there were programming language/framework/whatever sites that used a directory instead of having a page. This was pretty discouraging as a newcomer, as I didn't really know what to do with this structure that I'd never seen on the web before.   It was frustrating when there were just two software versions + 32/64 bit versions + Windows/Mac/Linux versions. This directory is much harder than that - to get to the latest Node release, you have to pick the right folder (release) and scroll all the way down to the arbitrary location of the latest version in the middle of the page. Very poor usability. 
Here is the advice I have received on stopping this from appearing in search results. 1. Remove the robots.txt block on /download/  2. Pass a [noindex X-Robots-Tag via the HTTP header](https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag?hl=en) ( this is assuming you don't have an index page on https://nodejs.org/download/ , if you do you can use a meta robots tag `<meta name="robots" content="noindex" />` in the `<head>` )  3. Use the [no follow link attribute](https://support.google.com/webmasters/answer/96569?hl=en) for all links that points to https://nodejs.org/download/ from this website. ( eg in your navigation or wiki, etc )  @rvagg do you want to just stop this from appearing in search results or additionally stop this being flagged up by people who think it is a problem by plugging it with an index.html (personally i share @silverwind 's view, but I have no idea how often this comes up) 
We've had 3 or 4 reports of this now (perhaps more via other mediums) by people who think it's a problem and the reason is because they are finding it via google:  ![screen shot 2015-10-28 at 9 58 17 am](https://cloud.githubusercontent.com/assets/495647/10775193/90d138ec-7d5a-11e5-9b32-809c759804bb.png)  That search really should go to https://nodejs.org/en/download/ instead because it's the place where we can guide them through the selection process. 
Made a start on this https://github.com/rnsloan/new.nodejs.org/commit/aaf435494420d1bd01749ca4a4d94f71d22d0ca5  @rvagg you still want these two directories inside `/download` to be crawled?   robots.txt:  ``` Allow: /download/release/latest/ Allow: /download/release/latest/docs/api/ ```  I am unsure if they will end up supplanting the current top search result. Might be best if we try removing all of `/download` from being crawled. 
server config needs to go in https://github.com/nodejs/build/blob/master/setup/www/resources/config/nodejs.org  and yeah, I'm fine with disallowing all of /download, the api docs get served from /api anyway. 
Once this nginx config change is deployed https://github.com/nodejs/build/pull/231 I will create a PR to update `robots.txt`. 
Thanks! 
Are you still working on this? If so, I think we should restart the list on the base translation file - I don't think we want/need all the io.js ones (correct me if I'm wrong!). 
Do you want me to modify this once it is accepted, or do you want me to comment on it as-is? The former would probably be better in terms of modularity of issues. 
I say we merge it, although we're going to have to update most of those links soon since the locale groups are going through name changes. 
@mikeal Fair enough, I wasn't too sure on how to include those there. 
You missed some repos for localization.  ``` [iojs-ar](https://github.com/nodejs/iojs-ar) [iojs-bg](https://github.com/nodejs/iojs-bg) [nodejs-ko](https://github.com/nodejs/nodejs-ko) [iojs-ms](https://github.com/nodejs/iojs-ms) [nodejs-ta](https://github.com/nodejs/nodejs-ta) ``` 
LGTM, please add the groups @outsideris mentioned and we're good to go. 
Real quick, what country exactly is `nodejs-ta`? I couldn't find anything. 
@sup: Not a country, it's the language Tamil: https://en.wikipedia.org/wiki/Tamil_language 
Alright, it should be good. 
Great, thanks! 
+1 
Great, thanks! 
could you try again please @thedufer, they _should_ be good to go now 
I'm seeing the same issue.  After a curl, it just hangs trying to connect:  ``` > curl -vvv -6 http://nodejs.org/dist/ * Adding handle: conn: 0x7fbaca804400 * Adding handle: send: 0 * Adding handle: recv: 0 * Curl_addHandleToPipeline: length: 1 * - Conn 0 (0x7fbaca804400) send_pipe: 1, recv_pipe: 0 * About to connect() to nodejs.org port 80 (#0) *   Trying 2400:cb00:2048:1::6814:162e... ```  Eventually it just times out.  Both http and https work with the `-4` flag and time out with the `-6` flag. 
Fails directly for me (http and https), `-4` works fine:  ``` curl -vvv -6 http://nodejs.org/dist/ * Adding handle: conn: 0x7fea32806a00 * Adding handle: send: 0 * Adding handle: recv: 0 * Curl_addHandleToPipeline: length: 1 * - Conn 0 (0x7fea32806a00) send_pipe: 1, recv_pipe: 0 * About to connect() to nodejs.org port 80 (#0) *   Trying 2400:cb00:2048:1::6814:172e... * Failed to connect to 2400:cb00:2048:1::6814:172e: No route to host *   Trying 2400:cb00:2048:1::6814:162e... * Failed to connect to 2400:cb00:2048:1::6814:162e: No route to host * couldn't connect to host at nodejs.org:80 * Closing connection 0 curl: (7) Failed to connect to 2400:cb00:2048:1::6814:172e: No route to host ```  curl 7.30.0 (x86_64-apple-darwin13.0) libcurl/7.30.0 SecureTransport zlib/1.2.5 
Works for me  ``` $ curl -vvv -6 http://nodejs.org/dist/ * About to connect() to nodejs.org port 80 (#0) *   Trying 2400:cb00:2048:1::6814:162e... * connected * Connected to nodejs.org (2400:cb00:2048:1::6814:162e) port 80 (#0) > GET /dist/ HTTP/1.1 > User-Agent: curl/7.26.0 > Host: nodejs.org > Accept: */* > * additional stuff not fine transfer.c:1037: 0 0 * HTTP 1.1 or later with persistent connection, pipelining supported < HTTP/1.1 200 OK < Date: Fri, 16 Oct 2015 17:45:15 GMT ... ```  curl 7.26.0 (x86_64-pc-linux-gnu) libcurl/7.26.0 OpenSSL/1.0.1e zlib/1.2.7 libidn/1.25 libssh2/1.4.2 librtmp/2.3 
Ah, sorry. Works for me as well, IPv6 was disabled on my local router. :sweat: 
@thedufer Can you please check if the problem is fixed for you, so we can close this issue? 
Sorry for the slow response.  Yeah, it looks better now.  I think my most recent comment was after running while I was on a VPN that doesn't play nicely with IPv6, so that may have been a false negative. 
@mikeal Hmm, would it be enough to remove the entire "Repository Reconciliation Plan" section and the last paragraph [here](https://github.com/nodejs/new.nodejs.org/blob/master/locale/en/get-involved/development.md#release-process-and-branching-model)? 
@fhemberger +1. Two more things to consider, though: Is the stability policy up to date? And do we still need the transitions of io.js working groups? +1/-1 on these and I'll fix them, as well as any other changes that are submitted. 
yup, we should remove that. 
@mikeal comments on other suggested/questioned removals? 
Also: What about the open questions and notes at the end of the document? At least the last paragraph has to be rephrased/removed:  > _Within io.js_, the Binary Abstraction Layer of choice is currently NAN. Several of the Node.js contributors are not yet sure if NAN is the right choice. This will need to be decided at some point. _For now, I've abstracted the abstraction layer in this document._ 
I created a [new branch](https://github.com/nodejs/new.nodejs.org/tree/get-involved) with an updated version of this document: https://github.com/nodejs/new.nodejs.org/commit/6b2708bba5712caf8035b31d89906631b692bf8c.  @bnb @mikeal Can you please review the changes and add further updates? 
Updated the guide, closing this. If there are further changes required, please open a PR. 
LGTM, thanks 
Thanks! 
LGTM 
Aren't you linking your docs on the website somewhere? 
@fhemberger The plan was to make it part of a new guides section which does not yet exist. 
@fhemberger what do you think about adding a 'Guides' section right here:  ![screen shot 2015-10-18 at 6 47 23 am](https://cloud.githubusercontent.com/assets/115237/10562602/36679eb2-7564-11e5-9138-b51a8d89cab6.png) 
@silverwind Perfect fit, and we could merge the other guides as well. :+1:  
Merged, although it's not linked on the site yet. 
LGTM 
LGTM. Should we link this from the readme, just to be more explicit about its existence? 
Linking from the README and CONTRIBUTING should be fine for now. 
looks like a mistake? 
Submitting this here on the recommendation of nodejs/docs#45  cc @Qard  
LGTM. :+1:  
It'd be very handy. :+1:  
This looks awesome. LGTM 
@nodejs/website  @nodejs/benchmarking  
LGTM 
Merged, although it's not linked on the site yet. 
Thanks! What is the process for getting this linked from the website? 
@matthewloring Add a link to the website. ;) 
@fhemberger Where would the link be added? I can probably handle it if nobody else has the time/desire. 
@bnb Oh, that would be great! Create a new page "Guides" under "Docs" and add the link there.  Thanks! 
The plan is to have a directory page for guides, topics and reference pages. I just haven't got around to making it yet. A static page would probably be fine for now too, if you want to push that through. 
@bnb Were you able to look into including this in the website? I am happy to look into it but don't have any experience with the website code base yet. 
@matthewloring Sorry, I've had a lot on my plate the last couple weeks (family member had heart surgery). I can try to do this now. 
@fhemberger When you say create a new page "Guide" under "Docs", what _exactly_ do you mean? Sorry for being thick.  
@bnb Add the page to the navigation structure in `site.json` and to `/layouts/docs.hbs`. 
@fhemberger Thank you! :100:  
Thanks. 
Thanks! 
Have you been able to reproduce these failures by any chance? 
I've been able to replicate the `operator: fail` failure by reducing the timeout to single digits. I saw the following log that fails: https://travis-ci.org/nodejs/new.nodejs.org/builds/85753833  Locally I get the following:  ```   not ok 1 test timed out after 5ms     ---       operator: fail     ... ```  The error in the log is slightly different - `test exited without ending` instead of `test timed out ...`.  I'm hoping that specifying the number of plans will resolve the unexpected ending. 
Okey, lets give it a try and keep our eyes open for these failures.. 
This can probably be reverted as https://github.com/nodejs/new.nodejs.org/pull/265 is merged 
Closing this for now. Thanks for your offer, but so far we had no complaints from translation teams about that.
This update has to be tested, handling of contexts changed between Handlebars v3 and v4 (this could break some stuff). 
I believe the test coverage might not be enough. Handlebars v3 and v4 are quite different. 
@stevemao We only test (parts) of our scripts at the moment, we don't have any integration/visual regression tests at all. That's why I wrote the comment. 
I can see that. I think it is a bit hard to merge this. The time we spend on testing this manually might be the same as adding the tests. 
@nodejs/website To make sure the handlebars update doesn't break anything, I did a full build with v3.0.3 and diffed it to a build with 4.0.3 – luckily there were only three tiny changes necessary, so everything should be fine. 
Ignore the failing test on Travis, `standard` is doing weird things again. 
Nicely tested @fhemberger :+1:  
Just too clarify, this can be merged now rather than syncing with the release of v5.0.0. It was made that way intentionally as I noticed @rvagg commented (somewhere?) that whenever a new release got promoted to http://nodejs.org/dist, it automatically kicked of a rebuild of the website. 
+1, a solid job and indicates that LTS is important, too. 
I think it would be valueable for us to track clicks on these links. Any chance I could access to the GA stats for nodejs.org @mikeal? 
I'd like to see a simple explanation of LTS if we're to introduce both buttons. "What should I download" 
@jbergstroem would a couple of keywords like shown in [#200 comment](https://github.com/nodejs/new.nodejs.org/issues/200#issuecomment-149282667) suffice? 
> I'd like to see a simple explanation of LTS if we're to introduce both buttons. "What should I download"  In response to @jbergstroem and other similar comments in #200, I just pushed an update with @rvagg suggested taglines.  #### v4.2.1 only (before v5 exists)  ![skjermbilde 2015-10-28 kl 11 53 47](https://cloud.githubusercontent.com/assets/1231635/10787508/bb9fbdd4-7d71-11e5-809b-a7f890c2e625.png)  #### v4.2.1 and v5  ![skjermbilde 2015-10-28 kl 11 53 06](https://cloud.githubusercontent.com/assets/1231635/10787523/e1f94d1a-7d71-11e5-904c-971cacb75a37.png) 
+1 let's queue this up, aiming for a v5 release tomorrow, if that slips then next Monday or Tuesday at the latest 
Merged: e53ddb3.  I changed the wording from "Other LTS Downloads/Stable" to "Other Downloads: LTS/Stable". 
Nice @fhemberger :+1:  
+1, LGTM. 
@fhemberger @mikeal in regards to translation efforts, are you okay with having duplicate translation (and layout) files for the LTS and Stable download pages? The biggest advantages of doing this is possibly having different content on the these two pages and less JS trickeries. 
@phillipj I would prefer having a partial where you inject either `project.currentVersion.stable` or `project.currentVersion.lts`, e.g:  ``` {{> download-matrix version=project.currentVersion.stable}} ```  This would be much easier to keep in sync. 
@phillipj also, you can already add localization specific styles if what you nee to accomplish is doable with just CSS. 
@fhemberger good idea about using a partial :+1: Just pushed an update adding `download-matrix` 
@fhemberger I just fixed the merge conflict after you merged #260 
@phillipj Dang, just merged it (fixing the conflict). Can you please have a look if I merged the correct solution in 6007cb7461b31ab07df8c6348d4f383bd503b7cd? 
@fhemberger no worries, both versions of the conflict worked :) 
Nice, LGTM. 
Are all pages written with hard line breaks? If so, you're good - if not, you should remove all the hard line breaks in your document. 
made some updates. 
> Are all pages written with hard line breaks? If so, you're good - if not, you should remove all the hard line breaks in your document.  Other pages use hard line breaks 
@boneskull Links? All the ones I looked at randomly don't used hard line breaks.  Ref: https://github.com/nodejs/new.nodejs.org/blob/master/locale/en/blog/announcements/interactive-2015-programming.md https://github.com/nodejs/new.nodejs.org/blob/master/locale/en/blog/release/v4.2.1.md https://github.com/nodejs/new.nodejs.org/blob/master/locale/en/blog/weekly-updates/weekly-update.2015-10-16.md https://github.com/nodejs/new.nodejs.org/blob/master/locale/en/blog/feature/streams2.md 
@bnb any file in locale/en/about 
looks like the `.md` files need to be normalized one way or another.  but that's not part of this PR 
should I try to resolve the merge conflicts ..? 
@boneskull Yes, please. I'd like to merge this regardless of line breaks.  We don't have a policy for this yet and some pages use hard breaks and some don't. And as long as the page renders properly, I really don't mind. :smile:  
@fhemberger I've resolved the conflicts.  sorry took me awhile :smile: 
Sorry, took a while to merge this. Thanks! 
Should we be +1ing these? 
No, not really. This one is fine, it just allows paths to contain spaces when executing pre-commit hooks. (I raised the original issue :smile: ) 
unless it's a major release of the dep we should be able to merge it once CI passes. 
Just did some digging, and couldnt find any default timeout in tape at all. Made a simple test which waited for 5s before ending, which works as expected, no errors.  ``` js const test = require('tape')  test('no default timeout', (t) => {   setTimeout(() => {     t.end()   }, 5000) }) ```  In other words this change removes the timeout settings completely. That might be just fine, as the initial reason `timeoutAfter(500)` got there in the first place, was because we didnt want long test runs to fail the tests. 
:+1:  LGTM 
Have we ever broken something by not having this? 
I don't think so. I think its a general good practice to enforce this anyway? 
I'm not sure this is necessary...we don't have this on https://github.com/nodejs/node do we? 
This is relatively new so not many repos are doing it now. 
Well, it would go along with our [contribution guidelines](https://github.com/nodejs/new.nodejs.org/blob/master/CONTRIBUTING.md#accepting-modifications):  > All modifications to the Node.js code and documentation should be performed via GitHub pull requests. Only the Website Admin group can merge their own work and should do so with great care.  Might be worth a shot, I haven't tested this feature in detail yet. 
I believe this is necessary for all nodejs projects. @nodejs/tsc @nodejs/collaborators  
-1 (At least for for `nodejs/node`)  It's git, there's nothing to loose. Many of us have full up-to-date copies.  `nodejs/node` master is purposefully force-pushed to correct meta-data and other problems here and there, though there is a "within 10-minutes" [rule](https://github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md#i-just-made-a-mistake). This has been done on many occasions.  Moreover, it should definitely not be asserted as necessary. Force pushing exists for a reason. 
Keep in mind that force-pushing is _required_ to update Pull Requests, so people should have some understanding of it. 
> I believe this is necessary for all nodejs projects.  The only repo we auto-deploy is the website which is some justification for turning on additional restrictions although I don't think it's a good idea to add any potential barriers to contribution to solve problems we haven't actually experienced yet. 
@Fishrock123 sorry I didn't see "within 10-minutes" rule before (it's not mentioned in this repo). I would think node would forbid force push at all. If force pushing is required in the workflow then just ignore me :) 
Yeah, definitely -1 on this. 
It's not just a -1, it's a technical infeasibility. Release branches are regularly rebased. If this were to happen then either 1) these branches would have to live on an individual's repo or 2) a new branch would have to be created with the rebased commits. 
Also -1 from me. Disabling force-push is a hinderance in the rare case it is needed.  [Here's](https://github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md#i-just-made-a-mistake) the info on the 10 min rule. 
-1 also. Not a good idea, not necessary with git. [background on protected branches](https://github.com/blog/2051-protected-branches-and-required-status-checks) .     Following rules of governance is good though, so I appreciate the thought. There are too many exceptional cases, though. 
Ok, updated. PTAL 
Looks good now. :) 
Ooh, looking forward to getting these features natively :) 
Should we change this title to `ES 2015` since that is what the official spec is now? 
@evanlucas You are right … everybody still calls it ES6 for short. ;) What wording does v8 use? Just had a quick look but couldn't find anything. How about "ECMAScript 2015 (ES6)" (taken from MDN)? 
@fhemberger V8 team uses exactly what you are suggesting: http://v8project.blogspot.ch/ 
Ok, I'm adding it to the commit and merge it into the v5.0.0 release branch 
Merged to `v5.0.0`: 8564c4f, waiting for release. 
How could these v5 features be marked exclusively for v5? As the site now hosts _both_ v4 and v5, this ES2015 features page also has to take that into consideration. 
@phillipj Just add a second footnote "Only available in Node.js >= 5.x.x" 
~~test still fails~~ ~~/home/travis/build/nodejs/new.nodejs.org/scripts/release-post.js:223:1: Multiple blank lines not allowed.~~  ~~No idea why :disappointed:~~   The tests for PR https://github.com/nodejs/new.nodejs.org/pull/269 passed but the merge commit 056cddf fails for known reason. This should fix it though. 
@fhemberger do you have any idea why `standard` passed before? 
No, not really. Might be we ran into an edge case here. 
:disappointed:  
Huh, that's strange! Our use of pre-commit should have prevented my commiting linting errors _and_ Travis should have warned ofc.. :boom:  
@phillipj Same issue with #259  ``` standard: Use JavaScript Standard Style (https://github.com/feross/standard)    /home/travis/build/nodejs/new.nodejs.org/scripts/release-post.js:178:1: Multiple blank lines not allowed.   /home/travis/build/nodejs/new.nodejs.org/tests/scripts/release-post.test.js:213:1: Multiple blank lines not allowed. npm ERR! Test failed.  See above for more details. ``` 
Thanks @tako-black :) 
Here is another example of a non code preformatted tag https://nodejs.org/en/blog/uncategorized/ldapjs-a-reprise-of-ldap/ 
Thanks, these were old blog posts, so they used different a code formatting structure. 
cool, do you think there is any value in going through those old blog posts to add code tags with prism classes? 
@mrkiffie I just pushed a CSS fix, should be online soon (may take a while due to cloudfront asset caching). 
ok, I'll close the PR I opened for that same style fix. 
Much better, thanks! 
Resolved by 29bd3c0 
LGTM 
+1. LGTM. 
:+1:  LGTM 
Thanks … about time we rename this repo. 
:+1: to you both :) 
@rvagg You might want to update this in the nodesource docs as well (where this text was taken from). 
@nodejs/build Can someone please have a look at the Linux install instructions? Separate `npm` hay or nay? 
It's inconsistent because it actually is inconsistent across packagers. Many distros dictate that you can't install these things in a single bundle--one of the reasons that we bundle them together in the [NodeSource Linux distributions](https://github.com/nodesource/distributions) is because we think these rules are (mostly) stupid.  If Arch comes with an `npm` package and a `nodejs` package which includes `npm` as well (whyyyyyy????) then I suggest that you (1) contact the people responsible for this mess in Arch and suggest they fix it cause it's stupid and (2) open a pull request here to change the instructions to be accurate. I don't use Arch so I don't feel qualified to suggest a way forward here.  I'm pretty sure the instructions are correct for Fedora and EL because they have these same rules. But in those cases I'd just recommend you get your packages from a [better source](https://github.com/nodesource/distributions) anyway, but that's listed on the doc already. 
@laosb No, there is no automatic fallback to `en`. Also there isn't a language switch yet, because besides the Korean index page, there wasn't anything to switch to. :smile:  
@fhemberger So that means we will have a switch after we have a complete translation?   Waiting for +1s :smiley:  
@nodejs/iojs-cn Can you please review this? 
Seems that GitHub didn't redirect nodejs/iojs-cn to nodejs/nodejs-cn.  Waiting for reviews. @nodejs/nodejs-cn  
@laosb it redirects from nodejs/iojs-cn to nodejs/nodejs-zh-CN 
@stevemao Aha, I'm talking about **teams**, not **repos**.  Repo: nodejs/iojs-cn -> nodejs/nodejs-zh-CN  Team: nodejs/iojs-cn -> nodejs/nodejs-cn 
zh-CN and zh-TW are different. Why I can't see any tanslation? 
全是英文的，中文的路过 
@fengmk2 It might because I submitted all files including many untranslated ones. `site.json`, `index.md`, `404.md` and a part of `download/` was translated. Sorry for the inconvenience. 
小学生路过 
Because there are no further updates, I'm closing this and will open another one when the whole translation is ready. 
I like this idea. It would make adding additional items to the navigation much simpler.   I've had a look at the structure of the `site.json` and it currently doesn't contain anything that we could use to determine the order of the menu items.  Maybe adding an `order` property to the items could be used to achieve the desired ordering of the links in the secondary nav.  ```       "docs": {         "link": "docs",         "text": "Docs",         "es6": {             "link": "docs/es6",             "text": "ES6 in Node.js",             "order": 1         },         "faq": {             "link": "docs/faq",             "text": "FAQ",             "order": 2         },         "api": {             "link": "/api/",             "text": "API",             "order": 3… ```  Or perhaps we could restructure the data for the secondary navigation into an array - something like this for example:  ```     "docs": {         "link": "docs",         "text": "Docs",         "nav": [             {"link": "docs/es6", "text": "ES6 in Node.js"},             {"link": "docs/faq", "text": "FAQ"},             {"link": "/api/", "text": "API"},             {"link": "knowledge", "text": "Knowledge Base", "nav": […]}         ]     } ```  Either of these could provide what the data the Handlebars helper might need. 
The order of the menu items equals the order in the json. Please don't add more complexity than necessary. ;) 
I've always considered the ordering of objects to be somewhat volatile. I might be lacking in my understanding of the way node handles JSON objects.   My understanding is more theoretical based and I haven't gone into much testing.  Does node reliable maintain the order of properties within JSON objects?  > An object is an unordered collection of zero or more name/value pairs  > <cite> - [JSON RFC](http://www.ietf.org/rfc/rfc4627.txt)</cite> 
The sidebar's menu's have started to grow in complexity and have deviated from a simple list managed by the `site.json`.   This can be seen by the recent addition of dynamic links to the version specific API and customised markup - see #324.   I'm not sure if or how to continue with #409. Any feedback on this would be appreciated. 
Closed by #409 
Lgtm  
Merged 6b9515a2e418e07bd175d66ad2a2e0fefa2a632c 
LGTM 
I think this is a permission issue on your computer. Have you tried doing research on this? 
I believe following the instructions this would happen to any new linux user, until they were to send the sudo command. I know the password is usually cached for 5 minutes but sudo command is still needed to install the optional build tools if user is not su... If i am totally wrong I apologize!  
I updated the instructions based on the latest nodesource documentation (which is the basis for this document):  ``` sh # use `sudo` on Ubuntu or run this as root on debian apt-get install -y build-essential ```  Thanks for pointing this out! 
`const EventEmitter = require('events')` is actually the correct way of doing this now in v4.x  Refs: https://github.com/nodejs/node/pull/3509 
Thanks! 
Nice, deleting code == great success :+1: 
Nice, so this was finally fixed in `metalsmith-layouts`. :+1:  
do we need greenkeeper for devdeps? its quite noisy to generate extra commits. 
@stevemao good idea, agree these PRs are getting pretty time consuming aswell. Cant see any such options in the greenkeeper CLI, might be worth asking the authors about. 
:+1: @phillipj sounds good 
Good catch, thanks! 
Related: It would be great if that link could be to a web page rather than a PDF doc. But I totally understand that may be something not within our control. 
LGTM! :+1:  
@rvagg @phillipj How about merging #260, #261 and #268 into the v5.0.0 branch instead of master? So when the release is ready, we just need to merge a single branch. 
That seems like an ideal way to do it 
Other than the missing `author: Rod Vagg` field it LGTM!  @fhemberger IMO LTS/Stable buttons in #260 and #261 could be merged ASAP. Both has been written with this in mind, too reduce big bang release of nodejs.org as soon as v5 gets released. 
Added ES6 updates here, changes for download page and index are already merged. 
done, thanks folks 
@nodejs/iojs-it Please review the changes.  @markainick I just updated the home page with a couple of new labels, added them to the Korean version already: https://github.com/nodejs/new.nodejs.org/commit/4b54ff301e45ac2c1d636e821e8322af25715d95 Please add them to your translation them as well. 
I left few comments for better translation :-) 
index.md and site.json updated with your directions 
@nodejs/iojs-it Is this good to go? 
Just a little nit, the rest looks good. 
Other than 'download' looks good to me :+1: 
site.json updated 
Awesome. Thanks ;-) 
@nodejs/website translation is good here. Is this good to merge? 
LGTM 
:+1:  
FYI this broke the build task as `locale/it/site.json` had invalid JSON in it. Just pushed a fix in cd53b08. 
thanks @phillipj  
My bad, sorry about that @phillipj. 
Thanks!  @nodejs/iojs-ko Can you please review the changes? 
@yous Thanks, I've updated 
@fhemberger We reviewed it. 
^ is on the **frontpage** 
rod logged a better bug, closing as duplicate https://github.com/nodejs/new.nodejs.org/issues/298 
@rvagg looking through the code it checks if the version definition has {lts: true} which I believe comes from the build system. 
I'm on it 
thanks @phillipj, just push straight to master when you have something (IMO) 
nm, looks like the version def has {lts:false} so it's in the helper. 
Sorry about that, a unit test will follow shortly ;) 
looks like it got hot fixed :) 
good work @phillipj, looks great! 
+1 
LOL that was quick!!! I was wondering why and 10 mins later this was fixed :) 
LGTM :) 
`lts` fields are deleted. @rvagg can you rerun `npm run load-versions` :) 
LGTM 
I would like to add Node v5.0 release. is that too late?? 
@yosuke-furukawa Thanks, I'd love to :heart:  
@yosuke-furukawa Thanks, I've updated :smile:  
@JungMinu I think we should update Notable Changes for v5.0.0 
@yosuke-furukawa Thanks, I've done 
In general, I'd be inclined to not list release proposals and just list actual releases. So this would mean: - Remove the word `proposal` - Remove the 4.2.2 stuff and leave that for next week. (Maybe include an item indicating that LTS 4.2.2 is coming soon.)  That's all just my opinion, though. 
For the summary of 5.0, I think the breaking changes are actually not that interesting or notable for a news item. I would much rather emphasize exciting (or exciting-ish anyway) new features like the ES 2015 spread operator. 
@Trott Thanks, I've updated 
Cool. If you want something to replace the other breaking change item, maybe mention that 5.0.0 ships with npm v3!  Either way, :+1: and thanks for putting it together! 
@Trott Thanks, I added npm v3 
:+1: 
LGTM 
:+1:  
+1 if this is for devDependencies only. I'd like to stay up to date for our production deps. 
LGTM 
If you look at https://nodejs.org/en/docs/, we are providing API docs for [0.10.x](https://nodejs.org/docs/latest-v0.12.x/api/), [0.12.x](https://nodejs.org/docs/latest-v0.10.x/api/), the [current version](https://nodejs.org/api/) and in fact to all Node.js versions back to 0.1: https://nodejs.org/docs/. 
@rvagg Can we have a 'latest-lts' symlink for API docs as well? 
If you're going to support two versions of Node at the same time, you need to provide access to both APIs at the top most level of the web site, at the same time. If you're going to have two downloads for Node on your download page, you really need to have two APIs at the top most API page.  
Maybe we should have two API links in the aside on the docs page aswell? E.g: ![skjermbilde 2015-10-30 kl 14 17 13](https://cloud.githubusercontent.com/assets/1231635/10846610/3ebb85cc-7f11-11e5-95a5-9d277b47bedf.png) 
No, not closed.   This page needs to list both. https://nodejs.org/api/ 
Agree with @phillipj suggestion.  
Updated the title to be more productive. 
I'm not convinced that https://nodejs.org/api/ needs to have both. That link has always been to the latest current docs, since literally forever :)  Totally agree that the docs page needs to link to both.  Have we considered also linking to the API docs in the download page for each release and in the automated release post of each release? 
Reopening as I don't see the comment that closed this with links to new issues :( 
I very much disagree that "this has been this way forever" is an argument to keep things as is. In fact, it's an argument for the opposite - this was a _problem_ forever, esp. during the months when I couldn't upgrade, say, 0.8 to 0.10 (which reminds me I need to update my bookmark which currently points to 0.12...)  You have to consider the use cases. Most likely, I'm looking for the docs that I need to complete my work _this instant_. So a link to docs next to the download link is kind of useless - if my task is "find the docs for module X for version Y", am I expected to google "download version Y"? Not saying the link shouldn't be there - just that it's not enough.  The version switch needs to present and findable. Not sure how prominent it should be, but it does need to be in the header (e.g. a version dropdown next to "Index | View on single page | View as JSON" - just not sure if that's easily doable for historic releases - it could be solved via external JS with knowledge about versions or smth). I know I've seen some APIs do this... just can't find an example of the top off my head...  Also if by some sorry chance you're looking at an oooooold version of the docs, then a prominent warning a la "Hey, are you sure you don't want to go try the new stuff that young folks are using?" might be in order. I know I've seen some APIs do this too...  (does reopening this mean #307 can be closed?) 
Leave both open for now because we need more than just #307 and we can use this as a meta-issue for tracking all related issues. 
@dominykas IMO, the only reason we support "/api" is for backwards compatibility with old links. There's a lot of issues with it, the most important one being that it doesn't support localization of the api documentation. Whenever possible we're trying to move to pages within the new website to represent these resources so that they can be saner and localized.  If anything, I think that /api should be turned into a forward to either the latest LTS or Stable docs. That way at least the url is version specific. 
Oh. Right. Localization - that also needs to be a switch present on the page...   I'm not sure a redirect would be a good idea for ~~SEO~~ _users_ coming from search engines. An English doc with an LTS (or latest Stable) at a permalink URL is a _good_ idea. In general, a redirect is treated as a "don't lead people to this page" thing by search engines, which means that the SERPs would list results for some specific version, rather than a link to The Docs (this also depends on redirect type and `<link rel="canonical"/>`).  The "specific version" could be anything - but most likely, over time, it would become the most popular, most active version and a new release would not necessarily bubble up fast enough, since people would be bookmarking, sharing, i.e. passing link juice to the specific version and not The Docs and not to the current LTS/Stable. Having something at, say, `/de_DE/api` or `https://de.nodejs.org/api` would also make sense. Are there already any issues open on URL planning? (sorry, didn't have time for research just yet)  The switches in the docs pages can also have some sort of "my default" user preference, which allows you to set your preferred language and version. This would involve some trickery via the URLs when you need to see a non-default version, but it could serve all the goals - having clean URLs, having sane defaults, keeping old URLs working, but most importantly - allowing easy access to _the_ version of the docs one actually needs to complete the job at hand and go home to their families and friends. 
But you don't have a "current" anymore. You have a LTS release and a stable release, and they're both "current". And you're encouraging people to pick LTS for larger more complex corporate apps, and stable primarily for smaller, more flexible apps. Hence, one could say that "current" should be the LTS version, than.   So you can't forward /api to just one or the other. You'll need to create an API page with links to both.  
Hey, I already have the need to switch to older versions of nodes doc and, if not already opened, I would open that ticket.   Since many companies are working with node 0.x, developers will get wrong informations in a web search. I also worked with django some time and they know about that problem and included a prior version switch to their documentation pages. I would recommend this solution.   I would spend some time in solving it if you guys agree.   Cheers 
Screenshot of how Django does it (fixed position, bottom, right; expands on hover):  ![screen shot 2015-10-30 at 19 24 26](https://cloud.githubusercontent.com/assets/505619/10852896/f984bc96-7f3b-11e5-84bc-495059f62bc7.png)  They do have the version in the URL via redirect from root. 
I like Django's approach, but expanding on hover is "hidden necessary content". A person may not know they need to hover over the 1.8 documentation number to discover links to the other versions.   We don't need to be fancy. A new page at /api can list links to documentation for all supported versions (which would also include 0.x, since a version is still supported). It could also link to the folder with previous, no longer supported versions.   The /docs page can have the sidebar modified, as discussed in another thread. And the front page can link the docs page to each install version that's displayed, as well as a link to the doc page.   New versions won't be so common that maintaining this would be a burden.   Unfortunately, this doesn't take care of issue about direct search engine results, drilling into the current API docs, because you can't link a "current" -- you have two currents.  
I checked out Ubuntu, since it has a release system comparable to Node's. You click on Server Documentation, it goes to this page   https://help.ubuntu.com/  To me, that's an effective page. As for the API drilldown - perhaps re-directs from all sub-folders back to this documentation page. I know it's ugly, but over time, the sub-folders will get connected to their version specific page. Bite the bullet, pay the cost now, for a system that can work into the future.   Ubuntu also has specific directories labeled stable and LTS. That could work for us. By default, these would be the current stable and current LTS API documentation pages.  
The fixed overlay was added after djangos redesign. Before they had a select field, which also worked pretty fine.   I would love to navigate from deep pages to different versions +1 
@shelleyp, I only listed what Django do, I didn't suggest node does the same :) Hover does have other issues (touch, etc), but it _can_ work by giving proper affordances through visual design. I'm just trying to collect examples of what other people have done to solve this problem. Also I'm not saying node shouldn't have all the other things you mention - multiple paths to the same content is a _good_ thing.  It also doesn't have to be hover at all - it may as well be direct links a la "Version: **LTS** | Stable | Other" - takes up pretty much the same space, but allows direct interaction for the most common (I'm guessing...) switch for LTS <-> Stable. Mind you, the terminology of LTS vs Stable for a newcomer is still unclear, so it may work better as "Version: 4.2.1 LTS | 5.0.1 | Older". There's plenty of good options, but deep page interlinking is a must.  It might be worth to have a separate issue for "Version switch on every page of the docs"? 
Squid has "latest" at the permalink (but also available via versioned URL). Each directive has a version switch at the top:  ![screen shot 2015-10-30 at 22 40 52](https://cloud.githubusercontent.com/assets/505619/10857570/86a78606-7f57-11e5-9478-3040012b821b.png)  There's an index page listing all the versions for various directives:  ![screen shot 2015-10-30 at 22 42 16](https://cloud.githubusercontent.com/assets/505619/10857575/8a9db190-7f57-11e5-8e7c-841f27757855.png) 
@dominykas Good examples.   If it's feasible to add a link to difference versions on each of the API's subtopics, it could be good. There's still the issue, though, of what is current? Because though v5 is the latest, it's not the LTS, and it isn't the only current release--only the current stable release.   Have added three issues already on documentation. Hesitant to add another.  
My personal opinion "current" is LTS, but hey - that's just me. Since both v4 and v5 came out in such a quick succession it should be possible to make an "npm downloads" based vote in a month or so. If there's an easy switch - it matters a lot less anyways. Also it should be easy to A/B by randomly selecting whether LTS or Stable is "current" and seeing if people switch.  Mongo DB stores "latest" at permalink, allows switching on the sidebar via expandable options to another version: ![screen shot 2015-10-30 at 23 08 02](https://cloud.githubusercontent.com/assets/505619/10858097/1a4e006c-7f5b-11e5-83d1-f850a4838c12.png) 
@dominykas if we end  up with one "current", I agree with you: it should be LTS.   But, and I hate to sound like a parrot repeating the same thing, we do have two "current" releases: stable and LTS. MongoDB is a single current release. The version 3.0 is considered to be a replacement to 2.6 which is a replacement to 2.6 and so on. Drupal is the same way: though the org currently supports one older version (6.x), one release (7.x), and one in-development beta (8.x), there is only one official "current" release at a time. There's a sense of progression between the versions.   Node.js is different, it's following the Ubuntu release model: there are two current releases at a time, stable and LTS. There's no real sense of progression: people are encouraged to pick one or the other, but you're not going to plan to progress from v4 to v5, because the real progression is more likely to be v4 to v6, and possibly v5 to v6, or v5 to v7. Maybe even v4 to v7. But never v4 to v5--never LTS to stable.   At least, that's my understanding.   Now your dropdown could work for this. The v5 could be listed as stable, v4 as LTS. My concern here is people may not understand what LTS and assume the stable release is the long-term release.   Going to be tricky. An interesting challenge.  
Well, at the end of the day, you can only display one[1] thing at a particular URL, so a choice _will_ have to be made and that's regardless of the actual final URL layout (redirect or default content at the canonical URL). Node has two "current" release tracks - that's the reality, I'm not sure we should discuss pros/cons of the release cycle here?  I already touched on the fact that the naming (LTS vs Stable) might not be 100% intuitive (it can be simplified by not highlighting "Stable" and only adding LTS label where appropriate), but I'm not sure this is the appropriate thread to discuss that particular issue either, because more importantly, we need to look at the reader's context - does the LTS vs Stable distinction even matter to them at that particular moment? Why and how did they get to one of the docs [sub]pages? What are they trying to achieve?  Just some scenarios (please add more!): - someone looking for a specific answer to a specific problem on their current version - someone trying to figure things out and they don't even know which version they're using - someone doing some investigation/research/picking up general knowledge - someone following a link from stackoverflow for more details - someone planning a migration to vX+1 [2]  One thing in common across all of these is that the reader is never looking for multiple versions of the docs (unless they're a power user, who actually uses multiple nodes, but I'm pretty sure they can figure out what to do even if there's no cross-linking on the site at all, i.e. like now). So, the reader is always looking for one version: it's either their version, or any version, or the Bestest version.  As long as the website guesses the "any" and "bestest" versions correctly (or they're set up politically to promote freshness or LTSness), and as long as there's an obvious and easy way to switch - it'll all be grand.  [1] I mean, sure, in theory you _could_ display two versions side-by-side in the same window, but lets not go there. [2] In some projects I will totally move from LTS to Stable to LTS to Stable, since I don't need LTS there and as a module author I will do my best support multiple versions 
We're not really discussing pros/cons of the release cycle as much as we're discussing the _realities_ of the release cycle. True, in some ways this issue could be considered a test case of the Node production paradigm, but there is no separate Github issue list for it. So, we'll have to make do.  When it comes to documentation it is imperative to the reader that they know which version they're reading. We all can agree on this.   But I think we need to come to an agreement that the reader may not always want the same documentation set, each time they visit the site.   If they're supporting a production version of an application that's created in one version of Node, at the same time they're developing a new version of the application in another version of Node, they may need to go back and forth between the documentation sets. So I think we need to come to an agreement that we shouldn't try to "hack" the reader's mind and "guess" what she or he wants, and dump them into one documentation set or another.   There shouldn't be any issues with documentation on the front page or in the /docs page. The front page documentation can be listed under each release that's available on that page. In the /docs page, there is already a decent mock up of what to use in the sidebar, and the web folks can adjust the main page contents accordingly. Each set of API documentation linked in /docs should go to a version-specific directory, not a generic one.  Where we have a problem is /api. At this point there are three options I can see.   Option 1 is to eliminate the generic /api, redirect all generic /api requests back to /docs, and from this time forward, list documentation under its specific release. It's not an especially attraction option, but it is an effective option.   Option 2 is to make a decision that the current LTS is "current", in that it has the longest support cycle and is in the primary path for most application adoption. And adjust all the /api references accordingly, as long as they are annotated with version information.   Option 3 is a variation of this, but for Stable. I dislike this one, though, because to all intents and purposes, Stable really isn't much more than a production-ready beta for the next LTS release. To all intents and purposes.   A variation of Option 2 and 3 is to provide the toolbar/menubar at the top of each topic page in the API that provides quick and easy links to other versions of the documentation. It could be limited to supported versions only.   So, if I arrive via search engine at Buffer and it's the LTS documentation version, a menu bar at the top (sidebar, floating bar, whatever the UI folks like) provides access to the 0.x documentation and the v5 documentation.   With this approach, the /api can still exist, search engines will be happy, and the reader should only have to hit an extra link if they arrive at the wrong version of the documentation when they've made a search.  
@shelleyp, would it be correct to summarise that the core difference between the options 1 and 2/3 is that in the first case the reader is forced to make a decision on which version they would like to read [at the default /api URL] and in the second case the decision is made for them? In which case, I would have to disagree with "we shouldn't try to "hack" the reader's mind and "guess" what she or he wants" and I'd like to argue that "smart defaults" is one of the good UI practices, because it reduces the number of decisions the users have to make.  Think: "all people should make a choice between version A and version B" vs "some [how many?] people, who use version B, will have to switch away from version A".  > But I think we need to come to an agreement that the reader may not always want the same documentation set, each time they visit the site.  I absolutely agree that some users will need this, but I feel this is not the use case that the site should optimize for. This is a "power user" use case. Power users will know what to do - the site just needs to make it a little easier to achieve.  Either way - the switch needs to be there and as for /api - there is a little bit of politics here, alright, meaning that it matters whether the ummm community feels that it's important to emphasize that there are two release tracks or not.  My personal opinion is that this emphasis is unnecessary. I feel that it's best to communicate that "hey, node is awesome, pick the LTS and you won't be wrong", as it once again reduces the number of decisions (= learning curve = slower rate of adoption) people have to make and in this spirit, the /api should point to the LTS.  This is nice (despite that it has a completely different purpose): ![screen shot 2015-10-31 at 17 59 13](https://cloud.githubusercontent.com/assets/505619/10864530/25387018-7ff9-11e5-8a4f-aa334840315d.png)  In node's case, in a similar list, LTS and Stable in a similar list can be emphasized (with a color, e.g. green) or the old versions can be de-emphasized (by fading/greying out). LTS can have an even stronger emphasis, by making it bigger and bolder, i.e. visual hierarchy can solve a lot of problems.  How did this become such a long debate?... 
We actually had a long discussion about this at the collaborator summit. The consensus seemed to be: - In the short term, implement a "django style dropdown" for switching between versions. - Long term we should try to move to a single API doc which, on a per API basis, states the version that a feature was introduced and any compatibility issues and differences with prior versions of node.  Switching between versions in order to manually diff is a pretty horrible experience when you're trying to resolve discrepancies between versions. However, with our current content set it's better than nothing. 
That sounds cool, @mikeal    But what's going to change now? I'm assuming the /docs page will get the adjustments to account for documentation for both the current Stable and current LTS versions. Same for front page. Those should be simple fixes.   But what will happen with /api? Which "current" version will it become? Both @dominykas and I believe it should be LTS, since it's the truly stable, production ready version that most people will probably use for their apps. But you currently have it as v5, which is gone in Spring, 2016.  
We now have the following in both https://nodejs.org/download/release/ (aka https://nodejs.org/dist/) and https://nodejs.org/docs/: - latest -> v5.0.0 - latest-argon -> v4.2.1 - latest-v0.10.x -> v0.10.40 - latest-v0.12.x -> v0.12.7 - latest-v4.x -> v4.2.1 - latest-v5.x -> v5.0.0  These symlinks gets updated with each release of any line so they should always be correct. There was a bug that prevented the v4.x and v5.x symlinks from being created (they were working on iojs.org which run by the same code) but that's fixed now. The 4 -> 'argon' link is embedded in the code so when we have a new LTS name for v6 it'll have to be manually added.  I'm -1 on a `latest-lts` because we'll have overlapping lts releases soon, people should be explicitly using the correct url for the version they are using and we have no real way of knowing what version they (or the bulk of the user base) are on! This is similar to the reasoning behind removing any automatic semver-major upgrades for the [linux distributions](https://github.com/nodesource/distributions), you have to opt-in to a major version line and you'll only get upgrades on that until you explicitly change to a new line. 
Thanks! 
Wow, fast as lightning there @evanlucas! :+1:  
Please re-open this. You need to show both sets of docs for both active distributions on this page at a minimum https://nodejs.org/api/ - or you need to eliminate this page in favor of links in the front page to both sets of docs. And I would suggest a link to the overall description of the release cycle, too.  Note: the links need to show at the top-level menu, not in small print under the releases.  
And even this might not be enough - it will be really tricky to find the switch once you're deep inside the docs. Right now, a google search for "node url" will lead you to https://nodejs.org/api/url.html - this page needs to have some easy switch between the LTS and non-LTS version of docs or maybe even a cross-link switch to ANY version for _this_ particular page. 
This is actually two different issues, and pull requests, at lease. Could you reduce the scope of this issue to adding on the main docs page and open a new issue for the /api  Additionally we may want an issue to include a link in automated releases posts and another for including a link on the download page for each release. 
I'll leave this as the modify /docs issue, leave #305 for the front page, and then add a third issue for /api.  
Linking this with #324 
Fixed in 3855521 
@trott because this was already merged I committed your suggestions to master. 
I agree with @shelleyp (including other two issues) how the docs should be linked. 
How about adding a dropdown with all versions as part of the left side (at least all LTS versions plus $latest)? 
I think the issue is should the /api point to latest (Stable) or current LTS? Most people using Node in production are probably going to be using LTS. I can't imagine production environments that won't use LTS, other than some very edgy environments.   Then each API page has to have a listing, preferably along the top, for all active LTS and/or Stable releases. The left side won't work, because it lists the different core modules.   Example: I search on "Node" and "console". Right now, I'm getting the api for Node 5.0, and the console. Peachy, but I'm mainly working in 4.2.2, the LTS. To find it, I actually have to go to the front page of the Node site, and look for the docs associated with the LTS installation, open them, and then find console.   This means, by my estimates, the majority of people will have to go through a double-search process to find the documentation they need, while the minority developers wanting New! get an immediate result.   It is not efficient. It is not user-friendly.  
[https://nodejs.org/api/](https://nodejs.org/api/) is an alias to the docs directory of the latest nodejs distribution on the server - it is not a unique version of the docs that can be customised.  Some options: - leave as is. Doing google searches for nodejs docs will return results that are for the latest stable release - change it to point to the docs for the latest lts release - change `/api` to go to [https://nodejs.org/en/docs/](https://nodejs.org/en/docs/) that contains links to the docs for all versions. 
I think your idea of redirecting /api to /docs is probably the only equitable one.   The reason why I believe so is that I don't see "current" as the Stable release. Most companies, and therefore most developers, will likely be using LTS, because of the stability. One would assume this, then, is "current". Downplaying LTS just confuses people, makes it seem like LTS is this backwards oldster that no one in the Node Foundation _really_ likes.   Others, though, will disagree. They'll think people should be using Stable. Stable has all the latest, New! And this is one debate that will probably never have a successful resolution.  Besides, get people used to the new way of doing things. There are, at a minimum, two releases in active support at any time. More than two eventually. Break people's habit of thinking of Node as one release.  
I predict Node Stable vs Node LTS is going to become the new vi vs emacs 
LGTM 
@bnb Thanks for doing this! 
@matthewloring No problem! It would be helpful for a couple people to check and make sure the syntax for the changes is correct. 
cc @Qard @fhemberger  
Is there an index page for the guides section somewhere? 
@Quard I meant to ask that. I don't think so. 
Aack - @Qard, can't edit on mobile. 
No, there isn't. I think for now it's fine to create a simple `guides.md` page with the three links in it. 
Yeah, something static should be sufficient for now. We'll likely have to rewrite it entirely as we get docs structure worked out. 
Closing this as #334 has been merged. 
Thank you! 
You're welcome! 
Unrelated but I wonder if it's better to change the intro text:  ``` The Node.js community is committed to bringing you events from around the world, currently spanning the US, Europe and Japan. ```  to just:  ``` The Node.js community is committed to bringing you events from around the world. ``` 
:+1:  to changing the intro text and the PR 
+1 to the PR and making that change. 
Updated to also change that sentence. 
Thanks! :+1:  
it can be removed. 
:+1:  
Like this?:   ![screen](https://cloud.githubusercontent.com/assets/2513462/11019395/8d54b0aa-864b-11e5-92e0-520e47beabf2.png) 
I think the labels should stand out more like tabs, so it's really clear on what page you're on and what you are about to download. Just bold text isn't enough. 
I think that copy contains pretty much everything we want in the tab, but yes, a tab that stands out a bit more would be great. 
+1 to @fhemberger. How about putting a toggle on the far left, with one half with a bright green background (same as platform logos) and the other half as background-transparent? Top could be LTS, bottom could be stable, and there would be enough room for the subtitles. 
@bnb sorry I do not quite follow, when I think of a toggle I think of something like this:  ![toggle](https://cloud.githubusercontent.com/assets/2513462/4368265/b808a7d0-42e9-11e4-8bf6-a9fae68131a0.png)  Could you give the most basic mock-up of your idea? Can just be boxes and lines. Otherwise I will keep things where they are and do something like this:  ![tabs](https://cloud.githubusercontent.com/assets/2513462/11061506/c1c6ce66-87fb-11e5-9ace-562f3fc7dd47.png) 
![lts-stable](https://cloud.githubusercontent.com/assets/502396/11073468/c8148fbc-87b8-11e5-8c3c-a50c7621d3a4.png)  This is essentially what I meant. 
@bnb Unfortunately, this layout wouldn't fit for a tablet/mobile view of the page. But yes, I like the idea. Maybe you can put this on a horizontal axis somewhere? 
We could move it above  ![top](https://cloud.githubusercontent.com/assets/2513462/11090584/27a7f3a6-88c7-11e5-8b19-7fb0b58372fb.png)  ---  Or decrease the width of the windows, osx, source links  ![side](https://cloud.githubusercontent.com/assets/2513462/11090534/b119d7ae-88c6-11e5-8cdf-7c7fda489b7e.png) 
I like it! 
Some things:  Should we really be defaulting to LTS?  `Tested and Secure` has the same problem as `stable` for LTS. Stable is very well tested. It is arguably also even more secure than LTS. I think we should keep with terms like `mature`, `dependable`, `predictable`, etc. 
+1 to having larger buttons though, I missed those before! 
Nice, I like how this is evolving! :+1:  
+1 to your second option @rnsloan. Moving the version choice nearer the actual download links, looks like a much better approach than links in the page header. 
Also +1 to @rnsloan's second option. 
Might be worth trying to resurrect the stale discussion in nodejs/LTS#44. 
Sure, but it's not _just_ about LTS, it's also about what v5 is and why people should run it. 
@mikeal Is this issue still relevant? Or do we need a v4 vs v5 vs v6 page soon? 😃  
It would only be v4 vs v6. 5 is eol after this month On Apr 18, 2016 1:55 PM, "Frederic Hemberger" notifications@github.com wrote:  > @mikeal https://github.com/mikeal Is this issue still relevant? Or do > we need a v4 vs v5 vs v6 page soon? 😃 >  > — > You are receiving this because you are subscribed to this thread. > Reply to this email directly or view it on GitHub > https://github.com/nodejs/nodejs.org/issues/322#issuecomment-211472174 
May I suggest adding "LTS" to every LTS version label? i.e. display: - v4.2.2 LTS API - v5.0.0 API 
perhaps use https://nodejs.org/docs/latest-v4.x/api/ for the link instead, you could also do the same with the v5.x link .. maybe. Also note that https://nodejs.org/docs/latest-argon/api/ is a thing if you want to reinforce the LTS name which is not a bad idea. 
> May I suggest adding "LTS" to every LTS version label?  If so, why shouldn't we add "Stable" to v5 also? 
> If so, why shouldn't we add "Stable" to v5 also?  Yes, that would be better. 
> > If so, why shouldn't we add "Stable" to v5 also? >  > Yes, that would be better.  No it would not.  The idea is to _highlight_ the LTS release - if each release is labeled, then the information density increases and it becomes hard to see the trees in the forest. If the general recommendation is "when unsure - choose LTS", then LTS should be highlighted. Or, you can think about it this way - both LTS and Stable are "stable", but "LTS" is "special Stable", therefore it deserves an honorable mention.  If "unstable" / "alpha" / "beta" releases existed - they should also be marked as such (although better yet, they should only be displayed to power users, i.e. they should be absent from the lists on primary pages).  I am falling back on the laws of simplicity here - [Simplicity is about subtracting the obvious, and adding the meaningful.](http://lawsofsimplicity.com/los/law-10-the-one.html) - but similar concepts can be found in plenty of other generic usability advice. 
Just pushed a couple of updates: - Use https://nodejs.org/docs/latest-v4.x/api/ and latest-v5.x URLs - To reduce duplication and ensure consistency, I extracted docs URL generation into a Handlebars helper, which is also used on the frontpage - Added "LTS" behind v4.x label  TBH I dont have a strong opinion about putting LTS into the v4.x link or not, but I agree with @dominykas reasoning.  <img width="224" alt="skjermbilde 2015-11-11 kl 21 51 59" src="https://cloud.githubusercontent.com/assets/1231635/11102979/1ae3afcc-88c0-11e5-817b-5281acc8afd5.png"> 
An updated screenshot now that we've got the `Guides` link aswell.  Any thoughts on this anyone? It's ready to go as soon as it gets a collaborator thumbs up.  <img width="241" alt="skjermbilde 2015-11-18 kl 22 38 31" src="https://cloud.githubusercontent.com/assets/1231635/11255325/e74e3714-8e45-11e5-809c-49379827577f.png"> 
:+1:  
-1 on the last proposed solution.   LTS and Stable should both be marked - giving context to one and withholding context from other is a _very_ bad idea.   Additionally, from a design view, there is **Way** too much going on in the green links, making them extremely hard for humans to parse. Having a `v, number, full stop, number, full stop, number, full stop, text element one, text element two` is far too much. We need to simplify this.  So here are my suggestions: - Remove `v` - giving the number implies version - Remove `LTS` from `4.2.2` - Append `LTS` and `Stable` in smaller gray lettering or a gray tag 
When you have an LTS version of software, personally, I have never found the need to state everywhere that the later release is **stable**. Ubuntu do not do it: http://www.ubuntu.com/server , https://help.ubuntu.com/ 
@bnb you're assuming the reader knows the difference between "LTS" and "Stable" - the label needs to highlight it - both are "Stable", but only one is "LTS". 
@rnsloan @dominykas Fair play. However, I still maintain that those changes (minus adding `Stable`) should be made. 
Something like this @bnb?  <img width="231" alt="screen shot 2015-12-07 at 07 50 13" src="https://cloud.githubusercontent.com/assets/1231635/11620917/55858f0a-9cb7-11e5-9713-b642395848d3.png"> 
Looks good :) 
Thanks for the feedback everyone! :+1:  @bnb I like your thoughts about removing the `v` from `v4.2.3` and `v5.1.1`! I thought it better fits a new PR/issue, as it should probably be done throughout the site, not only the docs page - up for grabs anyone :) 
Thanks! 
LGTM. For future reference, quoting the [debian's official documentation](https://wiki.debian.org/sudo),  > **Why sudo?** > Using `sudo` is better (safer) than opening a session as root for a number of reasons, including: > - Nobody needs to know the root password (`sudo` prompts for the current user's password). Extra privileges can be granted to individual users temporarily, and then taken away without the need for a password change. > - It's easy to run only the commands that require special privileges via `sudo`; the rest of the time, you work as an unprivileged user, which reduces the damage that mistakes can cause. > - Auditing/logging: when a `sudo` command is executed, the original username and the command are logged. >   For the reasons above, switching to root using `sudo -i` (or `sudo su`) is usually deprecated because it cancels the above features. 
-1, we've avoided this in the source docs @ https://github.com/nodesource/distributions because some variants of Debian don't come with `sudo` so the "use root" is a way of getting around that. 
@rvagg Oh, shall I revert the commit then? 
either that or make a comment that `sudo` may not be available 
If you add a note that `sudo` isn't available by default, you should also add that `curl` is neither. 
 "use root" :+1:  
Copy looks good, do you think it is a good idea to turn company names to links? 
LGTM. I'm don't think we need company links here. 
Fantastic. Glad to see individual membership finally roll out. 
Nice! 
LGTM 
Sorry, just realise that the docker link doesn't appear under "LTS" tab? 
I get the correct link on both LTS (https://nodejs.org/en/download) and Stable (https://nodejs.org/en/download/stable/) pages when browsing from my phone. 
Sorry @Starefossen , must be cache or something :) 
@mikeal README looks fine for me, can we close this issue? 
closing for now, feel free to reopen. 👍  
LGTM with one comment 
@Trott Thanks, I've done :) 
Other than my comments, LGTM. 
@Trott @bnb Thanks, I updated :smile:  
Same issue with [v5.0.0 Stable](https://nodejs.org/dist/v5.0.0/node-v5.0.0-x64.msi) node -v `v5.0.0` npm -v `2.12.0` 
Hmm.. scratch the last comment. After uninstalling nodejs v4.2.2 and installing nodejs v5.0.0 with the `.msi` I get: `npm -v 2.12.0` `npm uninstall npm` `npm -v 3.3.6` not sure how that works. 
npm3 should come with node5 by default 
Is it the `.msi` uninstaller that doesn't uninstall npm then? 
@dotnetCarpenter this issue tracker is for problems and disccussions related to the Node.js website. You should post this on https://github.com/nodejs/node. 
@dotnetCarpenter Yes, this repo is for the development of the site. As @lpinca said, the packaging of Node is not covered in this repository. Create an issue at https://github.com/nodejs/node to get proper support. 
What is the current state of this PR? I'd love to get the guides page set up and would be happy to help if there's more work to be done here. 
It needs a review. 
LGTM, sorry you had to wait. Merged. 
@fhemberger no problem. 
[Here](https://nodejs.org/en/download/)? Up for me. We need a bit more detail from you to actually know what's wrong.  
Re-open with more details if there's still an issue reaching our download page @jmartiuk5, closing this for now. 
@nodejs/build I think this might be a DigitalOcean backup thing, it happens around this time each week and the OP was a week ago. Remember that we pass-through for download tarballs so CloudFlare doesn't keep it up when the server is having trouble serving requests. The backup is COW but I wouldn't be surprised if all the writing to the log files fill up the available buffer space or something like that because the backups take a long time.  I'm hesitant to just disable backups without having a more solid backup solution for this server. We have most of it in Ansible but there is state on there that would be nice to keep, particularly logs, but there's likely lots of other things that would be nice to node lose in the case of catastrophic failure. 
Thanks! 
Actually, please leave this :) To date we've gotten much better emails than we have form submits so it's best to leave them both. 
Oh okay. No problem then :-) 
Can you also modify the tests as well? Thanks :) 
@stevemao Oops, sorry about that. Fixed the tests now. PTAL. 
@lpinca Addressed your comments. PTAL. 
LGTM. 
Nice work @thefourtheye, LGTM! 
Have you seen the `node-version-data` package we depend on to load the latest versions? 
I have not seen it but: https://nodejs.org/download/release/index.json does not contain (precomputed) the latest tagged versions which makes it hard for bash scripts and other non-node code 
I changed the PR to underline my point better: The `latest.json` now only contains the latest stable & lts versions. This should reduce the amout of data read from nodejs.org and increase both the speed when downloading (and processing) the data as well as making it easier to read the data. 
Could we extract the logic related to latest versions into its own npm package? Or maybe a new method on [node-version-data](https://www.npmjs.com/package/node-version-data) @rvagg?  I'm really hesitant turning our internal data model, used by our templates, into a .json file that others around the world could depend on. We should be able to completely refactor our internal data model whenever we want, without worrying about breaking things for other users and projects. 
@phillipj :+1:  
It is important to me that the nodejs homepage (and community) decides what constitutes "stable" and "lts". The way - the authority - on how it is decided atm is specified in the [latestversion.js](https://github.com/nodejs/new.nodejs.org/blob/master/scripts/helpers/latestversion.js). If `node-version-data` were to offer a `getLatest` functionality I would still base that method on data provided by the `nodejs.org` homepage. 
Absolutely agree with you! Sorry for not being explicit earlier, but we would ofc throw our `latestversion.js` in favor of the extracted npm module / `getLatest()` in node-version-data.  nodejs.org dont benefit from having custom logic related to resolving LTS and Stable, we just haven't seen the need to publicly expose it, until now with this PR. On the other hand we have our internal data model in the `source` object which are, and should still be, custom tailored to our website templates. If we want to redesign or change that data model in _any_ way, we shouldn't have to worry about external usage of that  
> does not contain (precomputed) the latest tagged versions   Can you please point out what is actually missing there? 
@thefourtheye https://nodejs.org/download/release/index.json does not contain a clear flag or identifier for the latest `stable` or `lts` version.  Just to clarify again: It can be "computed" quite easily but at the moment A) it **has to be** computed, which takes time and coding effort and B) it doesn't allow us to freely specify what we think is the **latest** lts or stable release. Also: The release/index.json is quite large (and will presumably grow in future) which costs bandwidth and download speed 
@martinheidegger would extracting the logic into a new or existing npm package as I have described, suffice at first? 
There are plenty of ways that would "suffice" but none of them is even closely as straight-forward as this one. 
> There are plenty of ways that would "suffice" but none of them is even closely as straight-forward as this one.  Alright... I do appreciate you raising this issue, I'm sure there are lost of other devs that would appreciate an easy way to resolve current LTS/Stable versions. On the other side I would appreciate if we could keep this constructive to find the best solution for all of us.  What if `latest.json` existed on https://nodejs.org/dist/ as `index.json` does? 
Would be fine to me. 
-1 from me here and in the related issue in build: 1. The data is redundant, it exists in index.json and can be computed from that. Let's add something to node-version-data if this shorthand really is required  2. nvm et. al. have not expressed concerns about index.json, it seems to be serving their needs, particularly since we added the `lts` property.  3. There will be overlapping LTS versions, in a couple of years we'll have 3 of them, each valid as production targets, we can't be 1:1 about this.  4. This introduces new API that we will be stuck with supporting forever, we already have enough legacy API to support on nodejs.org and I'm not a fan of adding new surface area that we have to consider every time we want to revamp.  
@rvagg I respect your opinion a lot (my first instinct was to just close this PR), but let me address your arguments one by one: 1. In the current PR the data would indeed be partially redundant but If it were to look like this:        ```    {stable: '5.0.0', lts: '4.2.1'}    ```        it would only contain the exact information of which release is officially the latest stable and latest lts release minimal and additionally to the existing information.  2. Not sure where this relates to nvm (afaik it doesn't support latest) but n [has a custom implementation](https://github.com/tj/n/blob/cefebb20aa77ca2157f9d4aacfe77aea238576b4/bin/n#L589) that also looks to be not in-line with the nodejs.org homepage. Maybe the first case of needing to fix? 3. The file in this PR is called `latest.json` indicating that it contains only the `latest` stable and lts version. Even when there is more than one lts version at some point it will still just contain the _latest_ lts version. 4. Maintaining a file with two variables over maintaining a package in npm? I would always choose the file.  _Background:_ I made this pull request as preparation for a tool that checks whether-or-not the latest version of node is installed on computers. If such a tool becomes main-stream this API very possibly might be called a lot more often than currently the `index.json`. Possibly resulting in heavy bandwidth use and to reduce the global need of computation speed. 
@martinheidegger I edited the text to include bullets. Hope that is okay :-) 
@thefourtheye thx 
For me this boils down to: - missing functionality but (quote) _It can be "computed" quite easily_ versus - maintaining a new api, probably forever  Adding new api's should be done with care. Am also `-1` (if this is a vote). 
also fwiw @martinheidegger there is an index.tab as well, I use that exclusively for non-Node code that needs to fetch this, e.g. I get the latest version with:  ``` sh latest=$(curl -sL https://nodejs.org/download/release/index.tab | \   awk '{ if (!f && NR > 1) { print $1; f = 1 } }') ```  you could do the same but for only LTS since it's a column in there  ``` sh latestLTS=$(curl -sL https://nodejs.org/download/release/index.tab | \   awk '{ if (!f && NR > 1 && $10 != "-") { print $1; f = 1 } }') ```  When there are multiple LTS' then you could just check for the version by name, e.g. `Argon`  ``` sh latestArgon=$(curl -sL https://nodejs.org/download/release/index.tab | \   awk '{ if (!f && NR > 1 && $10 == "Argon") { print $1; f = 1 } }') ``` 
As exposing `latest.json` has been down voted one way or the other, adding a method in `node-version-data` or extract it into its own module, seems like the only options left. Would that be helpful for you @martinheidegger or is it `latest.json` or nothing? 
@martinheidegger What about @phillipj's suggestion? Would that be helpful? Is the change still needed or can we close this PR? 
Sorry for not having answered to to that issue. node-version-data works but is pretty slow here and not really much fun. I wouldn't use or trust a module that does it and just rely one one-data-source of truth. As such I will have to learn to live with node-version-data.  _Note: I closed the issue because I don't have the time or energy to invest in this. Feel free to reopen_ 
Head over to [nodejs/evangelism](https://github.com/nodejs/evangelism). They handle content creation, and will be the ones that would accept a guest post. No system for guest posts has been established yet, so you'll have to work with them to see if it's possible. 
I think it's fine to submit this here, we can pull in the evangelism team via the mention that @bnb just did.  A lot of this stuff stretches both evangelism and documentation so it's better to just deal with them here. 
I don't think we'll do "guest posts" in the traditional sense. Any contributor can write content for the blog so long as it's about the project and the community. The issue I see with a post on something like "test automation" is that it's a bit subjective so it would be difficult to write a post in which it didn't look like the project was endorsing a particular opinion. 
Closing this as it seems the question has been answered. 
Neat! What does this mean for us who made commits but aren't collaborators? 
@mikeal Nice one. Is the code to generate this available anywhere? 
Is it git-extras? 
> Neat! What does this mean for us who made commits but aren't collaborators?  That you'll likely be added as a collaborator soon :) 
> That you'll likely be added as a collaborator soon :)  I'd happily accept it :P 
@mikeal There are again a few people to be added as contributors. Can you please put your script into the repo so we can create the list again? (Also unfortunately, you have to be org **owner** to add new members to GitHub teams) 
I woul like to see @abouthiroppy added as collaborator. He made some nice [contributions](https://github.com/nodejs/nodejs.org/pulls?q=is%3Apr+author%3Aabouthiroppy+is%3Aclosed) lately. 
@lpinca absolutely!!! 
@lpinca @59 Thank you! I want to participate and cooperate:) 
@mikeal Can I participate as collaborator? 
@fhemberger I'd like to be added if that is possible 
Can someone from the @nodejs/website group (other than myself) sum up who should be added? I'll go through it and invite the people. 
I haven't had the bandwidth to work on this since I starting working with Code for San Francisco, though I am still seeing my name on the repo's readme as part of the WG... Not sure if you guys want to leave me on or bump me off, I'm ok either way. Once I have more bandwidth to work on this, I'll for sure be jumping in. (That may have been discussed before, not entirely sure) 
@Fishrock123 Unfortunately not. Since GitHub changed its organization roles, as "Team Maintainer" I can only remove people, not invite them to a team (which is IMHO pretty silly).  @everyone: Sorry for the inconvenience and thanks for your patience so far. We'll try to figure out how to optimize the onboarding process in the future. I plan to work on a script that generates the output of the first post, that should make things easier. 
Sorry it's not clear to me who needs to be added and to which team. :(  I have org owner access permissions fwiw. 
@Fishrock123 so far: - @abouthiroppy  - @TheAlphaNerd  
+1 to @TheAlphaNerd and @abouthiroppy from me. Should I add them? 
+1 from me for them as well, i'd say go ahead 
do we technically need someone from the admin group to approve them? most of the governance here changed a bit since I was last active on the website 
No doubt @abouthiroppy and @TheAlphaNerd should be added 👍 
Added/invited both to the website team. 
Awesome, welcome to both of you 🎆 
woot 🎉  
thx 🎉 
Thank you so much :tada:  
I just worked on [a script](https://github.com/fhemberger/contribution-report) to produce a similar output as above, so I checked the commits since January for people not already being a collaborator: - @rvagg 8 commits - @williamkapke 6 commits - @detailyang 6 commits - @preco21 4 commits - @JustinBeckwith 1 commits - @jjlangholtz 1 commits - @Starefossen 1 commits - @saadq 1 commits - @paazmaya 1 commits - @JimiHFord 1 commits  (No idea why @rvagg as WG admin is listed as well)  I'd also recommend @williamkapke, @detailyang and @Starefossen (who also wrote the Docker guide) as collaborators, if they're willing to join. 
@fhemberger cool- I just checked out your script, I was going to do that for [the bot](https://github.com/nodejs-github-bot/github-bot) to produce the report automatically (on whatever schedule) and post it. Maybe you can look into writing the bot script! :D  @phillipj @Fishrock123 and myself can help you out- just let us know. 
@fhemberger i'm up for all of those people to be added! before that, we should wait for their individual consent tho 
ping @fhemberger  be willing to as a collaborator :grin: 
Do you still need someone who's an org owner to add people? 
Lets have @rvagg make the call. 
trivial update that doesn't impact on production since `st` is only used for dev (we serve static files via nginx on nodejs.org) 
How come greenkeeperio does not auto PR? 
I guess it's because the bot has been added after the update. 
@lionG Can you please be a little specific? It would be really helpful if we get to know the functions for which you are seeking better explanations. 
@thefourtheye Are you looking to provide help for him or are you looking to update the docs for clarity. If the latter, I can go through and compile a list of parts of the docs that don't have sufficient explanation for newcomers. The docs were the biggest sticking point for me, so this topic is important to me. 
@bnb The latter. It would help broader audience, I believe. 
@thefourtheye I will try to work on this over the next week or so. Any specific criteria you have in mind? I think I've got it mostly covered. 
@bnb Many thanks that will be very helpful. @thefourtheye thanks as well we need this. Ill try and start on the 'fs' module section. My issue is there is no detail of what the functions do, what their callback arguments or return values are, and what the functions input arguments stand for as well.  Also please note that I didn't include "overloaded" versions of some function like 'fs.fchown' of 'fs.chown', or synchronous versions of any function.    Here is a small list: [fs.rename, fs.ftruncate, fs.truncate, fs.chown, fs.lchown, fs.chmod, fs.link, fs.readlink, fs.unlink, fs.realpath, fs.rmdir, fs.close]  Regards.  
@lionG I think it will be better if you brought this up in the main repo as well. It will get lot of attention and we ll get more opinions and help. 
@thefourtheye thanks. However im not entirely sure what the main repo is... please explain.  
@lionG Oops, I am sorry. I forgot to provide the link. Here it is https://github.com/nodejs/node 
Closing this issue, the discussion should proceed in the main repo. 
LGTM.  
Not too far off from https://github.com/nodejs/node/pull/3722  Discoverability of the COC right now is a problem imho 
provisionally +1 but i would like to note that we have some structural improvements we need to make as well. we don't currently have a foundation-wide CoC so the one we are linking to is specific to core, nor do we probably document the working groups that you should be getting involved in (which all have their own CoCs as well).  but ya, this is better than nothing which is what we have now :) 
LGTM, gonna merge now since there are no complaints 
Change LGTM. Do you know why CI is not run for this PR? 
No clue. 
@thefourtheye please check again. 
LGTM. Some error handling on the HTTPS request and file writing would be nice, but that could be another PR. 
@phillipj do you know why CI is not run for this PR? 
@thefourtheye no idea why it doesn't show inline in the PR.. These commits are visible in the [Travis/new.nodejs.org build history](https://travis-ci.org/nodejs/new.nodejs.org/builds) though, might be a github hickup? 
PTAL. 
Still looks fine to me. But I would be confident if CI ran. 
https://travis-ci.org/nodejs/new.nodejs.org/builds/90492242 is the build for @lpinca latest commit ba338a5 
Cool. Merged now. :+1: Thanks @phillipj :-) 
:ok_hand: 
+1 on content, but can anyone run through these commands on the OSes and make sure they work? Testing them to be 100% sure is necessary to prevent problems down the line. Also, are there version numbers of the package managers that are required? And what about LTS/Stable updates? Will they be pushed automatically? 
@bnb The document does not differentiate between LTS and stable atm. If we want that we should update the whole document not only this pr. We should probably update it anyway as its content is outdated.  If I'm not wrong there is `nodejs4` (LTS) and `nodejs` (Stable) in `pkgsrc`.  I merge this. 
Can you repeat yourself in English? Very few, if any, contributors here speak your language. 
cc @nodejs/nodejs-cn? 
@Fishrock123 it can be closed. 
@neechange This issue list is wrong place to report this question. The sqllite3 install issue under Windows should report at sqllite3's issue list, Not any 3rd C++ addon module should be provided by node core. 
你可以试试jxcore  http://jxcore.com/docs/ 或者自己fork修改一份 U can try jxcore,which have sqlite3 built-in or U can just fork nodejs and make your sqlite version 
I didn't touch anything sensitive and I don't know what's up with Travis, but here is the build https://travis-ci.org/nodejs/new.nodejs.org/builds/90737551. 
LGTM, merged. 
I have no objections. I'm just wondering how many collaborators you need here?   Sent from my iPhone  > On 13 Nov 2015, at 6:17 AM, Mikeal Rogers notifications@github.com wrote: >  > Here's a list of recent contributors who are not yet collaborators. If there are no objections I'll be adding them to the Website WG. >  > @sup commits > @kohei-takata commits > @ZibbyKeaton commits > @e-jigsaw commits > @jorangreef commits > @matthewloring commits > @nstanard commits > @woodyrew commits > @anseljh commits > @thephpjedi commits > @xcatliu commits > @Starefossen commits > @isaacs commits > — > Reply to this email directly or view it on GitHub. 
> I'm just wondering how many collaborators you need here?  There's no real answer to this other than "more" while contributions are growing. Collaborators help with the sizable review load as we continue to gain more contributions (and we're not even near where we were on iojs.org for localizations yet). 
+1 to this. However, we need to be 100% sure they know the general rules - more specifically the merging/PR rules. In the past it's only been a few contributors added, and the older contributors were able to confirm over Issues. I'm sure you have opinions/thoughts on this, @mikeal? 
Do we want to go as far as having an onboarding? 
There's an upside and a downside to it.  Upside is that everybody knows what's going on, and there will be as few mistakes as possible.   Downside is that we have to put effort into it. That sounds extremely lazy, but it's the most simple way to describe it. We may not have enough/willing/able people to be able to onboard, and it will limit the rate at which we can accept new collaborators a lot. 
@bnb as for general rules - do you mean the contents of CONTRIBUTING.md? 
I contributed exactly 2 bytes, so feel free to defer any onboarding or other work for me! :+1:  
@sup Yes. 
@sup As well as GOVERNANCE.md 
@bnb i see, thanks (as though, the GOVERNANCE.md is a bit outdated, isn't it?) 
Nice @mikeal :+1:  
any progress on this? haven't heard from it in a while 
@sup I would add you, but I'm not a team maintainer (just checked). @fhemberger @snostorm or @therebelrobot, as well as @mikeal and maybe a few other Org owners can add you. I'd say we've got the +1 for at least @sup, and if anyone else from the list above expresses interest soon, we can add them too. 
@bnb I would be happy to become a collaborator as well. 
@matthewloring Okay, just need another WG member to +1 you and you're set. 
I'm not a WG member, but +1 to @matthewloring  
@bnb I'm ready to contribute to the website with you 😀 
@bnb Sorry, I've been quite busy lately, so I wasn't able to follow all the contributions which happened in the meantime. That's why I won't participate in the voting as well. Please just let me know who wants to become a contributor and got a +1, and I'll be happy to add them. 
@bnb I want to be a collaborator! 
@fhemberger me, I suppose then 
@sup Just added you. 
@fhemberger thanks! 
I am already a part of Docker and Build working groups, so I probably don't need to become a collaborator here as well. I would like to contribute with more Docker stuff to the website however. 
@fhemberger these three was mentioned and has expressed they want to be collaborators, could you add them aswell? ..and close the issue afterwards :)  @matthewloring @kohei-takata @xcatliu 
Unfortunately, GitHub has changed their user role management. Only **organization owners** can send invitations for new members to join (I can only add existing org members to the website team).  @Fishrock123 You're listed as owner, can you please add the new members? 
@fhemberger Invited all 3. 
Closing this since the rest didn't respond. 
Unrelated but I also wonder if greenkeeper bot is working. `node-version-data` has been updated to version `1.0.1` but we didn't receive a pr yet.  
I see one webhook to a random IP address and another to greenkeeper, so maybe it got turned off? 
Hmmm.. Not part of the `Settings -> Webhooks & Services -> Services` list either @mikeal?  Pretty sure @rvagg has said we've got a webhook setup too autodeploy the site, that might be the random IP. 
oh, that is there :) it say travis is working and is wired up to @rvagg's account. 
Thanks! I'm in contact with Travis support about this now. 
Hello there! The integration seems to be off because we lost some crucial data about this repository while syncing. Could an admin of this repository (is it you, @mikeal?) log out and back in to https://travis-ci.org, and resync data to see if that fixes the issue? 
@BanzaiMan I just removed the old Travis service link, hooked up with @rvagg's account, then created a new link with my account. Unfortunately didn't work. Travis doesn't know about this repo https://travis-ci.org/nodejs/nodejs.org, even though we have had 3 commits since the Travis service links was altered.   And it still looks like the old service link is active somehow, as new commits are getting built: https://travis-ci.org/nodejs/new.nodejs.org.  As the nodejs organization don't allow private access to third-party applications, I'm assuming re-sync on http://travis-ci.org/profile isn't possible? 
I believe greenkeeper is broken for the same reason as travis, we've disabled third-party app integrations—I'm not sure what the context of this was, I guess security, but it should still be possible to do it with personal authentication tokens. I've tried putting mine back into this repo (sorry @philipj, I nuked yours before I realised what it was and that may explain why it hasn't worked properly) but I'm not sure if works or not. Feel free to remove mine and try again with another one if this is the case. 
Np, though the issue remains after you linked it back to your account @rvagg. The old Travis service link still picks up the commits/branches. Tested it by pushing a new test branch: https://travis-ci.org/nodejs/new.nodejs.org/builds/92936211  https://travis-ci.org/nodejs/nodejs.org still isn't found or created obviously :(  @BanzaiMan are you able to delete the old Travis link (new.nodejs.org) which seems to be active somehow? 
Still haven't found a solution on this. Have been in contact with three helpful Travis support employees, without luck. Their conclusion is we have to provide org wide 3rd party access to their app. Manually adding a webhook on our side isn't possible either.  @mikeal rumours has it you have some ideas around this? 
Ping @mikeal 
I had to temporarily turn on Travis access to cancel some stuck builds from `readable-stream`, so I think builds might be re-enabled here?  It seems travis only gives you auth if it has private data access for some reason or other. (Maybe it needs that to view members or teams?) 
Yupp, Travis builds branches but sadly doesn't integrate build status on PRs :(  One reply I got from Travis support might shed some light on why 3d party access is needed:  > At the moment our GitHub synchronization is based on the /user/repos payload (https://api.github.com/users/rvagg/repos). We use this to determine user permissions on repoositories (these are visible when authenticated). We need to know about at least one user with write permissions. >  > I'll talk to the rest of the team to see if there's any way for us to get this working without 3rd party access globally turned on. However, I'm pretty sure our OAuth application needs to be granted access (e.g. see https://help.github.com/articles/approving-third-party-applications-for-your-organization/) in order for us to have any kind of write access (setting build status information etc).  ..we never found a solution around it. 
So when Travis can't help us, we've got to fix it ourselfs, right?  I just created [nodejs-github-bot](https://github.com/nodejs-github-bot) to help us get integrated build status from Travis, in the form of comments seen in https://github.com/nodejs/nodejs.org/pull/539#issuecomment-189016995. It starts polling Travis as soon as a new PR opens. Haven't implemented PR updates yet. We'll have to see how useful this gets in the future, but pretty confident it could do some good.  Closing this issue for now. 
Just out of curiosity, @phillipj is the script of the bot open source? 
Absolutely @stevemao! Its in a throw-it-together state atm, I'll push it up after cleaning it up :) 
@stevemao https://github.com/nodejs-github-bot/bot 
Looks good @phillipj :) 
Hi @phillipj , I received an email saying org let travis access our private data. But I still can't see status on our new PR? 
@stevemao I'm not sure why you got that email, but I enabled and disabled it to let citgm get Travis builds.  We aren't going to let Travis have full time private access. Sorry. This is a problem on travis' end but they don't seem to have any interest fixing it. 
No worries @Fishrock123 ,  I think everyone in the org got the email. Why don't we do the same with this repo then? 
@stevemao this repo has a Travis partially turned on :) Read more about it in  https://github.com/nodejs/citgm/issues/102 
@Fishrock123 I think the entire org got that email when you flipped the bit 
Eh, oh well. 
Thanks! 
Wow, awesome! :+1:  
Rally rad! :+1:  
It looks great. 
+:100:  
The images look awesome :) has anyone else tested this yet? 
How about a different active color for LTS and stable, just to indicate which version the user is going to download easier? 
@diagramatics I was looking at the gif, and noticed that the Windows/OS X/Source parts have a dark gray background on hover. Maybe that could be used? 
@bnb like this?  ![full](https://cloud.githubusercontent.com/assets/2513462/11181795/66e6d1b8-8cb9-11e5-9d3c-4920a1895c40.png)  ![black](https://cloud.githubusercontent.com/assets/2513462/11181804/7867dc16-8cb9-11e5-8614-bb9f0733120c.gif) 
@rnsloan Yes, except keep the bright green (from the previous version) for the active state.   Notice how the gray background is only visible on hover for the Windows/Mac/Source buttons. Like that, except with the green background as an active state. 
Colors updated. Merging. 
:dancers: nice work! 
Good job. Looks awesome live! 
Perfect, Thanks @rnsloan :) 
@Trott Thanks, updated 
I love the sentiment here but the prospect of having to discuss and find the line of what causes we want to support and the causes that are _out of scope_ or too trivial for us makes me very concerned. It's not that I don't want us to support causes, it's just that we are such a culturally diverse organisation that finding shared values is extremely difficult and discussions about individual words can get overheated.  So unfortunately I have to be -1 on nodejs.org being used to support causes. We have enough pain and division to deal with already without adding on the potential for more. 
I agree with @rvagg  
Okay, fair enough & thanks for taking the time out for a proper response.  
@kelthenoble ... definitely appreciate the sentiment tho. 
No worries man @jasnell  
I'm closing this now but feel free to reopen :) 
This is already discussed in #305. 
I see. We can close this issue then. 
:+1: thanks 
Other than the above, LGTM. 
@bnb I fixed it now. PTAL. Also, I feel that it would be better if we got an LGTM from @nodejs/tsc on this. 
LGTM 
yeah, LGTM 
Thanks for the review people :-) Landed the patch in 0dd684cf21d278ba8aa178db0a20ebc6d587c58e 
Good idea. A PR would be very welcome. 
+1 
+1 
Will take a look at this.  Any preferences for wording? And do you want only a text or a icon or both? 
I like "Edit on GitHub". It shows directly, where it will take you and that you require a GitHub account to edit the page. All other links on the website are text links, so we should keep it that way. 
+1 to "Edit on GitHub" and taking directly into edit mode. If edit mode isn't possible, taking them directly to the file they're looking at would be next-best.   You'll have to write a script to convert the URL to the current page in the repo. Or you could do something with templating by adding a variable or iterating on an existing one. 
We already store the locale and the path, but you can't use `https://github.com/nodejs/nodejs.org/blob/master/locale/{{site.locale}}//{{ path }}.md` all the time, for example: - `nodejs.org/en/security/` → `/en/security.md` - `nodejs.org/en/downloads/` → `/en/downloads/index.md` 
I arrived at the same conclusion when I dug down into it. 
Hmm, maybe we can get the original filename from Metalsmith during page generation … 
Submitted a PR #400 to fix this issue, let me know what you think. 
Just out of curiosity, have you noticed any difference since introducing the "Edit" link? Too early to tell maybe :confused:  
:+1:  
:+1: 
LGTM :shipit:  
LGTM. 
Nice, looking forward to it! 
added some minor nitpicks, but otherwise it looks nice 
Worth mentioning towards the bottom that if you want to enter the container to take a look around you can with the `exec` command `docker exec -it <container id> bash` ? 
This is super slick @Starefossen :-)  I have a similar writeup here for both Docker and docker-compose: https://nodesource.com/blog/dockerizing-your-nodejs-applications https://nodesource.com/blog/dockerizing-your-nodejs-infrastructure 
I have been thinking about turning this into a blog post for a while. Perhaps it would make a better wiki? I'd like to see something focused on using Docker and docker-compose for local dev. If you think this is a good fit, I'll draft something up :smile:  https://www.youtube.com/watch?v=SUNxn0omNi4  
Thanks for good feedback! I have updated the guide with everything suggested so far. There are two todos lest; _intro to docker_ and _where to get help_.  @wblankenship I have not had Node installed on my computer for the past year, I have been running everything through Docker Compose! I feel Compose may be a bit much/advanced for this guide, I would definitely like to see that go into a wiki or a separate guide! 
I am pretty happy with the current version of the Node.js on Docker guide now. Please, nitpick and correct my spelling mistakes if you find anything, and post your suggestions on how to improve this guide.  // cc @nodejs/docker  
Well, I guess all the suggestions and feedback have been resolved. It should be good to merge now :) 
It would be a shame if we didn't link to this anywhere. Guess adding a link in our guides section `/docs/guides/` would be most appropriate. 
Isn't that done automatic: https://github.com/nodejs/nodejs.org/blob/26e4fe006fd5d082dee39470732b08adca406a45/build.js#L110 
> Isn't that done automatic  Sorry, forgot guides was made as a collection. 
Thanks! :+1:  
+1 
Do we really need 8 grays? I understand a brand gray, a dark gray, and a light gray, but is there a need for five additional grays? 
> Do we really need 8 grays?  Spot on. 
``` sass $gray1 = #ccc $gray2 = #c0c0c0 $gray3 = #ddd $gray4 = #eee $gray5 = #f0f0f0 ```  don't really like the variable names. 
> don't really like the variable names.  Other suggestions are welcome. I would not recommend this variable naming anywhere else, but here are some of the problems I have encountered specifically with css color variable naming.  I can alleviate these somewhat by reducing the number of grays down from 8, but you still run into the same problems even with only a few variants of the same color. - Say you have three hues of gray `light-gray`, `lighter-gray`, `lightest-gray` . What do you do when you need to add a fourth gray that is even lighter? `lightest-gray2`? , `even-lightest-gray`? What about if you need a gray that is somewhere between `light-gray` and `lighter-gray`? Do you refactor the other variable names to fit it in? If you don't then the naming is no longer accurate. - Take a different approach and name the color variables related to the html elements or css properties they are for: `gray-download-table`, `gray-border`. What do you do if you want to use the same color but for a different element? You have to rethink the naming convention used. In some projects I have worked on I found that it is not renamed; so you have a color called `border-gray` used in places that are not borders. 
This raises the need for some CSS cleanup which we haven't addressed yet, since we until recently, have been waiting for things to settle. We have probably ended up with so many grays because no one has taken a look across all pages and decided (with a strict mindset) which grays we _really_ need. I would be much more positive to a strict refactor of colors, rather than encourage more colors to be added. 
The number of blacks and grays used on the site has dropped from 12 to 6 (though in the file diff it looks like an increase as many of them were not defined as variables).  If you feel this can be trimmed further please submit a pull request after this. 
> The number of blacks and grays used on the site has dropped from 12 to 6  Sounds like a good effort in the right direction! LGTM now :+1:  
LGTM. :shipit:  
Definitely looks better :+1:  
:+1:  
Looks like this is an npm issue not the website. Try running 'npm install' to install your deps before running your command. If still fails, make sure your deps are installed properly.  
also, if you have any further issues, report the bug at https://github.com/npm/npm/issues. this is just the nodejs website, not even nodejs itself :smile:  
@Fishrock123 @Trott fixed and updated with npm, thanks :) 
LGTM once the keynotes are fixed :-) 
@jasnell it got pushed already and then another push fixed them :) 
LGTM 
I don't know if this is necessary. Do these services internally cache badges from shields? 
It's more for consistency than anything else. 
This could be broken up in three different changes: 1. create the download/lts page by copying `./locale/*/download/index.md` -> `./locale/*/download/lts.md` 2. change our own links from https://nodejs.org/en/download ->  https://nodejs.org/en/download/lts 3. add a redirect in nginx from https://nodejs.org/en/download ->  https://nodejs.org/en/download/lts for google and friends + visitor's bookmarks  By copying instead of moving in step 1, we dont have to synchronize the website release with adding the nginx redirect in step 3.  Would you agree or did I miss something @Fishrock123? 
We could use the (unused) download page to explain lts/stable in detail, etc. 
@Fishrock123 Is this ticket still relevant or can we close it? 
Still relevant. Ideally I'd be able to link to these rendered-pages per version.  That is pretty complex though. It means doing some ngnix hackery. I'll try to work on it soon. 
@Fishrock123 Should we proceed with @phillipj's idea to prepare a separate LTS download page? Or do you prefer a different approach? Otherwise I'd like to close this issue, as there hasn't been any progress for 19 months.
+1 this looks better 
Looks good :) 
+1 
Looks good to me. 
LGTM! 
Just noticed there's an error on our side of the greenkeeper webhook. It says it got a 400 status last time it tried to contact greenkeeper. I'll try to sync and/or re-enable greenkeeper as soon as I've got the time. 
Hi @lpinca, Hi @phillipj,  renaming the repository from `new.nodejs.org` to `nodejs.org` might caused the problem. You can fix that issue by running `greenkeeper sync`.  Have a great day, Christoph 
Thanks for answering @christophwitzko!  Just tried `$ greenkeeper sync` but it didn't have any effect as far as I can see, the webhook link in this repo's settings are still in a bad state. Also tried `$ greenkeeper enable` which ended in this message:  ``` bash → greenkeeper enable 🌴  info enable The GitHub slug is: nodejs/nodejs.org 🌴  ERR! enable Couldn’t enable a project with this slug. 🌴  ERR! enable If you want to try your free private repo make sure to grant the necessary rights by running $ greenkeeper login --force --private 🌴  ERR! enable You have to have a plan for more than one private repo. To verify run $ greenkeeper whoami 🌴  ERR! enable If you have just recently created this repo try running $ greenkeeper sync 🌴  ERR! enable You need admin access to a repo to enable it. 🌴  ERR! enable If you think this error really shouldn’t appear let us look into it with $ greenkeeper support ```  Do you know if greenkeeper requires private access to the nodejs github organization? If so we're in bad luck, because we dont allow that kind of permission to any third-party app. 
Hey @phillipj,  thanks for trying. No, Greenkeeper does not require private access. At the moment it looks like Greenkeeper has even no public access to the `nodejs` organization from your account. Can you revoke access for Greenkeeper application [here](https://github.com/settings/applications), then run `greenkeeper login --force` and grant access to the `nodejs` organization.  Thank you for your patience, Christoph 
@christophwitzko I revoked it, and logged in again as you described. When looking at the greenkeeper settings, the only option I have next to the nodejs org is "request access". Pressing that button warns me  it will request org owners for private access. No point going further that way, as nodejs org owners won't allow that anyway.. 
Ya, we need to configure the repo with a push url, we can't grant org wide priviledges to apps. 
Since we've disabled third-party app integrations, we can't use greenkeeper any more :( should we close this issue? 
I just got a ping from @janl letting me know that they have a greenkeeper enterprise that might work for us on this. I'll work with Jan and the build team to get something in place. 
@mikeal @janl Any news on this? Or can this issue be closed?
sorry for letting this drop. We’re still happy to help. GK2 uses GH Apps (neé Integrations) and is available in the Marketplace with an Open Source plan. Feel free to give that a spin and let me know if anything doesn't work for you. — if you need support for private repos, give me a shout.
Also, we filter out all the meetups on meetup.com that don't have "node" in the name. That is probably too aggressive but I wanted something a little more manageable to begin with. Eventually we can list every meetup with the "node.js" topic. 
Wow, great idea @mikeal :+1: And what a tremendous amount of meetups and nodeschools there are :smiley:   My initial test displays three entries for `Oslo NodeSchool` which seems weird. Haven't had time to debug it, but thought it was worth mentioning. 
As a start, I have added a commit to downsize the links and have a three column layout on wider browser windows.  ![events](https://cloud.githubusercontent.com/assets/2513462/11397224/fb6f9e1e-93cb-11e5-8129-fa0091b2a404.png) 
I have some code that toggles the display of events  ![toggle](https://cloud.githubusercontent.com/assets/2513462/11399400/3bfcc8ee-93db-11e5-9ac9-d444342c56d0.gif)  If people think we should proceed with this I will make it look better and push it up.  @mikeal as mentioned previously, looks like the region list is being output three times:  ![screen shot 2015-11-26 at 01 18 51](https://cloud.githubusercontent.com/assets/2513462/11399458/b84d4ad6-93db-11e5-8d56-6510b0bdd05b.png) 
@rnsloan this already looks _so_ much more manageable. Awesome :) 
@rnsloan suggestion: add some sort of the arrow to the side of those suggesting that they open up. 
If we're going to start with them collapsed we should include some metrics for how many entries, like the number of meetups and nodeschools. 
(also @mikeal can you fix the spelling mistake in the title real quick?) 
Just got a map in ;)  <img width="1074" alt="screen shot 2015-11-25 at 4 14 33 pm" src="https://cloud.githubusercontent.com/assets/579/11412264/b14f64ae-938f-11e5-817e-453fe914d2cc.png"> 
Ok, so here's what is left: - [x] Add support for conferences, which are added manually, to show up on the map. - [x] Total counts and auto-collapsing (we have way too many to not show them collapsed by default now) - [ ] _Nice to have_: Highlighted events section for some of the bigger tent-pole stuff.  
You did the right thing +1 
Toggling of events lists is in  ![toggle](https://cloud.githubusercontent.com/assets/2513462/11432352/90910d68-9500-11e5-8e3c-e00d5770ba9b.gif)  @mikeal can we truncate the text used by the map? Produces a tall box for some like the Melbourne meetup:  ![map](https://cloud.githubusercontent.com/assets/2513462/11426262/e0eb412c-94ae-11e5-8805-979f9d6f16d9.png) 
@rnsloan I did a new count in JS so that we can add the totals to the key.  The only thing left is some documentation about how to add new events. 
Just did a bit of minor cleanup. My code is now ready for review. 
@rnsloan There's no advantage other than we have to do it anyway in order to get the totals and put them in the map key. 
Ok, from my point of view this is ready to be merged, does anyone object? 
It goes further than just the name, it's also the contents—the titles aren't the same format as they are now on `master` and we don't Markdown the commits list (nor do we have anything but the commits list).  We could change some of that though, I've been thinking of at least changing the titles so they match, the rest is more difficult without doing the full Markdown conversion of `ChangeLog` -> `CHANGELOG.md` like we did back in io.js. 
Nice, LGTM 
maybe it's time to do a proper job and introduce template strings at the same time?  ``` js const http = require('http');  http.createServer((req, res) => {   res.writeHead(200, { 'Content-Type': 'text/plain' });   res.end('Hello World\n'); }).listen(1337, '127.0.0.1', function () {   console.log(`Server running at http://${this.address().address}:${this.address().port}/`); }); ```  or is that too complicated? 
@rvagg Good point! Maybe add:  ``` js const connection = this.address(); console.log(`Server running at http://${connection.address}:${connection.port}/`); ``` 
LGTM, regarding the complexity, maybe link to the ES6 page right below the code block? something like `This code example uses EcmaScript 2015 (ES6) features. Read more _here_` 
@rvagg, @fhemberger, I can make the change the add the template string but personally I think it adds complexity by using `this.address().address`. Since this is a small introduction snippet maybe something like:   ``` js const http = require('http');  const HOSTNAME = '127.0.0.1'; const PORT = 1337;  http.createServer((req, res) => {   res.writeHead(200, { 'Content-Type': 'text/plain' });   res.end('Hello World\n'); }).listen(PORT, HOSTNAME, function () {   console.log(`Server running at http://${HOSTNAME}:${PORT}/`); }); ```  This also matches the terminology used in the [`server.listen` documentation](https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback). 
@Chris911 Good idea, let's settle for this. 
@fhemberger updated. 
:+1:  
I'd vote for lower-case variable names, there's inconsistency in `http` vs `PORT` and `HOSTNAME` and upper-casing constants is not necessarily idiomatic Node or even JavaScript even though it's common in other languages. 
Fine with me @rvagg. 
Updated.  
Nice :+1:  
Sorry that I missed this, can we re-target to master to get this in? 
I pulled this in locally and fixed the merge conflict but the behavior isn't ideal.  This ends up zooming way too far in, showing only the closes point. The code I had written was attempting to show at least 10 points on the map. 
Ok, I understand. I can adjust the code pretty quickly. I've got something to try on the sort as well. 
hey @mikeal  when you say retarget to master, do you mean rebase? Or ..? 
How do i reposition my git at `justsml/events` over to origin/master & merge just my updates and then force update over my justsml/events? 
Sorry for the dumb git questions... I'm trying.  Should I just do a fresh pull? :confounded:  
I think @mikeal means PR against master. The only way to retarget is to create a new PR :) 
Thx @stevemao I have a new PR at #389  
Strange, not able to reproduce this issue on my machine. What's your OS/version? 
If this was a problem then there might be some issue in the core. 
I'm on linux mint debian edition v2.  It works on my ubuntu 15.  On my fresh fedora install it works only the 2nd attempt.  I'm migrating to a new HDD tonight, I'll see if that fixes it... 
@phillipj @stevemao I'm able to reproduce this and please note that we are on the `events` branch. 
> If this was a problem then there might be some issue in the core.  Agreed, which probably should be reported.  I wouldn't mind replacing two levels of callbacks with sync here, as it's simpler to grasp and doesn't really matter for performance reasons as @justsml mentioned.  Trying to build with these changes results in an error for me though...  ``` bash $ npm start  > nodejs.org@1.0.0 start /nodejs.org > npm run serve   > nodejs.org@1.0.0 serve /nodejs.org > node build.js serve  fs.js:842   return binding.mkdir(pathModule._makeLong(path),                  ^  Error: EEXIST: file already exists, mkdir '/nodejs.org/build'     at Error (native)     at Object.fs.mkdirSync (fs.js:842:18)     at copystatic (/nodejs.org/build.js:175:6) ... ``` 
The problem here is not sync or performance. It's why it fails. 
I've started using metalsmith, and got this same error. No idea why it worked, but deleting the existing `/build` directory solved it. 
could you re-target to master now that the branch is merged 
I pushed a hotfix for this just pushing the geo create to before the timer end. 
i think you're in the wrong repository :) probably what you're looking for is [nodejs/node](https://github.com/nodejs/node) 
@irbull Could you check if the `-r` / `--require` command line flag does what you are asking for? :D 
@sup Opps... sorry, I hit the wrong repo. @Fishrock123 Thanks for the tip, I'll take a look. 
Guilty :hand:  
:heartbeat:  
Two small comments, but otherwise looks good to me. 
@mikeal @Trott Thanks for your comments, updated :smile:  
:+1: 
I fixed the link for nodeconf adventure. Please open another issue for any specific problems with the data from meetup.com. 
I'm not sure the fix in 17d015d is a complete fix. Someone looking at the map is almost certainly looking for upcoming events, not past events... It will be very frustrating to have to click on every thing to try to find events that aren't in the past...  It will also be very frustrating to be a repeat user of the map and have to click on stuff to see if it's changed (or not) from a past event to an upcoming event. 
NodeConf Adventure is yearly, it is both a past and future event :) 
Sure, but the site currently has details for the past event. Until it's updated for the future event, the link/map-point will probably frustrate and puzzle users. (Especially frustrating is that the year is not listed with the dates so there's no immediate indication that it's a past event.) 
This is not specific to the NodeConf link, of course. At this time, Portland NodeSchool, SF NodeSchool, and many (most?) of the meetups do not have upcoming events scheduled. The map may be frustrating for many users. 
(All that said, it is a really great idea and I hope it gets constant tweaks to make it better and better all the time. And yeah, I know...I should dive in a tweak it myself...) 
So, I don't think the primary utility is to find an upcoming event so much as it is to figure out where the local community endpoints are. To the end most of the active ones make a lot of sense, even some of the inactive ones have value, the only thing I'd like to get rid of are events that, for some reason, tag themselves Node.js but have nothing to do with Node.js. 
In that case, maybe this is just a feature request for some color coding or something. Like, I think color coding "has an upcoming event scheduled" vs. "no upcoming events scheduled" is going to be at least as useful to the average user than color coding a meetup vs. a NodeSchool vs. a conference.  Of course, it may not be feasible due to API limitations or whatever... :-/ 
NodeSchool has variations in color for groups with upcoming events. My concern for this page though is that we don't yet have a way to regularly run and update this data so if we end up running less than once every few weeks we won't be up to date enough to really tell if a monthly meetup have something "upcoming" or not :( 
Perhaps one other thing to consider: The link you click to get to the map says "Events". It's fair to imagine that people who click that link will assume the map is of upcoming events and not a community map or something. I don't know that there's a better place for the map or a way to set the expectation differently. But you know...something to think about anyway. 
I feel the same way, I just can't think of a better tab name :) 
Looks like the issue here (and with a _lot_ of the other meetup listings) is that `upcoming_events` is not used by `https://api.meetup.com/2/groups`. The `upcoming_events` field is used by `https://api.meetup.com/find/groups`.   Of course, it's not as easy as switching to the latter API endpoint because then it will ignore `topic` and `category`.  `¯\_(ツ)_/¯`  Relevant links: - https://secure.meetup.com/meetup_api/console/?path=/2/groups - https://secure.meetup.com/meetup_api/console/?path=/find/groups 
<strike>Oh, looks like [the docs](http://www.meetup.com/meetup_api/docs/find/groups/) list fields that the console does not. That's annoying (although maybe explained somewhere and I should stop typing comments in GitHub issues and start reading the docs?).</strike>  <strike>According to the above-linked docs, /find/groups accepts `category`, `upcoming_event`, and `topics` (not `topic`) so maybe it's usable after all if the docs are right?</strike>  <strike>Somebody fix this so I can stop being slightly embarrassed that I haven't tried yet.</strike>  Oops, `topics` is returned in the response, not queried via the request.  
Something like this (with the addition of an API key) might work? https://api.meetup.com/find/groups?upcoming_events=true&text=nodejs&category=34 
We already give it that flag :( https://github.com/nodejs/nodejs.org/blob/master/events/pull-meetup.js#L7 
It's given that flag, but it goes to an API endpoint that doesn't support that flag.  I'm suggesting a different API endpoint (but it unfortunately has other limitations so meh). 
Another thing to consider: several groups that don't have an upcoming meetup, or even one in the last 6 months, still have active message boards on meetup.coma and are a still a good resource for people in that area.  That said, if we could filter out meetups with no activity (events or message board) in the last year or so that would be great, I just haven't found a reliable way to do that yet. 
I'll take a stab at the filtering of meetups based upon events and messages.  
You can check for past events with the current /2/groups endpoint using last_event.time property, but checking for board activity requires another call to /groupName/boards. Calling /groupName/boards for groups that don't have any recent events results in almost immediate throttling, so you'll need to stagger calls to that endpoint to get this to work. 
Is it really worth it to add such complexity? I think we already offer a great service of listing all these groups, performing several checks to determine activity is a little bit out of scope IMHO.  Even if an event is dormant in your region, you may want to get in touch with the organizers to set up a new meeting (or take over the group). As there hasn't been any activity on this issue for six months as well, I'm in favor of closing it. 
Closing this. As discussed in #1031, event aggregation from meetup.com will be removed in the future, as it adds too much noise and is hard to filter correctly.
Hopefully that looks better 
Hey @mikeal Hope you had a good thanksgiving.  Did you notice my latest update? ... Presumably after you've woken up out of the food coma. :sleeping:  
This looks great! I've merged locally and am modifying just a little bit. I realized that we also need a minimum threshold of distance so that when you're in a very dense area you don't get a hyper localized map. 
This was merged as part of https://github.com/nodejs/nodejs.org/commit/b3efd13a7e56262c350cf73a71da40755f60b290 
LGTM 
LGTM 
LGTM! 
Actually, one nit: The line that's edited is now 81 chars long, but the file is wrapped at 80 chars. Can you wrap the last word to the next line? 
should i revert the merge, @Trott? 
Nah, it's a nit. You can leave it. (In my opinion anyway.) If someone wants to fix it in another PR, that would be fine by me. Or not. Whatever. Someone else may care more about the 80-char wrap than me. @bengl maybe? 
i'll do it real quick 
#393 
i'll just - uh - merge this myself 
LGTM! 
This is most likely a npm issue, rather than the Node.js runtime.   A similar npm issue report: https://github.com/npm/npm/issues/8872. If the proposed solution doesn't work for you, I'd suggest you join the ongoing discussion in that specific issue. 
ping @nodejs/website  
I think most of that was written between @fhemberger and @phillipj so they are probably best to review. 
:+1: for comments!!! 
Very nice work @sup! The setup isn't very self explanatory for new comers, hopefully these comments will make it a lot easier too grasp :+1:   Other than the comments, this LGTM.  
going live though copyedits are still welcome of course 
@rvagg read through it, didn't notice any spelling or wording issues 
:+1: 
The changes look good to me but they will be overwritten when the  `pull-meetup.js` script is run. 
Agreed @lpinca. I think the script @mikeal wrote will overwrite this.  
woot! Are we the only ones in the world NOT using meetup? :scream:  BTW, I think is not good looking create an if stament in `pull-meetup.js` just to avoid Pereira been included there. Any other ideas?  
From https://nodejs.org/en/get-involved/events/  > If you aren't listed on those sites, or you are the organizer of a conference that is not listed, you can add it manually by editing events.md and sending a pull request to the website repo.  If it will be overwritten this is a problem? 
I was thinking about something like this:  ``` diff diff --git a/events/custom.json b/events/custom.json new file mode 100644 index 0000000..5048232 --- /dev/null +++ b/events/custom.json @@ -0,0 +1,19 @@ +[ +  { +    "id": 18205029, +    "created": 1393477200000, +    "link": "http://pereirajs.org/", +    "description": "Comunidad de aprendizaje del lenguaje Javascript", +    "organizer": { +      "member_id": "", +      "name": "", +      "photo": { +        "highres_link": "", +        "photo_id": "", +        "photo_link": "", +        "thumb_link": "" +      } +    }, +    "members": 30 +  } +] diff --git a/events/pull-meetup.js b/events/pull-meetup.js index 05749c1..d1a3391 100644 --- a/events/pull-meetup.js +++ b/events/pull-meetup.js @@ -1,7 +1,9 @@  var request = require('request').defaults({json: true, headers: {'user-agent': 'pull-meeting-0.1'}}),    url = 'https://api.meetup.com/2/groups',    auth = process.env.MEETUP_TOKEN, +  merge = require('lodash.merge'),    qs = require('querystring'), +  custom = require('./custom'),    yml = require('./yaml-sync'),    opts =    { topic: 'nodejs',     category: 34,     upcoming_events: true,     key: auth @@ -29,6 +31,12 @@ function finish (events) {      }      var region = yml.getRegion(countryMap[event.country])      if (!region.meetups) region.meetups = [] +    custom.some(elem => { +      if (event.id === elem.id) { +        event = merge(event, elem) +        return true +      } +    })      clean(event)      yml.replace(region.meetups, 'name', event.name, event)    }) diff --git a/package.json b/package.json index fb04c03..9e9f611 100644 --- a/package.json +++ b/package.json @@ -30,6 +30,7 @@      "html-to-text": "^1.5.0",      "js-yaml": "^3.4.5",      "junk": "1.0.2", +    "lodash.merge": "^3.3.2",      "map-async": "0.1.1",      "marked": "0.3.5",      "metalsmith": "2.1.0", ```  so you can simply add your customized event in `custom.json` and in this way changes are not overwritten. The problem is that the event id is not shown and has to be extracted from meetup api. Truthfully, I think this is cumbersome so if you have better ideas please share. 
When we pull data in from another source we consider that resource the source of truth for that information. If we want the local copy to be the source of truth we should add a flag in the markdown and make sure our scripts honor it and don't overwrite it. I _don't_ think we should try and merge information we have locally with information we pull from another source, that's going to get messy :) 
Can we just simply include two md files: one is generated from the script and the other is not? 
I tried to do what @mikeal said : db53e2909d11a375356eb431f6b5a7009ae0b10d  Tell me if I need to change something.  cc @cronopio  
@nodejs/website @pin3da What's the status of this PR? 
@fhemberger I just fixed the conflicts. I also added the @lpinca 's suggestions.  Let me know if there is something missing/wrong.  Thank you (: 
Left some comments but LGTM. 
All good here, :ship: ? 
aye 
Thank you @pin3da! 
Thank you all :smiley_cat:  
to be honest i don't think that that page is necessary anymore since so many companies/orgs have adopted node that it would be impossible to list all. i mean, everyone knows about node nowadays, we don't have to list people who use it 
@sup sure, _everyone_ is using node these days, but the 404 error _could_ be avoided or re-directed to a more friendly page. I will update my page to no longer link to: https://nodejs.org/industry/ ... thanks! 
oh, sure. didn't realize you meant that :smile:  
Awesome @vdemedes! LGTM 
Looks like we reached something like a consensus on this :) Merging :) 
Super, thanks guys! 
Uh oh, css hack got merged in (https://github.com/nodejs/nodejs.org/pull/400/files#diff-d5580c417f62b446e8240abd97e044c8R140). But no worries, I'll submit another PR to fix that small thing. 
The markdown files refer to nodejs/node-private but links to that repo are not visible to users. Not sure if this is really an issue but not sure it's _not_ an issue so... `¯\_(ツ)_/¯` 
yeah, I've been manually removing them from the changelogs but obviously missed a few! will rectify, thanks 
good call @phillipj, I forgot all about it .. I did have this on my list a few weeks ago when we first started planning but the whole thing got blown way up into a major exercise. I need to write up a formal policy and document the procedures to include little things like this. 
@sup Thanks, updated :) 
:dizzy:  
Closing as this is not a website issue 
@tankdeper please report your issue here: https://github.com/node-inspector/node-inspector/issues/new 
@sup sorry, l will change it. 
the site supports localization, all the markdown content can be localized and you can even add localization specific templates and css (but you don't have to).  @nodejs/nodejs-cn  
please refer to [the translation document](https://github.com/nodejs/nodejs.org/blob/master/TRANSLATION.md). as @mikeal mentioned, you probably want to join the [chinese working group](https://github.com/nodejs/nodejs-zh-CN). normally you just need to ask nicely, so create an issue in their repo and start translating! 
+1 
Now that the blog supports pagination by year, I have moved these changes to a different template (`layouts/category-index.hbs`) instead of complicating `layouts/blog-index.hbs`.  Most of these "categories" don't have that many posts, with the exception of "release" and "weekly-updates", and therefore I have not implemented pagination. These pages are **not** intended to be linked to directly, but only to prevent 404's and 403's if someone traverses up the path.  I can add `robots: noindex, follow` to the front matter of these index pages if there is a preference to discourage search engines indexing them. 
@mrkiffie Hi, first of all: Thank you for your patience and sorry about the long delay!  > I can add robots: noindex, follow to the front matter of these index pages if there is a preference to discourage search engines indexing them.  Yes, please change the robots setting, after that it's ready to land. 🎉  
@fhemberger No worries and thank you. I appreciate the apology even though it is not necessary.  I have added the `robots: noindex, follow` to the front matter as requested.  Thank you for your feedback. 
Merged, thanks! 
@sup I've updated the PR - added a short description as you suggested. I also made a couple of formatting changes in the navigation helper that were failing on travis but not picked up pre-commit. 
can we get a screenshot :) 
Hey @mikeal, this doesn't change the appearance at all. It only changes way the navigation is managed.   Instead of having to maintain different menu templates for different sidebar menus, they share a generic template and the menus are defined in each locale's `site.json`.   The benefit will be more noticeable for additional translations of the site as they won't require the menu structure to be identical to the english version. (I'm not sure if this behaviour is desirable or not?) 
ahhhh, ok :) :+1:  
The merge conflict above is a result of deleting `layouts/partials/docs-menu.hbs` which has since had additions (#324). The merge conflict can be easily resolved, but real conflict in this PR is in the direction it takes the sidebar menu.  
I have resolved the merge conflict.   As far as my testing goes, I think that I've been able to replicate the current navigation.  I have added additional logic in the template to support the API doc's "LTS" label and the text is an optional `subtext` property in the locale's `site.json`.  Let me know if there are any additional considerations I have missed. 
@nodejs/website Can you please take a look and test it? This would be a **huge** improvement. 
Seems to work fine. LGTM 
I've update the PR with the following changes: - Fix urls to LTS and Stable API docs - made relative to the domain's root instead of the locale - Fix malformed html by adding missing closing tags (whoops 😳) - Moving subtext conditional - because API docs start with a `/`  Please let me know if you spot anything else out of the ordinary. 
LGTM :+1: 
Merged, thank you all! 
:+1:  
Merging this now, you know who to ping if it doesn't work at next release @nodejs/release :) 
will be testing this out shortly! https://github.com/nodejs/node/issues/4857 
https://github.com/nodejs/node/pull/5878 adds momentum scrolling to the docs. If we're going with it, we should probably do it for the main site too.  cc: @lpinca 
Looks fine, but I'm gonna try it first. 
Hmm I'm not sure why but I can't see the difference here with it enabled. Anyway the property is not auto prefixed. 
@moorebrett0 Hi, can you please have a look at the comments above and update your PR? I'd like to get it merged. 
I tried pulling again this change and can't see the difference on my iPhone. Scroll works the same with or without this change. I vote for closing this if someone can confirm that there is no difference. 
Hey there,   sorry for the delayed response - removed the semi colon.      This seems to work for me on ios-9 can anyone confirm? 
@nodejs/website collaborators with iOS devices, can you please test this pull request? Do you notice any difference when scrolling? 
There is no difference on my iPhone too.  Used device: iPhone 6+ Browser: Chrome for iOS, Safari 
I close this as there is no advantage in getting this merged. If someone can prove otherwise, please reopen.  
hey @fxkamalasawara, the tutorial you read might have been outdated. you can find a list of all modules for node.js on https://www.npmjs.com/.  or if you're looking for the modules that are shipped with node, such as `fs`, you can consult the API documentation here: https://nodejs.org/dist/latest-v5.x/docs/api/fs.html (this one is for `fs`)  let me know if anything is unclear! 
Should we remove this subdomain then? 
yup, probably 
@fxkamalasawara just out of interest, can you link us the tutorial you were reading? Thanks. 
Hey @sup thanks for the links 
@stevemao  I was consulting https://nodejs.org/dist/latest-v5.x/docs/api/ docs majorly, but sometimes i read a few things from  http://www.tutorialspoint.com/nodejs/nodejs_npm.htm.  Here in the first paragraph you will find. this  "Online repositories for node.js packages/modules which are searchable on search.nodejs.org"  Thanks. 
@fxkamalasawara it looks like the link in the article/tutorial is wrong. the search site is definitely http://npmjs.com 
i don't really know though. paging @nodejs/npm for help 
I'm pretty sure `search.nodejs.org` was never a thing, and I just landed a change in `npm@3.5.3` and `npm@2.14.15` (LTS) that removes references to the long-gone `search,npmjs.org` from npm's docs. 
> I'm pretty sure `search.nodejs.org` was never a thing  same, I can't recall that ever existing. 
Any update on removing the sub domain? 
@stevemao The subdomain doesn't exist, everything `*.nodejs.org` is redirected to `nodejs.org`. (see [nginx config](https://raw.githubusercontent.com/nodejs/build/master/setup/www/resources/config/nodejs.org).)  Closing this. 
:+1:  
LGTM! 
@sup Thanks, revised and updated :) 
LGTM but I've never spent time in these files so I'd like to see someone who has weigh in. 
Big :+1: for cleaning this up. 
that number is an internal C++ variable called `NODE_MODULE_VERSION` which is used when loading native add-ons, it checks that the compiled number matches the internal number before accepting them. It used to be stored as hex and now it's just an integer. The numbers there are correct.  However, this issue raises the point that the interpretation of the column name is "number of modules" as it is now, perhaps we should change it to `NODE_MODULE_VERSION` to avoid this. There was a discussion on this earlier on, I can't recall the issue, however. 
@rvagg: Thanks for the clarificiation.  As the column is currently named "Modules", it definitely creates confusion for someone new to node. I agree we should rename it to something more appropriate. :+1:  
Closing this for now, the PR should fix that. 
Thanks @fhemberger :+1:  
+1 :) 
+1, it's time 
also, do we have some kind of recap blog post we can put up? 
@nodejs/evangelism ^ wrapup blog post. 
Note to other reviewers: This went through a round of review over at the [docs repo](https://github.com/nodejs/docs/pull/24). /cc @nodejs/documentation  
@drewfish Hi, can you please have a look at the comments above and update your PR? 
No feedback from the original poster for months, closing this. I also think it's rather suited for a personal blog post than for the Node.js website. 
Yeah, sorry about that, just haven't been able to get to this :( 
I'm working on this now. Have a quick question on committing - can you ping me when you have a sec? tia  
NM - I created pull request. 
also /cc @maxogden  
hex value in earlier version, but is now represented as an Integer. :large_blue_circle:  I hate to nitpick but this should be versions or  in an earlier version.  
@kelthenoble You're right. Fixed. 
:+1: Sweet :100:  
I had it labeled as NODE_MODULE_VERSION in the original pull request I made, the feedback was that it was too long. But I am personally +1 on it being longer so that its more clear to the uninitiated. 
Merged, thanks everyone. 
LGTM 
LGTM 
LGTM! 
:+1:  
Done @sup! 
:smile:  
Thanks! How often do changes get deployed? 
They should be deployed automatically, some changes might take up to an hour (w/o force reload) due to caching. 
woot! 
#430, should we? 
closing since the PR is merged! 
Merged 👌 
I believe these examples are in the docs of nodejs that support them. If you switch to an older version they shouldn't be there. 
thing is, the latest releases all support most ES6 features out of the box. even the LTS does that, so it's officially encouraged. but what we might be able to do is add a link to an ES6 introduction under the code example on the about page in case someone is confused  but what @stevemao says does apply, the pre-4.x docs are still in ES5 
I think it's good to push ES6 unless it's a feature set that is outside of Node internally. For example some ES6 that needs to be transpiled by external tool like babel should not be in docs because then you have to explain that workflow. 
> but what we might be able to do is add a link to an ES6 introduction under the code example on the about page in case someone is confused  I don't think this is necessary. We already have docs about features in es2015. If we add a link to all the pages that have es2015 code it would be too noisy. Not to mention that there are many people already using es2015 and a there are a lot of material about es2015 online.  Closing this now. @forgotPassword if you find anything that does not work against the corresponding node version out of the box please fire a bug :) thanks. 
Thanks for the link @stevemao, I knew there was an issue in here about this recently that I couldn't find.   Folks in here, please see #467 for _possible_ way forward. Only discussion at this stage.  
I'm really +:100: on this, cc'ing @nodejs/docker for a review 
I thought about this for a while when I wrote the guide, and we have had extensible discussions within the @nodejs/docker Working Group on similar topics nodejs/docker-iojs#23 nodejs/docker-iojs#26 nodejs/docker-node#1  Just so we are on the same page; _yes_ you should never ever run your Docker containers as root in production!  There are some other considerations though. The first is the intended audience of the guide. Is this people who are new to Docker and Node or those who want to deploy their Node.js applications to production using Docker? We don't want to make the guide too complicated by adding too many steps.  The second is that, and this is mentioned in the linked issues, when running as a user you can access mounted volumes inside your container which is a popular use case when developing using Docker containers. Production deployments should not use volumes for many reasons, immutability, security and performance to name a few.  My gut tels me too keep the guide simple and easy to follow, and maybe make a second one for best practices deploying Node.js application to production using Docker? 
Second guide a la "Best practices running Node.js on Docker in production" sounds good as well. But we should add a note to the existing one that this guide is intended for getting started and development only and it should not be used for production.  Most devops tutorials only cover the "getting started" part (or the other far end of the range "how to set up your 100+ node datacenter on AWS") and lack topics like security, because people "just know what to do". Which isn't the case quite often and makes it hard for beginners. 
> Second guide a la "Best practices running Node.js on Docker in production" sounds good as well. But we should add a note to the existing one that this guide is intended for getting started and development only and it should not be used for production.  Agreed.  > Most devops tutorials only cover the "getting started" part (or the other far end of the range "how to set up your 100+ node datacenter on AWS") and lack topics like security, because people "just know what to do". Which isn't the case quite often and makes it hard for beginners.  This is a common pitfall. Lets make sure we cover both :smile:  
I have proposed #456 to clarity the purpose of the original Docker Guide. I will see if I find the time to draft a new guide for production deployments. 
ok so another more in depth "second guide" I suppose it's not really node.js responsibility to tutorial on docker but they do go hand in hand so well it kind of makes sense. If another guide will come about I have some topics I would be happy to write up. as I know it's hard to find "real" working docker production cases.  
I agree there is a need here, especially since there are some cases you run into with Node.js that you don't with other images (SIGINT not being handled the same for example). I'd be willing to toss my hat in the ring for this.  I'll try to have a draft this week @Starefossen. 
So I took a pass at this, and it ended up spelling out the logic put forward here: https://github.com/docker/docker-bench-security  Perhaps we should just link to the docker bench security project?  There was also an awesome comment from @Starefossen that I dug up here: https://github.com/nodejs/docker-node/issues/36#issuecomment-145938549  These two together could be enough to get us started. 
It would look something like this:  # Docker and Node.js Best Practices  ## Environment Variables  Run with `NODE_ENV` set to `production`. This is the way you would pass inn secrets and other runtime configurations to your application as well.  ``` -e "NODE_ENV=production" ```  ## Non-root User  By default Docker runs container as root which inside of the container can pose as a security issue. You would want to run the container as an unprivileged user wherever possible. This is however not supported out of the box with the `node` Docker image.  ``` Dockerfile FROM node:4.1.2 # Add our user and group first to make sure their IDs get assigned consistently RUN groupadd -r app && useradd -r -g app app  ```  This Docker Image can than be run with the `app` user in the following way:   ``` -u "app" ```  #### Memory  By default any Docker Container may consume as much of the hardware such as CPU and RAM. If you are running multiple containers on the same host you should limit how much memory they can consume.       ``` -m "300M" --memory-swap "1G" ```  ## CMD  When creating an image, you can bypass the `package.json`'s `start` command and bake it directly into the image itself. This reduces the number of processes running inside of your container.  ``` Dockerfile CMD ["node","index.js"] ```  ## Docker Run  Here is an example of how you would run a default Node.JS Docker Containerized application:   ``` $ docker run \   -e "NODE_ENV=production" \   -u "app" \   -m "300M" --memory-swap "1G" \   -w "/usr/src/app" \   --name "my-nodejs-app" \   node [script] ```  ## Security  The Docker team has provided a tool to analyze your running containers for potential security issues. You can download and run this tool from here: https://github.com/docker/docker-bench-security 
@nodejs/docker can we get a :+1: here, would like to ship this and close https://github.com/nodejs/docker-node/issues/1 
+1 to go ahead and create a PR for this @retrohacker 
Landed in https://github.com/nodejs/docker-node/pull/122 
Should we create a link to this guide from the [current Docker guide](https://nodejs.org/en/docs/guides/nodejs-docker-webapp/)? 
@Starefossen Yes, please. 
PR is up at #632 :smile:  
Awesome, already merged. I'm closing this issue. 
LGTM 
yup! LGTM 
:+1:  
**Important:** If this gets merged, we need a redirect from `docs/es6` to `docs/es2015`. 
To prevent having to synchronise landing this PR, with a PR in the build repo for the redirect just mentioned, it would be best to copy `locale/en/docs/es6.md → locale/en/docs/es2015.md` instead of moving. That would leave time for the redirect to be put in place sometime later, before actually deleting `locale/en/docs/es6.md` in this repo.  A small follow-up about the redirect, it should be as easy as adding a line in the nginx conf: https://github.com/nodejs/build/blob/master/setup/www/resources/config/nodejs.org 
:+1:  
Wait, is it clear what is strictly 2015 and what falls in to 2016 and 2017? are we also planning on adding es2016.html and es2017.html etc.? I like that "ES6" is still a generic enough catch-all for "stuff beyond ES5" but can accept that we're getting towards a point where that's not going to work any more. Can we opt for something more generic than "ES2016" though? Maybe "beyond_es5.html"? Is "esnext.html" acceptable or has that been tainted already? 
According to kangax, `Array.prototype.includes()` is part of "ES7" which I'm guessing means ES2017 (maybe) now and we mention it in the current es6.html, does that mean we immediately need an es2017.html? I'm not a fan and would rather see all moved to some kind of "ES compatibility" page where we list what works with what version of Node. 
I vote for esnext. ES6 is the old name of ES2015 and `Array.prototype.includes()` does not belong to it. 
Incorrect. ES2015 is the name of the 6th edition of the ECMAScript spec.  ES6 and ES2015 are both correct identifiers for that version of the spec, and ES7 and ES2016 will both be correct identifiers for the upcoming version (which contains `Array#includes`).  Post-ES6, it would probably be a good idea to have a single page that lists ES proposals and their stages, along with their levels of support, rather than coupling to future arbitrary year or edition number designations. 
How about rephrasing the page as some kind of compatibility table? Where you can see support behind flags and unflagged support?  | ES6 | Version | | --- | --- | | [Feature X]() | 0.12 (`--harmony`), 4.0 | | [Feature Y]() | 4.2 (`--es_staging`), 5.0 | | [Feature Z]() | 5.0 |  | ES7 | Version | | --- | --- | | [Feature A]() | 4.2 | | [Feature B]() | 6.0 |  Working for clients with different node versions in production, it would be handy to see if a particular feature you want to use is available in that version or if it requires a flag. 
Thanks @ljharb, in such case I think it's better to keep "docs/es6" if we decide to add "docs/es7" (and put `Array.prototype.includes()` there). 
@stevemao … and create a separate page for each year's new ES specs? Also, half of the page isn't strictly tied to ES6 at all but how to access those new features in general. So I think it should stay on one page. 
Cool. To sum up, 1. The tab name needs to be generic (beyond_es5?). 2. We need a redirect from docs/es6 to docs/beyond_es5. 3. On that single page, we need something like https://github.com/nodejs/nodejs.org/pull/434#issuecomment-168468225 
Sorry guys if anyone wants to take over this by all means. 
Closing because of #671  
LGTM! 
😀 
Seems to have been resolved now. 
Should `build.js` be called `client.js`? 
@stevemao in tradition with metalsmith, i'd leave it at `build.js` 
With these changes, `build.js` strictly consist of build related code. Why would we call it `client.js` @stevemao? 
I just thought the code in `build.js` is the client side opposite to `server.js` 
LGTM 
@grateyinger ... for those just getting started with Node.js, the best place to start is with resources such as http://nodeschool.io or http://stackoverflow.com. General questions about Node.js can also be directed at the http://github.com/nodejs/help repository issue tracker. This particular repository is used to track technical issues and development of Node itself and is not the right place to post questions about getting started. 
I teach you. 
:+1:  
LGTM! 
-1 on the `&nbsp;` spacing.  We have a css rule that can be adapted (see `layouts/css/base.styl`):  ``` diff +nav.pagination, p     a         padded-link(2px) ```  otherwise LGTM. 
In addition to using the `padded-link` helper, you could replace the JS/template logic for the separator with CSS aswell by adding this to the bottom of `layouts/css/page-modules/_blog-index.styl`:  ``` css nav.pagination     a         padded-link(2px)      a + a:before         content " | "         color $black ```  The adjacent sibling selectors `a + a` makes the and-logic you've got in a handlebars helper, a problem the browser fixes for you instead.  Only bummer I can see is the separator gets the same background colour as the "Older" link when hovering, looks kinda strange, but I would say it does the trick considering it simplifies the code a lot.  ![blog index prev](https://cloud.githubusercontent.com/assets/1231635/12729848/029801da-c929-11e5-9b73-17f7b1af80db.png) 
Fixed this in a slightly different manner as @phillipj described it. 
:+1:  
I also feel like the [learning section](https://nodejs.org/en/get-involved/#learning) should be more proeminent on the website.  If a new comer visits [nodejs.org](https://nodejs.org) there's no "Get started" at first sight, so maybe we could add a link to the menu bar or event a section to the home page? 
We should call out the `help` repo as the default place to ask any question if you can't figure out where or how you should participate. 
seconded  `help repo`  
Django folks have a good start page that we can take cues from -- https://www.djangoproject.com/start/ 
Maybe something like this: http://whatcanidoformozilla.org/ 
Good catch, but we should try to move the edit link out of the `<h1>` completely for search engine indexing/a11y reasons. 
@fhemberger Thanks, I hadn't considered that. Probably would have been bad to have all the search engine results start with "Edit on GitHub" heh. Moved it outside and increased the `font-size` for `.edit-link` since it doesn't inherit the `h1` `font-size` anymore. 
Great, thank you! Merged. 
LGTM. 
Maybe leave a reference of where this is copied from? 
@stevemao It's the exact same text as before (with adjusted wrapping) and new "`isolate-0xnnnnnnnnnnnn-v8.log` (where `n` is a digit)". 
Oh from the commit message I thought it was copied from somewhere. 
@stevemao I was using _copyedit_ in this context: https://en.wikipedia.org/wiki/Copy_editing   I use that word a lot in my commit messages (when I'm fixing typos, punctuation, formatting, etc.) but if it's confusing to a lot of people, I can try to use a synonym instead. 
@Trott It's Ok I guess. My English is very bad :smile:  
Merged via 6a61f69, thanks! 
@Trott Thank you for noticing this. I'll submit a PR with updates now that the tick processor is bundled with the node binary.  
The page is still referring to the v8 profiling tools in the source code (which I believe are no longer included). 
Good catch. Actually, the integration of the `--prof-process` flag into the LTS branch means we should remove all mention of scripts from the guide. 
This should be cross-checked with #409. 
Confirmed #409 fixes it. 
cc @Trott  
LGTM 
Closing this in favor of #449. Guessing it could be re-opened if `--prof-process` gets backported to 4.x. 
There are occasional in-person meetings and there is budget allocated for board member travel if their company doesn't cover it.  On Wednesday, January 6, 2016, Jeremiah Senkpiel notifications@github.com wrote:  > A concern was brought to me that people elected form the community board > elections would have to fly to these meetings in-person. >  > ## cc @mikeal https://github.com/mikeal >  > You can view, comment on, or merge this pull request online at: >  >   https://github.com/nodejs/nodejs.org/pull/450 > Commit Summary > - clarify that the board meeting is a remote call >  > File Changes > - _M_ locale/en/blog/community/individual-membership.md >   https://github.com/nodejs/nodejs.org/pull/450/files#diff-0 (2) >  > Patch Links: > - https://github.com/nodejs/nodejs.org/pull/450.patch > - https://github.com/nodejs/nodejs.org/pull/450.diff >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/nodejs.org/pull/450. 
Hmmm, noted. 
still, it does sound a bit misleading IMO. maybe change it to `remote and sometimes in-person`? 
@Fishrock123 do you mind revising? It would be a nice addition. 
ping @Fishrock123  
closing since it may not be remote, if somoene else feels strongly about the wording feel free to take it up  
As promised, I am now closing this issue — if you still want to help out with the Docs WG, fret not, you can [sign up here](https://github.com/nodejs/docs/issues/63). Thanks all! :wave: 
@nodejs/npm  
Closing this issue due to lack of activity (and actionable tasks).
@ZibbyKeaton is this satisfactory: https://github.com/nodejs/nodejs.org/pull/462 ? 
@rnsloan 👌 
@matthewloring Updated the PR with your suggestions and removed the headlines again. 
@fhemberger The changes look good. Hopefully this section will be even simpler once `--prof-process` is backported into 4.x 
I'm somewhat confused about this one... Should it be merged instead of #449, or as an addition to it? 
@phillipj Instead. This one contains information for both v4.2 and v5, until the new flag gets backported to v4.2. 
:+1:  
cc @nodejs/docker  
LGTM, merged. 
@thefourtheye Thanks, fixed and updated :) PTAL 
Thanks @JungMinu.   NationJS is having a NodeDay on March 11: http://nationjs.com/ 
@rosskukulinski Thanks, updated :) 
Good eye 
> They are supposed to match, right?  It would surprise me if it was made so deliberately. Good catch :+1:  
There might be other inconsistent colours. #367  
This should only affect `apple-touch-icon.png` and `favicon.ico` from the looks of it, a simple hue-rotate could suffice. I'm not really adept in Photoshop, so if someone could take over this, I'd be grateful :) 
BTW: Is there an exact definition of the node.js green? Some sort of brand guideline? When I started the new website, I used the tone from the SVG version of the logo. Icons were taken from the original website as well.  So if it hasn't been done already, it would be good to define the "official" colors somewhere, also as reference for future design updates, prints, stickers, etc.  /cc @mikeal  
Hi @fhemberger , it'll depend on https://github.com/nodejs/evangelism/issues/179 
@stevemao I'm talking about the current status, not future iterations (as there also is no time table defined yet). We could need a clear definition now, as other node-related projects, conferences, etc. may use the color scheme as well. 
Like [Ubuntu's Design Guideline](http://design.ubuntu.com/brand/colour-palette)? (I'm not affiliated with Canonical or others. It's because their color guides are nice.)  We can do like:   - `#83cd29` ![](http://placehold.it/10/83cd29/83cd29) Main Green   - `#404137` ![](http://placehold.it/10/404137/404137) Gray   - `#309045` ![](http://placehold.it/10/309045/309045) Foundation Green (optional) - Could add JS yellow, or Foundation blue.  I'm not sure about Joyent related things. Until this day I'm still sticking to [official guide](https://nodejs.org/static/documents/foundation-visual-guidelines.pdf). It says we must not change the color. 
@bentinata Yes, exactly. This looks really great.  Regarding Joyent's "visual guidelines": I don't think a low res, low quality JPG embedded in a Word file, converted to PDF can seriously be used as any sort of color guideline. It would help to get the exact info from Joyent (or the designer of the logo) themselves. 
Here's a screenshot from that design guide:  ![design-guide](https://cloud.githubusercontent.com/assets/115237/12280915/fc262134-b991-11e5-842f-d5f8dfe53eb3.png)  Looks like it's something approximately to `#8cc84c` on `o` there, but JPG compression messed with heavily with that color, and the `js` part is a whole different shade. Not really a source we can work with. 
@mikeal Are you able to dig up a PDF or psd guidelines document, if one exists? (Or even point us to who to ask?) 
Accessibility (#501) dictates that we use a darker green on he links and buttons if we are to keep the white background. With a dark background there would of course be no concern, and we could make those colors match. 
LGTM, merged! 
LGTM 
Waiting on confirmation from issue creator this is the change they were looking for before merging. 
Looks great, thanks! 
LGTM 
LGTM 
This may be a dumb question but how long have linux distributions supported xz ?  Just want to be sure that on platforms like RHEL 6 and CENTOS 5.x it is already installed or easily available 
@mhdawson can't speak for rhel6 but centos5 [doesn't have xz support](https://github.com/nodejs/build/issues/258) out of the box. 
Do we need some info on the download page that says if you can't use xz then the gz are under the "All download options"  ?  Might be too obvious.   
.xz is getting pretty common these days, ever since the linux kernel project switched to it exclusively there's been a steady stream of adaption, it's even in `tar` these days (`-J`), even for distros where it's not available by default I bet people are getting used to dealing with it. I'd prefer to leave it alone but here's an option:  Current  ![screen shot 2016-01-14 at 5 01 23 pm](https://cloud.githubusercontent.com/assets/495647/12316992/cbefcdb2-bae0-11e5-9fc4-64ac0de04c5f.png)  .xz note:  ![screen shot 2016-01-14 at 5 03 26 pm](https://cloud.githubusercontent.com/assets/495647/12316996/d4ca15d2-bae0-11e5-9dac-e8dac4a7869c.png) 
How about treating the source tarball with a similar treatment? 
cause xz on OS X is a pain in the backside, that's why I left it off, we could mention it in the note however 
You didn't want to do a pull request & go about it that way? If not I'll handle it.  
I will work on the pull request now, thanks.  
No worries :)  
:+1: @stevemao  
Pull request is open.  https://github.com/nodejs/nodejs.org/pull/465 
Pull request merged. Thank you @kelthenoble  
Anytime man :100:  
this looks good to me.  
That makes sense, nice work @fhemberger dynamically :+1:  
Just pushed some style issues introduced with this PR in 87db4eea4d83597f8dfdc1f5037df6db1e5a94da, too bad we can't get Travis up-n-running again due to org restrictions :( 
Ref: #431 
Looks like a good approach 👍 
Looks like a great idea ! Good work!  I gladly volunteer to port all other existing doc pages to have the two versions if the help is needed. 
@rvagg skimming through all the code blocks on #4733 that looks really useful to me. Bearing in mind future changes to the language. Also, through adding dimension to the docs I can imagine lots of other use cases for tutorials and examples etc.... I'll grab this up, I guess. 
@benjamingr since frontend is not my forte, it's been too long since I kept track of what browsers support what, and I was putting this up as a POC initially, would you mind taking this over? The branch is in the repo so you can take it and do what you like with it until you're happy with it. 
@benjamingr, @rvagg also I had a quick look a while ago, and I think the API docs are using features like `display: flex`, which liekly exclude IE8 support anyhow. Since Microsoft is dropping support for it, I wouldn't put too much work into compat.  
@benjamingr @rvagg @eljefedelrodeodeljefe   According to [Web Browser Market Share Trends](http://www.w3counter.com/trends), IE8 has only 1.1% users in total (2015-12). And I tried https://nodejs.org/en/about/ in IE8, it looks like this:  ![image](https://cloud.githubusercontent.com/assets/5453359/12389887/c645e214-be16-11e5-9b99-5fff84f89b4e.png)  So I think it's time to say goodbye to IE8. 
@eljefedelrodeodeljefe `display: flex` excludes IE9 too IIRC,  I vote to disable support for any browsers under latest (since it's for developers). JavaScript developers don't use old browsers anyway. The only case I can think of that makes me sad here is developers stuck debugging things on computers with old IE (like IIS servers) and want to open the docs - that's not really that big of a deal though.   @rvagg assuming this idea (switching between modern JS and ES5) gets accepted - I can gladly revamp the code base for it and as I said before add such examples for all code examples on the site docs. I just don't want to do a lot of work while we're not sure yet it'll be used (and the PoC does a good job at illustrating the usefulness). 
> So I think it's time to say goodbye to IE8.  Thanks for testing this @xcatliu , lets say good bye to old ies :+1:  
@benjamingr Flexbox support starts with IE10 (buggy and prefixed), IE11 should be fine. @eljefedelrodeodeljefe API docs don't need Flexbox and work for me in IE11's IE7 mode with a few minor issues. 
Noting this here for future folks: the [Docs WG resolution](https://github.com/nodejs/docs/issues/55#issuecomment-173324666) was not to apply this approach to all of the docs due to the maintenance burden of keeping up two examples for every existing example, and instead look for a better way to highlight confusing syntax (like backticks.) 
for me, it redirects to https://nodejs.org/en/docs/. paging @phillipj, do you know where this is supposed to lead? 
It redirects for me too. 
@sumitsharma0999 from where did you get to that URL? 
> for me, it redirects to https://nodejs.org/en/docs/  Yupp, that's deliberate by the following [nginx rules](https://github.com/nodejs/build/blob/master/setup/www/resources/config/nodejs.org).  The workflow URL in question is mentioned in TJ's next-chapter blog post: https://nodejs.org/en/blog/community/next-chapter/ which is available in the old nodejs.org-archived repo: https://github.com/nodejs/nodejs.org-archive/blob/master/doc/contribute/code_contributions/workflow.md  As good as that workflow documentation is, it doesn't apply anymore AFAIK. Today's equivalent would probably be https://github.com/nodejs/node/blob/master/CONTRIBUTING.md 
For me also, it redirects now to https://nodejs.org/en/docs/ - this looks like a temporary issue.  Regarding the source of URL, I was browisng through https://nodejs.org and I am unable to the recall where exactly the link was. But I am pretty sure it was either on the home page or atmost 1 level down. I tried to find the link now, but was unable to find it. 
Should the nginx redirect be changed to the document that has superseded the old workflow document https://github.com/nodejs/dev-policy 
> Should the nginx redirect be changed to the document that has superseded the old workflow document https://github.com/nodejs/dev-policy  Maybe... I was hesitant to reference it since it hasn't been updated in 8 months and it still says draft in the repo title. Any thoughts from @nodejs/documentation? 
@phillipj New Development Policy can be found here: https://nodejs.org/en/get-involved/development/ 
@fhemberger great! Does that mean we should ignore [nodejs/dev-policy](https://github.com/nodejs/dev-policy) for now, and change URLs of the three "Node.js Development Policy" links [on the contribute page](https://nodejs.org/en/get-involved/contribute/)? 
https://github.com/nodejs/dev-policy should likely be folded in to https://github.com/nodejs/node somehow and used as the official source for what gets published to https://nodejs.org/en/get-involved/development/. /cc @nodejs/ctc 
Agreed, it's just a bunch of work no-one has done yet. 
https://github.com/nodejs/dev-policy is completely outdated, not sure if it still makes sense to merge it into the main repo. For changes to https://nodejs.org/en/get-involved/development/, please open a new PR.  Closing this, as the original issue has been solved.
@rvagg PTAL :) 
@JungMinu :boom: lgtm!  You could add this to the community section, or a completely new section:  ``` [Nominations](https://github.com/nodejs/membership/issues/12) closed last Friday for the individual member representative to the Node.js Foundation Board. 12 members put their hands up with nominations:   - **[@guyellis](https://github.com/guyellis)**: http://www.guyellisrocks.com/2015/11/node-foundation-membership-election.html   - **[@sup](https://github.com/sup)**: http://jona.io/blog/board-application/   - **[@ashleygwilliams](https://github.com/ashleygwilliams)**: https://medium.com/@ag_dubs/hi-i-m-running-for-the-node-foundation-board-of-directors-c87d762cb78b   - **[@contra](https://github.com/contra)**: http://contra.io/node_board.txt   - **[@geek](https://github.com/geek)**: http://jsgeek.com/posts/node-foundation-board-nomination.html   - **[@jaredhanson](https://github.com/jaredhanson)**: http://jaredhanson.net/blog/2016/01/13/im-running-for-the-node-js-foundation-bod/   - **[@tejasmanohar](https://github.com/tejasmanohar)**: https://medium.com/@tejasmanohar/node-js-foundation-board-of-directors-5514e8faa660   - **[@bnb](https://github.com/bnb)**: http://bnb.im/blog/Individual-Membership-on-the-Board-of-Directors-for-Node-js.html   - **[@watson](https://github.com/watson)**: https://medium.com/@wa7son/why-i-m-running-for-the-node-js-foundation-board-of-directors-253bc2e3a834   - **[@feross](https://github.com/feross)**: http://feross.org/node-board/   - **[@pgte](https://github.com/pgte)**: https://gist.github.com/pgte/cfbf468202b35be78c66   - **[@ecowden](https://github.com/ecowden)**: https://medium.com/@evan.cowden/the-world-s-worst-resume-e0adf234baa0  A ballot will be distributed to individual members on January 20th, with the election completed by January 30th.  To be eligible to vote, you must be signed up as an individual member of the Node.js Foundation, more information can be found here: https://nodejs.org/en/blog/community/individual-membership/ ```  Sanity check pls @mikeal  
@rvagg Thanks, updated :) @mikeal PTAL :) 
Now that there's Q/A threads up for each of them here's my amended suggestion:  ``` [Nominations](https://github.com/nodejs/membership/issues/12) closed last Friday for the individual member representative to the Node.js Foundation Board. 12 members put their hands up with nominations:   - **[@guyellis](https://github.com/guyellis)**: [nomination post](http://www.guyellisrocks.com/2015/11/node-foundation-membership-election.html), [Q/A thread](https://github.com/nodejs/membership/issues/19)   - **[@sup](https://github.com/sup)**: [nomination post](http://jona.io/blog/board-application/), [Q/A thread](https://github.com/nodejs/membership/issues/20)   - **[@ashleygwilliams](https://github.com/ashleygwilliams)**: [nomination post](https://medium.com/@ag_dubs/hi-i-m-running-for-the-node-foundation-board-of-directors-c87d762cb78b), [Q/A thread](https://github.com/nodejs/membership/issues/21)   - **[@contra](https://github.com/contra)**: [nomination post](http://contra.io/node_board.txt), [Q/A thread](https://github.com/nodejs/membership/issues/22)   - **[@geek](https://github.com/geek)**: [nomination post](http://jsgeek.com/posts/node-foundation-board-nomination.html), [Q/A thread](https://github.com/nodejs/membership/issues/23)   - **[@jaredhanson](https://github.com/jaredhanson)**: [nomination post](http://jaredhanson.net/blog/2016/01/13/im-running-for-the-node-js-foundation-bod/), [Q/A thread](https://github.com/nodejs/membership/issues/24)   - **[@tejasmanohar](https://github.com/tejasmanohar)**: [nomination post](https://medium.com/@tejasmanohar/node-js-foundation-board-of-directors-5514e8faa660), [Q/A thread](https://github.com/nodejs/membership/issues/25)   - **[@bnb](https://github.com/bnb)**: [nomination post](http://bnb.im/blog/Individual-Membership-on-the-Board-of-Directors-for-Node-js.html), [Q/A thread](https://github.com/nodejs/membership/issues/26)   - **[@watson](https://github.com/watson)**: [nomination post](https://medium.com/@wa7son/why-i-m-running-for-the-node-js-foundation-board-of-directors-253bc2e3a834), [Q/A thread](https://github.com/nodejs/membership/issues/27)   - **[@feross](https://github.com/feross)**: [nomination post](http://feross.org/node-board/), [Q/A thread](https://github.com/nodejs/membership/issues/28)   - **[@pgte](https://github.com/pgte)**: [nomination post](https://gist.github.com/pgte/cfbf468202b35be78c66), [Q/A thread](https://github.com/nodejs/membership/issues/29)   - **[@ecowden](https://github.com/ecowden)**: [nomination post](https://medium.com/@evan.cowden/the-world-s-worst-resume-e0adf234baa0), [Q/A thread](https://github.com/nodejs/membership/issues/30)  A ballot will be distributed to individual members on January 20th, with the election completed by January 30th.  To be eligible to vote, you must be signed up as an individual member of the Node.js Foundation, more information can be found here: https://nodejs.org/en/blog/community/individual-membership/ ```  @JungMinu I'll try and get @mikeal in here to comment but don't let that hold up publishing if you'd like to get that done. We can fix afterward if need be. 
@rvagg Thanks, done :) 
Looks good :) 
I guess this is how directory listing works in nginx, I don't know if it can be configured to order the output. 
https://www.nginx.com/resources/wiki/modules/fancy_index/ 
Nginx `autoindex` options listed here: http://nginx.org/en/docs/http/ngx_http_autoindex_module.html 
This is the [nodejs.org nginx config](https://raw.githubusercontent.com/nodejs/build/master/setup/www/resources/config/nodejs.org) for /docs ATM:  ``` location /docs {     alias /home/dist/nodejs/docs/;     autoindex on;     default_type text/html;      location ~ \.json$ {         add_header access-control-allow-origin *;     } } ```  > Nginx autoindex options listed here: > http://nginx.org/en/docs/http/ngx_http_autoindex_module.html  Doesn't look like autoindex has an option for sort ordering, but fancy_index does as of v0.3.3 obviously.  @nodejs/build would it be possible to install the fancy_index module for nginx? 
I've been tempted to do this to change the way we list filenames that get too long and are replaced with ellipses which frustrate me no end. However, the security implications of adding fancyindex have made me -1 on doing so at this point. It's an unofficial module, and not likely very widely used, we wouldn't get regular security updates to it via the normal system update system and it's just another potential vector for attack.  The ordering the the same for /dist/, we have the `latest` symlinks at the top. I'm -1 on doing anything about this, if we need a proper fancy index then let's build one as part of the site so it actually looks nice and is integrated with the rest of nodejs.org. 
ping @nodejs/build @jbergstroem :) 
Agree with @rvagg here; there's no real good way of maintaining nginx 3rd party modules from the current standpoint. Next nginx stable release will support a 3rd party module system that doesn't have to be compiled as part of the binary which likely makes this much easier but ultimately (also) think that building it as part of the website is likely a better solution. 
Closing this for now. We might reconsider this issue, once the new nginx module is available and has been thoroughly tested. 
perhaps add that the inclusivity WG is chartered directly under the TSC 
Inclusivity WG can be found here: https://nodejs.org/en/about/working-groups/#current-top-level-working-groups 
I'm merging this as I've got the impression that the links we're currently display (https://github.com/nodejs/dev-policy) are outdated and not going to be maintained.  /cc @nodejs/documentation 
This is the website issue tracker. Please go to https://github.com/nodejs/node/issues/new 
I thought these were automated? 
They are generated automatically but we still have to push them up 
They are generated automatically but are landed manually. On Jan 20, 2016 6:44 PM, "Mikeal Rogers" notifications@github.com wrote:  > I thought these were automated? >  > — > Reply to this email directly or view it on GitHub > https://github.com/nodejs/nodejs.org/pull/476#issuecomment-173433958. 
LGTM :100:  
Of-course i check before the pull request, but i just finished doing a double check after the pull request & just wanted to say good work @geek  
Thanks! :+1:  
Too document for later; Travis integration still not visible in PRs, even though Travis had 3d party access for a while as said in https://github.com/nodejs/nodejs.org/issues/355#issuecomment-173989061. 
@bnoordhuis @Trott Thanks, updated :) 
LGTM.  The first NodeSource post (https://nodesource.com/blog/node-by-numbers-2015/) seems neutral enough to me, by the way.  I think that can go in the Community Updates section but it's your call. 
@bnoordhuis Thanks, done :) 
> weekly updates should be a place for non-sponsored community content and news only.  I think you might be significantly underestimating how much content in these updates comes from "corporates" from week to week. It's thanks to significant corporate support that Node is moving forward so well and has so many people working full time on it. Corporate marketing is also done via providing content that may seem "benign" but it's still corporate marketing. Blog posts on corporate sites always have a component of promoting the company hosting that post. Even posts on third-party sites, like GitHub, tumblr, medium, etc. are used for the same purpose. If you want to take an extreme purist position on this you're going to have a very difficult time finding a line to draw and I'd argue that any line you do draw will be arbitrary.   Tangentially, supporting the Node ecosystem, including the various players competing in the corporate place, is how we support Node. Look over the CTC list and consider how many of the full-time contributors would not be around without this vibrant ecosystem of competing and collaborating companies.   @bnoordhuis I could use the same argument to have the whole "Additional Platforms" section removed from https://nodejs.org/en/download/ because it's an IBM promotion exercise. Yet I don't see this as a zero-sum-game, the more we encourage commercial activity around Node the more we all win.    The minority of the weekly update content is "vendor neutral" and much of it is "corporate advertising", all of it is a grey area so let's not resort to petty inter-company bickering. There's nothing but upside for Node here.  
Nit for next time--ignore if you want: I think it is best to organize items by topic and not by source. There probably shouldn't be a `NodeSource Updates` section or a `NodeUp` section. Rather those items should be put into whatever the relevant topic or topics would be. 
> If you want to take an extreme purist position on this you're going to have a very difficult time finding a line to draw and I'd argue that any line you do draw will be arbitrary.  Maybe so but FWIW, I don't submit material from the StrongLoop blog because I don't think it's neutral enough.  The line may be arbitrary but at least I'm drawing it consistently. 
For what it's worth @bnoordhuis I think pages like https://strongloop.com/node-js/why-node/ or several of the blog posts are definitely objective and personally I'd be perfectly fine with them in the weekly updates.  
I don't think we should overload the people doing the work of putting this together with the task of editorializing what is "corporate" and what is not. 
LGTM! 
/cc @nodejs/documentation  
Hi @stefanwalther   I'm not really sure we should _just_ be referencing `docker-machine` here. I can pretty much assume you're developing on OSX or Windows and you're using docker-toolbox and so you're using `docker-machine` to get the IP of the VM as `localhost:8080` doesn't work. However, we have to think about people who either don't have `docker-machine` installed, or just don't use it because they don't need to.   Firstly, are my assumptions correct? Secondly, if they are correct, I don't want to make this addition complicated by naming every way of getting an IP or explaining what docker-machine is etc  but we need to at least explain it so it all makes sense, no matter what OS you're running docker on etc. 
Also have to agree that `docker-machine` and the likes have no place in this guide. That information is just to specific to a certain setup. 
Agreed, this is a bit too specific for this guide. How to work with Docker in general on your environment is part of Docker's own getting started guides. But thanks for bringing this up anyway. 
It's not exactly an error. In that case `sandbox === context`. Are you suggesting to change it as follow?  ``` js console.log(util.inspect(context)); ``` 
I dont see how this is an error? 
Closing this for now, please feel free to reopen it with additional details.
:+1:  
LGTM 
What do you mean by configuration documentation? Perhaps you should read [CONTRIBUTING](https://github.com/nodejs/nodejs.org/blob/master/CONTRIBUTING.md) first 
What is the issue here?  @cafutor if you wanna ask a question, please open an issue at https://github.com/nodejs/help or stackoverflow. This is the issue tracker for the nodejs website only. Thanks. 
Thanks for the report!  Some features explicitly have a footnote saying: "[2]: Only available in Node.js >= 5.x.x"  Everything else is available in the LTS release. That is - it's documented, but only for the two current versions (LTS and Latest stable).  How do you think we can clarify that page so users get a clearer idea of what's available where? 
Yeah I agree, as new versions are released with new features it will become harder to tell which features are available since which version. Perhaps we could either add a column next to each feature to say "Available Since" with the version number, or organize it like a changelog and list the features that were added in each version? 
#434 is the PR that resolve this issue. 
Perhaps http://node.green will help you? 
@williamkapke thanks, very good reference site. 
Closing because of #671 
Good catch, thanks for reporting @aberant, it looks like a few have slipped through as 2015: https://nodejs.org/download/release/index.tab  The cause was poor date sorting @ https://github.com/nodejs/build/commit/73d1682f429e61fbbb759c3bd3fbbd3ae826e96b combined with newer SHASUM256.txt files that have been put into some of these older directories, so they have a new modified timestamp on them. 
roll it out in production +1 
yup, agree with @stevemao here 
LGTM  
Thanks for reviewing :+1: I've opened https://github.com/nodejs/build/pull/316 to fix this in production aswell, not much point in merging this before that PR gets some positive feedback and lands.  Did a minor refactor to get more inline with what nginx will end up doing. Rather than serving the fallback file from disk, it now responds with a 302 redirect to the equivalent english URL.  FYI I'm going on one week vacation in a couple of days 🏊🌴Will follow this up when I'm back on the keyboard again. 
If anyone's up for some nginx exercise, feel free to join the discussion in https://github.com/nodejs/build/pull/316 :) 
Waiting for https://github.com/nodejs/build/pull/316 to land. 
this would be really nice to have now that we have a mostly unfinished chinese translation 
@tentakel thought we had nginx solved, but obviously not; https://github.com/nodejs/build/pull/316#issuecomment-219318546. Hopefully I'll get an ansible setup of nodejs.org soon, too debug what's wrong with the suggested changes. 
https://github.com/nodejs/build/pull/316 has been deployed live now and seems to be going fine, I think this can be merged/reconsidered 
cc @fhemberger  
@Fishrock123 Great, thanks for letting me know. Merging now! 
@thefourtheye Thanks, revised :) 
@Trott Thanks, updated :) 
The easiest I can come up with immediately would be... (Link to: https://raw.githubusercontent.com/nodejs/LTS/master/schedule.png)  ![node_js](https://cloud.githubusercontent.com/assets/3899684/12684312/8a350a56-c6be-11e5-900a-3a20f4954894.png) 
+1 thanks @eljefedelrodeodeljefe  
I think we need more that just the graphic, the graphic is great but a lot of the context for what LTS is we need text for. 
Should we make it incremental? ...have the above not and create some whole subpage? This would probably take way bigger effort, since I wouldn't just append `LTS` to the navbar. 
Ya, you're right, getting _something_ up soon is best, I'm just wondering if we should link to the whole README or just to the graphic? 
If we could have an anchor on the readme above the image that should be fine. I'll open a pull request for the above and on the readme. 
Long term I think having some sort of interactive info graphic that is accurate as of the current time would be very useful 
The interim change would be ready. 
Thanks! 
Do you mean that you like instructions on how to validate that your Node.js installation is working correctly? 
if you want to confirm that your node.js has installed correctly, then the steps you have described should be enough. if that is not your issue, could you give some more information please? we would appreciate it :) 
@hg @kahwee I think OP is suggesting that we add these sort of instructions to the website.  
I think the ask is for a "getting started" in the guides? https://nodejs.org/en/docs/guides/? 
If anyone wants to help creating a simple "getting started" guide (aka "How do I start with Node.js after I downloaded/installed it"), please feel free to submit a PR. 
ping @nodejs/documentation  
I regard Kubernetes' getting started guides as really nice. The sheer amount is too bloated for us (they needed though naturally), but they usually serve as a good starting point not only for novices.  https://github.com/kubernetes/kubernetes/tree/master/docs/getting-started-guides 
+1 `getting started guide`  
Fixed by #1308.
Good catch @NikIvan , PR welcome :) 
I'll handle this issue :) 
Closing, thank you. 
@NikIvan for future reference, the docs are maintained @ https://github.com/nodejs/node/tree/master/doc/api, you're more than welcome to submit a pull request to fix or improve docs when you see something in need  https://github.com/nodejs/nodejs.org/issues/503#issuecomment-178964591 
thanks! 
